//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const ADD = 57437
const MODIFY = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const COLUMN = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const BIT = 57457
const TINYINT = 57458
const SMALLINT = 57459
const MEDIUMINT = 57460
const INT = 57461
const INTEGER = 57462
const BIGINT = 57463
const INTNUM = 57464
const REAL = 57465
const DOUBLE = 57466
const FLOAT_TYPE = 57467
const DECIMAL = 57468
const NUMERIC = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const CHARSET = 57480
const TEXT = 57481
const TINYTEXT = 57482
const MEDIUMTEXT = 57483
const LONGTEXT = 57484
const BLOB = 57485
const TINYBLOB = 57486
const MEDIUMBLOB = 57487
const LONGBLOB = 57488
const JSON = 57489
const ENUM = 57490
const NULLX = 57491
const AUTO_INCREMENT = 57492
const APPROXNUM = 57493
const SIGNED = 57494
const UNSIGNED = 57495
const ZEROFILL = 57496
const DATABASES = 57497
const TABLES = 57498
const VITESS_KEYSPACES = 57499
const VITESS_SHARDS = 57500
const VSCHEMA_TABLES = 57501
const WARNINGS = 57502
const VARIABLES = 57503
const EVENTS = 57504
const BINLOG = 57505
const GTID = 57506
const STATUS = 57507
const COLUMNS = 57508
const CURRENT_TIMESTAMP = 57509
const DATABASE = 57510
const CURRENT_DATE = 57511
const CURRENT_TIME = 57512
const LOCALTIME = 57513
const LOCALTIMESTAMP = 57514
const UTC_DATE = 57515
const UTC_TIME = 57516
const UTC_TIMESTAMP = 57517
const REPLACE = 57518
const CONVERT = 57519
const CAST = 57520
const GROUP_CONCAT = 57521
const SEPARATOR = 57522
const MATCH = 57523
const AGAINST = 57524
const BOOLEAN = 57525
const LANGUAGE = 57526
const WITH = 57527
const QUERY = 57528
const EXPANSION = 57529
const UNUSED = 57530
const PARTITION = 57531
const PARTITIONS = 57532
const HASH = 57533
const XA = 57534
const ENGINES = 57535
const VERSIONS = 57536
const PROCESSLIST = 57537
const QUERYZ = 57538
const TXNZ = 57539
const KILL = 57540
const SESSION = 57541
const ENGINE = 57542
const BEGIN = 57543
const START = 57544
const TRANSACTION = 57545
const COMMIT = 57546
const ROLLBACK = 57547

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"SESSION",
	"ENGINE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 350,
	104, 450,
	-2, 446,
	-1, 351,
	104, 451,
	-2, 447,
	-1, 515,
	5, 25,
	-2, 403,
	-1, 645,
	104, 453,
	-2, 449,
	-1, 758,
	5, 26,
	-2, 282,
	-1, 782,
	5, 26,
	-2, 404,
	-1, 865,
	5, 25,
	-2, 406,
	-1, 967,
	5, 26,
	-2, 407,
}

const yyPrivate = 57344

const yyLast = 5978

var yyAct = [...]int{

	351, 472, 995, 640, 856, 920, 304, 518, 797, 328,
	716, 676, 567, 855, 906, 248, 677, 917, 306, 835,
	719, 628, 638, 554, 750, 62, 529, 742, 519, 673,
	267, 635, 605, 657, 84, 235, 51, 643, 540, 52,
	293, 359, 302, 563, 257, 56, 291, 240, 353, 534,
	329, 46, 584, 706, 83, 531, 265, 1007, 994, 326,
	235, 1006, 986, 1004, 993, 985, 583, 642, 848, 58,
	59, 60, 900, 235, 235, 593, 287, 61, 972, 438,
	437, 447, 448, 440, 441, 442, 443, 444, 445, 446,
	439, 586, 283, 449, 69, 70, 702, 46, 547, 801,
	582, 691, 871, 820, 555, 253, 895, 893, 471, 3,
	731, 940, 484, 236, 237, 275, 239, 730, 241, 242,
	243, 244, 245, 246, 729, 270, 22, 47, 24, 25,
	68, 878, 728, 982, 273, 66, 65, 981, 980, 73,
	72, 379, 461, 462, 42, 927, 579, 577, 573, 26,
	576, 578, 280, 299, 885, 247, 285, 286, 785, 288,
	548, 756, 707, 284, 754, 71, 391, 34, 836, 637,
	49, 396, 397, 398, 399, 400, 401, 402, 686, 403,
	404, 405, 406, 407, 392, 393, 394, 395, 377, 378,
	581, 470, 380, 838, 973, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 580, 64, 761, 542, 840,
	555, 844, 724, 839, 366, 837, 962, 964, 726, 984,
	842, 542, 426, 425, 879, 449, 877, 28, 29, 30,
	841, 32, 575, 424, 268, 843, 845, 810, 439, 427,
	427, 449, 929, 585, 33, 43, 36, 696, 794, 44,
	45, 31, 612, 296, 354, 574, 442, 443, 444, 445,
	446, 439, 235, 425, 449, 235, 610, 611, 609, 727,
	235, 692, 850, 235, 235, 235, 685, 762, 235, 427,
	426, 425, 235, 235, 235, 235, 811, 963, 426, 425,
	658, 355, 768, 499, 500, 852, 541, 427, 763, 658,
	357, 539, 430, 538, 46, 427, 725, 274, 723, 541,
	598, 600, 601, 48, 544, 599, 289, 409, 290, 545,
	459, 440, 441, 442, 443, 444, 445, 446, 439, 35,
	700, 449, 361, 473, 932, 37, 426, 425, 38, 39,
	482, 41, 40, 426, 425, 318, 317, 319, 320, 321,
	322, 458, 460, 427, 323, 735, 736, 737, 67, 509,
	427, 882, 356, 49, 235, 881, 872, 235, 269, 20,
	715, 501, 520, 608, 629, 714, 630, 469, 429, 277,
	474, 475, 476, 477, 478, 479, 480, 525, 483, 485,
	485, 485, 485, 485, 485, 485, 485, 493, 494, 495,
	496, 535, 503, 502, 523, 703, 556, 557, 558, 238,
	970, 235, 428, 516, 943, 880, 235, 261, 505, 733,
	569, 713, 1001, 292, 252, 521, 969, 426, 425, 595,
	596, 937, 602, 603, 268, 272, 292, 592, 802, 803,
	804, 822, 606, 819, 427, 809, 805, 799, 565, 566,
	795, 607, 486, 487, 488, 489, 490, 491, 492, 904,
	292, 463, 464, 465, 466, 467, 468, 874, 873, 509,
	791, 515, 697, 908, 911, 912, 913, 909, 473, 910,
	914, 652, 653, 977, 509, 631, 748, 292, 816, 815,
	936, 645, 813, 812, 935, 588, 589, 590, 591, 784,
	292, 354, 647, 292, 632, 633, 22, 370, 369, 530,
	276, 46, 271, 806, 674, 647, 684, 509, 646, 648,
	520, 675, 655, 777, 678, 474, 662, 22, 634, 513,
	644, 514, 660, 53, 688, 684, 780, 22, 550, 551,
	552, 553, 666, 659, 904, 683, 665, 814, 748, 684,
	49, 49, 864, 560, 561, 562, 908, 911, 912, 913,
	909, 497, 910, 914, 748, 679, 549, 46, 568, 687,
	748, 49, 509, 521, 704, 705, 682, 254, 695, 63,
	693, 49, 689, 649, 564, 604, 559, 976, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 674, 415, 410, 511, 979, 955, 953,
	709, 710, 711, 956, 954, 957, 978, 912, 913, 606,
	952, 49, 717, 951, 999, 680, 258, 259, 607, 992,
	734, 644, 594, 671, 360, 670, 294, 883, 708, 718,
	365, 509, 738, 793, 699, 650, 651, 358, 295, 654,
	720, 757, 447, 448, 440, 441, 442, 443, 444, 445,
	446, 439, 769, 661, 449, 663, 664, 934, 235, 933,
	732, 862, 694, 778, 570, 414, 916, 360, 745, 669,
	672, 946, 746, 473, 255, 256, 249, 668, 368, 788,
	767, 520, 250, 755, 509, 53, 758, 759, 760, 945,
	752, 764, 903, 790, 530, 779, 770, 645, 771, 772,
	773, 774, 422, 787, 282, 281, 264, 924, 423, 55,
	57, 50, 235, 786, 1, 796, 781, 782, 783, 537,
	532, 266, 536, 712, 876, 800, 543, 701, 546, 327,
	690, 533, 792, 931, 521, 698, 644, 373, 374, 372,
	376, 375, 509, 798, 789, 821, 371, 509, 807, 808,
	74, 915, 823, 919, 739, 740, 741, 824, 749, 722,
	721, 829, 851, 572, 233, 645, 830, 457, 235, 667,
	681, 861, 498, 847, 846, 509, 509, 833, 352, 944,
	678, 902, 832, 766, 828, 854, 859, 863, 481, 263,
	818, 656, 869, 853, 305, 849, 747, 597, 316, 313,
	315, 752, 263, 263, 644, 314, 644, 504, 512, 431,
	303, 297, 961, 858, 834, 765, 362, 907, 860, 905,
	857, 679, 776, 421, 866, 899, 971, 510, 870, 23,
	54, 262, 260, 19, 867, 868, 14, 13, 12, 27,
	10, 9, 8, 891, 278, 279, 901, 7, 6, 5,
	4, 235, 235, 251, 21, 2, 18, 17, 16, 15,
	11, 509, 0, 0, 678, 509, 925, 0, 0, 859,
	886, 928, 887, 930, 0, 0, 509, 0, 0, 0,
	0, 0, 865, 896, 897, 0, 0, 826, 827, 898,
	0, 0, 0, 0, 0, 235, 235, 235, 235, 0,
	948, 918, 950, 939, 0, 679, 235, 46, 947, 235,
	949, 717, 235, 859, 859, 859, 859, 965, 509, 958,
	644, 520, 966, 0, 798, 0, 0, 859, 718, 0,
	0, 0, 0, 0, 0, 644, 942, 0, 975, 974,
	473, 0, 0, 834, 0, 860, 860, 860, 860, 875,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 918,
	0, 0, 0, 967, 0, 926, 0, 0, 0, 884,
	987, 988, 0, 0, 521, 0, 0, 968, 0, 0,
	509, 509, 509, 997, 998, 0, 0, 888, 889, 0,
	890, 263, 509, 892, 263, 894, 0, 0, 0, 408,
	0, 0, 263, 263, 263, 0, 0, 416, 983, 0,
	0, 263, 263, 263, 263, 0, 0, 649, 0, 0,
	0, 989, 990, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 364, 1002, 1003, 367, 0, 0, 996,
	996, 996, 941, 0, 411, 412, 413, 0, 0, 0,
	0, 1005, 825, 417, 418, 419, 420, 438, 437, 447,
	448, 440, 441, 442, 443, 444, 445, 446, 439, 0,
	0, 449, 438, 437, 447, 448, 440, 441, 442, 443,
	444, 445, 446, 439, 0, 0, 449, 0, 0, 0,
	0, 0, 433, 263, 436, 522, 524, 0, 743, 0,
	450, 451, 452, 453, 454, 455, 456, 0, 434, 435,
	432, 438, 437, 447, 448, 440, 441, 442, 443, 444,
	445, 446, 439, 0, 0, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 517, 0, 0, 0, 0,
	263, 0, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 636,
	0, 301, 0, 0, 0, 188, 0, 300, 0, 0,
	337, 197, 0, 0, 212, 203, 0, 0, 0, 0,
	330, 331, 571, 0, 0, 0, 0, 587, 0, 49,
	0, 0, 350, 318, 317, 319, 320, 321, 322, 641,
	524, 183, 323, 324, 325, 641, 641, 298, 311, 641,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 641, 641, 641, 641, 0, 0, 0,
	308, 309, 639, 0, 0, 0, 348, 0, 310, 0,
	641, 307, 312, 522, 437, 447, 448, 440, 441, 442,
	443, 444, 445, 446, 439, 226, 0, 449, 346, 0,
	0, 208, 0, 0, 0, 0, 184, 0, 211, 207,
	221, 179, 219, 214, 201, 193, 194, 178, 0, 210,
	187, 192, 186, 205, 216, 217, 185, 231, 182, 225,
	181, 0, 224, 204, 0, 215, 220, 202, 199, 180,
	218, 200, 198, 195, 189, 0, 0, 0, 213, 222,
	232, 0, 0, 227, 228, 229, 0, 0, 0, 0,
	0, 0, 0, 338, 347, 344, 345, 342, 343, 341,
	340, 339, 349, 332, 333, 335, 0, 334, 177, 0,
	196, 230, 209, 191, 223, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 641, 438, 437, 447,
	448, 440, 441, 442, 443, 444, 445, 446, 439, 0,
	0, 449, 0, 0, 0, 641, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 438, 437,
	447, 448, 440, 441, 442, 443, 444, 445, 446, 439,
	0, 0, 449, 0, 522, 0, 524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 301, 0, 0, 0, 188, 775,
	300, 0, 0, 337, 197, 0, 0, 212, 203, 0,
	0, 263, 0, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 350, 318, 317, 319, 320,
	321, 322, 0, 0, 183, 323, 324, 325, 641, 0,
	298, 311, 0, 336, 524, 641, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 309, 639, 0, 263, 0, 348,
	0, 310, 0, 0, 307, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 346, 0, 0, 208, 0, 0, 0, 0, 184,
	0, 211, 207, 221, 179, 219, 214, 201, 193, 194,
	178, 0, 210, 187, 192, 186, 205, 216, 217, 185,
	231, 182, 225, 181, 0, 224, 204, 0, 215, 220,
	202, 199, 180, 218, 200, 198, 195, 189, 0, 0,
	0, 213, 222, 232, 0, 0, 227, 228, 229, 0,
	263, 922, 0, 0, 0, 0, 338, 347, 344, 345,
	342, 343, 341, 340, 339, 349, 332, 333, 335, 0,
	334, 177, 0, 196, 230, 209, 191, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 263, 263, 263, 263, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 263, 0,
	0, 922, 0, 0, 522, 165, 155, 127, 167, 104,
	119, 176, 120, 121, 147, 91, 135, 206, 117, 0,
	107, 86, 114, 87, 105, 129, 188, 132, 103, 157,
	138, 173, 197, 142, 0, 212, 203, 0, 0, 131,
	159, 133, 154, 126, 148, 97, 141, 168, 118, 145,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 144, 163, 116, 146, 85, 143, 0,
	89, 92, 175, 161, 110, 111, 0, 0, 0, 0,
	0, 0, 0, 130, 134, 151, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 140, 0, 0,
	0, 95, 90, 128, 0, 0, 0, 77, 0, 109,
	152, 0, 0, 0, 160, 125, 226, 162, 123, 122,
	166, 169, 208, 0, 158, 106, 115, 184, 113, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 93, 224, 204, 94, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 88, 0, 213,
	222, 232, 102, 75, 227, 228, 229, 78, 79, 0,
	80, 0, 81, 76, 100, 101, 98, 99, 136, 137,
	170, 171, 172, 153, 96, 0, 0, 156, 139, 177,
	0, 196, 230, 209, 191, 223, 0, 0, 0, 0,
	112, 174, 150, 149, 164, 0, 0, 190, 165, 155,
	127, 167, 104, 119, 176, 120, 121, 147, 91, 135,
	206, 117, 0, 107, 86, 114, 87, 105, 129, 188,
	132, 103, 157, 138, 173, 197, 142, 0, 212, 203,
	0, 0, 131, 159, 133, 154, 126, 148, 97, 141,
	168, 118, 145, 0, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 144, 163, 116, 146,
	85, 143, 0, 89, 92, 175, 161, 110, 111, 0,
	0, 0, 0, 0, 0, 0, 130, 134, 151, 124,
	0, 0, 0, 0, 0, 0, 938, 0, 108, 0,
	140, 0, 0, 0, 95, 90, 128, 0, 0, 0,
	526, 0, 109, 152, 0, 0, 0, 160, 125, 226,
	162, 123, 122, 166, 169, 208, 0, 158, 106, 115,
	184, 113, 211, 207, 221, 179, 219, 214, 201, 193,
	194, 178, 0, 210, 187, 192, 186, 205, 216, 217,
	185, 231, 182, 225, 181, 93, 224, 204, 94, 215,
	220, 202, 199, 180, 218, 200, 198, 195, 189, 0,
	88, 0, 213, 222, 232, 102, 527, 227, 228, 229,
	0, 0, 0, 0, 0, 0, 528, 100, 101, 98,
	99, 136, 137, 170, 171, 172, 153, 96, 0, 0,
	156, 139, 177, 0, 196, 230, 209, 191, 223, 0,
	0, 0, 0, 112, 174, 150, 149, 164, 0, 0,
	190, 165, 155, 127, 167, 104, 119, 176, 120, 121,
	147, 91, 135, 206, 117, 0, 107, 86, 114, 87,
	105, 129, 188, 132, 103, 157, 138, 173, 197, 142,
	0, 212, 203, 0, 0, 131, 159, 133, 154, 126,
	148, 97, 141, 168, 118, 145, 49, 0, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 144,
	163, 116, 146, 85, 143, 0, 89, 92, 175, 161,
	110, 111, 0, 0, 0, 0, 0, 0, 0, 130,
	134, 151, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 140, 0, 0, 0, 95, 90, 128,
	0, 0, 0, 526, 0, 109, 152, 0, 0, 0,
	160, 125, 226, 162, 123, 122, 166, 169, 208, 0,
	158, 106, 115, 184, 113, 211, 207, 221, 179, 219,
	214, 201, 193, 194, 178, 0, 210, 187, 192, 186,
	205, 216, 217, 185, 231, 182, 225, 181, 93, 224,
	204, 94, 215, 220, 202, 199, 180, 218, 200, 198,
	195, 189, 0, 88, 0, 213, 222, 232, 102, 527,
	227, 228, 229, 0, 0, 0, 0, 0, 0, 528,
	100, 101, 98, 99, 136, 137, 170, 171, 172, 153,
	96, 0, 0, 156, 139, 177, 0, 196, 230, 209,
	191, 223, 0, 0, 0, 0, 112, 174, 150, 149,
	164, 0, 0, 190, 165, 155, 127, 167, 104, 119,
	176, 120, 121, 147, 91, 135, 206, 117, 0, 107,
	86, 114, 87, 105, 129, 188, 132, 103, 157, 138,
	173, 197, 142, 0, 212, 203, 0, 0, 131, 159,
	133, 154, 126, 148, 97, 141, 168, 118, 145, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 144, 163, 116, 146, 85, 143, 0, 89,
	92, 175, 161, 110, 111, 0, 0, 0, 0, 0,
	0, 0, 130, 134, 151, 124, 0, 0, 0, 0,
	0, 0, 831, 0, 108, 0, 140, 0, 0, 0,
	95, 90, 128, 0, 0, 0, 526, 0, 109, 152,
	0, 0, 0, 160, 125, 226, 162, 123, 122, 166,
	169, 208, 0, 158, 106, 115, 184, 113, 211, 207,
	221, 179, 219, 214, 201, 193, 194, 178, 0, 210,
	187, 192, 186, 205, 216, 217, 185, 231, 182, 225,
	181, 93, 224, 204, 94, 215, 220, 202, 199, 180,
	218, 200, 198, 195, 189, 0, 88, 0, 213, 222,
	232, 102, 527, 227, 228, 229, 0, 0, 0, 0,
	0, 0, 528, 100, 101, 98, 99, 136, 137, 170,
	171, 172, 153, 96, 0, 0, 156, 139, 177, 0,
	196, 230, 209, 191, 223, 0, 0, 0, 0, 112,
	174, 150, 149, 164, 0, 0, 190, 165, 155, 127,
	167, 104, 119, 176, 120, 121, 147, 91, 135, 206,
	117, 0, 107, 86, 114, 87, 105, 129, 188, 132,
	103, 157, 138, 173, 197, 142, 0, 212, 203, 0,
	0, 131, 159, 133, 154, 126, 148, 97, 141, 168,
	118, 145, 0, 0, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 144, 163, 116, 146, 85,
	143, 0, 89, 92, 175, 161, 110, 111, 0, 0,
	0, 0, 0, 0, 0, 130, 134, 151, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 140,
	0, 0, 0, 95, 90, 128, 0, 0, 0, 526,
	0, 109, 152, 0, 0, 0, 160, 125, 226, 162,
	123, 122, 166, 169, 208, 0, 158, 106, 115, 184,
	113, 211, 207, 221, 179, 219, 214, 201, 193, 194,
	178, 0, 210, 187, 192, 186, 205, 216, 217, 185,
	231, 182, 225, 181, 93, 224, 204, 94, 215, 220,
	202, 199, 180, 218, 200, 198, 195, 189, 0, 88,
	0, 213, 222, 232, 102, 527, 227, 228, 229, 0,
	0, 0, 0, 0, 0, 528, 100, 101, 98, 99,
	136, 137, 170, 171, 172, 153, 96, 0, 0, 156,
	139, 177, 0, 196, 230, 209, 191, 223, 0, 0,
	0, 0, 112, 174, 150, 149, 164, 0, 0, 190,
	165, 155, 127, 167, 104, 119, 176, 120, 121, 147,
	91, 135, 206, 117, 0, 107, 86, 114, 87, 105,
	129, 188, 132, 103, 157, 138, 173, 197, 142, 0,
	212, 203, 0, 0, 131, 159, 133, 154, 126, 148,
	97, 141, 168, 118, 145, 0, 0, 0, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 144, 163,
	116, 146, 85, 143, 0, 89, 92, 175, 161, 110,
	111, 0, 0, 0, 0, 0, 0, 0, 130, 134,
	151, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 140, 0, 0, 0, 95, 90, 128, 0,
	0, 0, 526, 0, 109, 152, 0, 0, 0, 160,
	125, 226, 162, 123, 122, 166, 169, 208, 0, 158,
	106, 115, 184, 113, 211, 207, 221, 179, 219, 214,
	201, 193, 194, 178, 0, 210, 187, 192, 186, 205,
	216, 217, 185, 231, 182, 225, 181, 93, 224, 204,
	94, 215, 220, 202, 199, 180, 218, 200, 198, 195,
	189, 0, 88, 0, 213, 222, 232, 102, 527, 227,
	228, 229, 0, 0, 0, 0, 0, 0, 528, 100,
	101, 98, 99, 136, 137, 170, 171, 172, 153, 96,
	0, 0, 156, 139, 177, 0, 196, 230, 209, 191,
	223, 0, 0, 0, 0, 112, 174, 150, 149, 164,
	0, 0, 190, 165, 155, 127, 167, 104, 119, 176,
	120, 121, 147, 91, 135, 206, 117, 0, 107, 86,
	114, 87, 105, 129, 188, 132, 103, 157, 138, 173,
	197, 142, 0, 212, 203, 0, 0, 131, 159, 133,
	154, 126, 148, 97, 141, 168, 118, 145, 0, 0,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 144, 163, 116, 146, 85, 143, 0, 89, 92,
	175, 161, 110, 111, 0, 0, 0, 0, 0, 0,
	0, 130, 134, 151, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 140, 0, 0, 0, 95,
	90, 128, 0, 0, 0, 526, 0, 109, 152, 0,
	0, 0, 160, 125, 226, 162, 123, 122, 166, 169,
	208, 0, 158, 106, 115, 184, 113, 211, 207, 221,
	179, 219, 214, 201, 193, 194, 178, 0, 210, 187,
	192, 186, 205, 216, 217, 185, 231, 182, 225, 181,
	93, 224, 204, 94, 215, 220, 202, 199, 180, 218,
	200, 198, 195, 189, 0, 88, 0, 213, 222, 232,
	102, 527, 227, 228, 229, 0, 0, 0, 0, 0,
	0, 528, 100, 101, 98, 99, 136, 137, 170, 171,
	172, 153, 96, 0, 0, 156, 139, 177, 0, 196,
	230, 209, 191, 223, 0, 0, 0, 0, 112, 174,
	150, 149, 164, 206, 0, 190, 0, 0, 301, 0,
	0, 0, 188, 0, 300, 0, 0, 337, 197, 0,
	0, 212, 203, 0, 0, 0, 0, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 292, 350,
	318, 317, 319, 320, 321, 322, 0, 0, 183, 323,
	324, 325, 0, 0, 298, 311, 0, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 308, 309, 0,
	0, 0, 0, 348, 0, 310, 0, 0, 307, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 346, 0, 0, 208, 0,
	0, 0, 0, 184, 0, 211, 207, 221, 179, 219,
	214, 201, 193, 194, 178, 0, 210, 187, 192, 186,
	205, 216, 217, 185, 231, 182, 225, 181, 0, 224,
	204, 0, 215, 220, 202, 199, 180, 218, 200, 198,
	195, 189, 0, 0, 0, 213, 222, 232, 0, 0,
	227, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	338, 347, 344, 345, 342, 343, 341, 340, 339, 349,
	332, 333, 335, 0, 334, 177, 22, 196, 230, 209,
	191, 223, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 301, 190, 0, 0, 188, 0, 300, 0,
	0, 337, 197, 0, 0, 212, 203, 0, 0, 0,
	0, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 350, 318, 317, 319, 320, 321, 322,
	0, 0, 183, 323, 324, 325, 0, 0, 298, 311,
	0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 308, 309, 0, 0, 0, 0, 348, 0, 310,
	0, 0, 307, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 346,
	0, 0, 208, 0, 0, 0, 0, 184, 0, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 0, 224, 204, 0, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 0, 0, 213,
	222, 232, 0, 0, 227, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 338, 347, 344, 345, 342, 343,
	341, 340, 339, 349, 332, 333, 335, 0, 334, 177,
	0, 196, 230, 209, 191, 223, 0, 206, 0, 0,
	0, 0, 301, 0, 0, 0, 188, 190, 300, 0,
	0, 337, 197, 0, 0, 212, 203, 0, 0, 0,
	0, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 350, 318, 317, 319, 320, 321, 322,
	0, 0, 183, 323, 324, 325, 0, 0, 298, 311,
	0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 308, 309, 0, 0, 0, 0, 348, 0, 310,
	0, 0, 307, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 346,
	0, 0, 208, 0, 0, 0, 0, 184, 0, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 0, 224, 204, 0, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 0, 0, 213,
	222, 232, 0, 0, 227, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 338, 347, 344, 345, 342, 343,
	341, 340, 339, 349, 332, 333, 335, 206, 334, 177,
	0, 196, 230, 209, 191, 223, 188, 0, 0, 0,
	0, 337, 197, 0, 0, 212, 203, 190, 0, 0,
	0, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 350, 318, 317, 319, 320, 321, 322,
	0, 0, 183, 323, 324, 325, 0, 0, 0, 311,
	0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 308, 309, 0, 0, 0, 0, 348, 0, 310,
	0, 0, 307, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 346,
	0, 0, 208, 0, 0, 0, 0, 184, 0, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 0, 224, 204, 0, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 0, 0, 213,
	222, 232, 0, 0, 227, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 338, 347, 344, 345, 342, 343,
	341, 340, 339, 349, 332, 333, 335, 206, 334, 177,
	0, 196, 230, 209, 191, 223, 188, 0, 0, 0,
	0, 0, 197, 0, 0, 212, 203, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 438, 437, 447,
	448, 440, 441, 442, 443, 444, 445, 446, 439, 0,
	0, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 184, 0, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 0, 224, 204, 0, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 0, 0, 213,
	222, 232, 0, 206, 227, 228, 229, 751, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 197, 0,
	0, 212, 203, 0, 0, 0, 0, 0, 0, 177,
	0, 196, 230, 209, 191, 223, 0, 0, 0, 508,
	0, 753, 0, 0, 0, 0, 0, 190, 183, 0,
	0, 0, 426, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 184, 0, 211, 207, 221, 179, 219,
	214, 201, 193, 194, 178, 0, 210, 187, 192, 186,
	205, 216, 217, 185, 231, 182, 225, 181, 0, 224,
	204, 0, 215, 220, 202, 199, 180, 218, 200, 198,
	195, 189, 22, 0, 0, 213, 222, 232, 0, 0,
	227, 228, 229, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 197, 0,
	0, 212, 203, 0, 0, 177, 0, 196, 230, 209,
	191, 223, 0, 0, 0, 0, 49, 0, 0, 234,
	0, 0, 0, 190, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 184, 0, 211, 207, 221, 179, 219,
	214, 201, 193, 194, 178, 0, 210, 187, 192, 186,
	205, 216, 217, 185, 231, 182, 225, 181, 0, 224,
	204, 0, 215, 220, 202, 199, 180, 218, 200, 198,
	195, 189, 0, 0, 0, 213, 222, 232, 0, 206,
	227, 228, 229, 921, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 197, 0, 0, 212, 203, 0,
	0, 0, 0, 0, 0, 177, 0, 196, 230, 209,
	191, 223, 0, 0, 0, 234, 0, 923, 0, 0,
	0, 0, 0, 190, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 184,
	0, 211, 207, 221, 179, 219, 214, 201, 193, 194,
	178, 0, 210, 187, 192, 186, 205, 216, 217, 185,
	231, 182, 225, 181, 0, 224, 204, 0, 215, 220,
	202, 199, 180, 218, 200, 198, 195, 189, 22, 0,
	0, 213, 222, 232, 0, 0, 227, 228, 229, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 197, 0, 0, 212, 203, 0,
	0, 177, 0, 196, 230, 209, 191, 223, 0, 0,
	0, 0, 49, 0, 0, 508, 0, 0, 0, 190,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 184,
	0, 211, 207, 221, 179, 219, 214, 201, 193, 194,
	178, 0, 210, 187, 192, 186, 205, 216, 217, 185,
	231, 182, 225, 181, 0, 224, 204, 0, 215, 220,
	202, 199, 180, 218, 200, 198, 195, 189, 0, 0,
	0, 213, 222, 232, 0, 206, 227, 228, 229, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	197, 0, 0, 212, 203, 0, 0, 0, 0, 0,
	0, 177, 0, 196, 230, 209, 191, 223, 0, 0,
	0, 508, 0, 0, 506, 0, 0, 507, 0, 190,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 184, 0, 211, 207, 221,
	179, 219, 214, 201, 193, 194, 178, 0, 210, 187,
	192, 186, 205, 216, 217, 185, 231, 182, 225, 181,
	0, 224, 204, 0, 215, 220, 202, 199, 180, 218,
	200, 198, 195, 189, 0, 0, 0, 213, 222, 232,
	0, 206, 227, 228, 229, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 197, 0, 0, 212,
	203, 0, 0, 0, 0, 0, 0, 177, 0, 196,
	230, 209, 191, 223, 0, 0, 0, 234, 0, 923,
	0, 0, 0, 0, 0, 190, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 184, 0, 211, 207, 221, 179, 219, 214, 201,
	193, 194, 178, 0, 210, 187, 192, 186, 205, 216,
	217, 185, 231, 182, 225, 181, 0, 224, 204, 0,
	215, 220, 202, 199, 180, 218, 200, 198, 195, 189,
	0, 0, 0, 213, 222, 232, 0, 206, 227, 228,
	229, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 197, 0, 0, 212, 203, 0, 0, 0,
	0, 0, 0, 177, 0, 196, 230, 209, 191, 223,
	49, 0, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 190, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 184, 0, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 0, 224, 204, 0, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 0, 0, 213,
	222, 232, 0, 206, 227, 228, 229, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 197, 0,
	0, 212, 203, 0, 0, 0, 0, 0, 0, 177,
	0, 196, 230, 209, 191, 223, 0, 0, 0, 508,
	0, 753, 0, 0, 0, 0, 0, 190, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 184, 0, 211, 207, 221, 179, 219,
	214, 201, 193, 194, 178, 0, 210, 187, 192, 186,
	205, 216, 217, 185, 231, 182, 225, 181, 0, 224,
	204, 0, 215, 220, 202, 199, 180, 218, 200, 198,
	195, 189, 0, 0, 0, 213, 222, 232, 0, 206,
	227, 228, 229, 0, 0, 0, 0, 363, 188, 0,
	0, 0, 0, 0, 197, 0, 0, 212, 203, 0,
	0, 0, 0, 0, 0, 177, 0, 196, 230, 209,
	191, 223, 0, 0, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 190, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 184,
	0, 211, 207, 221, 179, 219, 214, 201, 193, 194,
	178, 0, 210, 187, 192, 186, 205, 216, 217, 185,
	231, 182, 225, 181, 0, 224, 204, 0, 215, 220,
	202, 199, 180, 218, 200, 198, 195, 189, 0, 0,
	0, 213, 222, 232, 0, 206, 227, 228, 229, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	197, 0, 0, 212, 203, 0, 0, 0, 0, 0,
	0, 177, 0, 196, 230, 209, 191, 223, 0, 0,
	0, 508, 0, 0, 0, 0, 0, 0, 0, 190,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 184, 0, 211, 207, 221,
	179, 219, 214, 201, 193, 194, 178, 0, 210, 187,
	192, 186, 205, 216, 217, 185, 231, 182, 225, 181,
	0, 224, 204, 0, 215, 220, 202, 199, 180, 218,
	200, 198, 195, 189, 0, 0, 0, 213, 222, 232,
	0, 206, 227, 228, 229, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 197, 0, 0, 212,
	203, 0, 0, 0, 0, 0, 0, 177, 0, 196,
	230, 209, 191, 223, 0, 0, 0, 350, 0, 0,
	0, 0, 0, 0, 0, 190, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 184, 0, 211, 207, 221, 179, 219, 214, 201,
	193, 194, 178, 0, 210, 187, 192, 186, 205, 216,
	217, 185, 231, 182, 225, 181, 0, 224, 204, 0,
	215, 220, 202, 199, 180, 218, 200, 198, 195, 189,
	0, 0, 0, 213, 222, 232, 0, 206, 227, 228,
	229, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 197, 0, 0, 212, 203, 0, 0, 0,
	0, 0, 0, 177, 0, 196, 230, 209, 191, 223,
	0, 0, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 190, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 184, 0, 211,
	207, 221, 179, 219, 214, 201, 193, 194, 178, 0,
	210, 187, 192, 186, 205, 216, 217, 185, 231, 182,
	225, 181, 0, 224, 204, 0, 215, 220, 202, 199,
	180, 218, 200, 198, 195, 189, 0, 0, 0, 213,
	222, 232, 0, 0, 227, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 196, 230, 209, 191, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190,
}
var yyPact = [...]int{

	120, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	681, 714, -1000, -1000, -1000, -1000, -1000, 529, 21, 12,
	-20, 26, 25, 1660, 5760, -1000, -1000, 353, -1000, -173,
	-1000, -1000, -1000, -1000, -1000, -1000, 531, -1000, -1000, -1000,
	-1000, -1000, 670, 677, 571, 665, 589, -1000, 12, 5760,
	706, -1000, -150, 381, 6, 459, 6, 20, -1000, -4,
	457, -4, 5760, 5760, -1000, 705, 704, -22, -1000, -1000,
	-103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 384, 618, 3520,
	3520, 681, -1000, 531, -1000, -1000, -1000, 614, -1000, -1000,
	271, 5292, 611, 110, 5760, 673, 456, -1000, 39, 5760,
	249, 556, 5760, 5760, 5760, 653, 555, 5760, -1000, -1000,
	-1000, 5760, 5760, 5760, 5760, -1000, -1000, 702, -1000, -1000,
	-1000, -1000, -1000, -1000, 710, 147, 361, -1000, 3520, 1034,
	501, 501, -1000, -1000, 37, -1000, -1000, 3700, 3700, 3700,
	3700, 3700, 3700, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 501, 87, -1000, 3330,
	501, 501, 501, 501, 501, 501, 3520, 501, 501, 501,
	501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
	-1000, -1000, 510, -1000, 270, 670, 384, 589, 4668, 566,
	-1000, -1000, 500, 5760, -1000, 5604, 2938, 693, -153, -168,
	181, 251, -72, -1000, -1000, 516, -1000, 516, 516, 516,
	516, -48, -48, -48, -48, -1000, -1000, -1000, -1000, -1000,
	536, -1000, 516, 516, 516, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 534, 534, 534, 518, 518, -1000, 652,
	5760, -1000, 38, -1000, -1000, 5760, -1000, -1000, -1000, -1000,
	-1000, 670, -106, -1000, 597, 3520, 3520, 247, 3520, 3520,
	157, 3700, 313, 182, 3700, 3700, 3700, 3700, 3700, 3700,
	3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700, 321,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 432, -1000,
	531, 291, 291, 124, 124, 124, 124, 124, 3880, 1149,
	2725, 384, 451, 214, 3330, 1422, 1422, 3520, 3520, 1422,
	657, 227, 214, 5448, -1000, 384, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1422, 1422, 1422, 1422, 3520, -1000, -1000,
	-1000, 618, -1000, 657, 669, -1000, 604, 602, -1000, -1000,
	1422, -1000, 554, 5604, 501, -1000, 4512, -1000, 498, -1000,
	200, -1000, 74, -1000, -1000, -1000, -1000, -1000, -1000, 681,
	3520, 501, -1000, -66, 195, -1000, -1000, 530, 645, 194,
	419, -1000, -1000, 616, -1000, 267, -75, -1000, -1000, 349,
	-48, -48, -1000, -1000, 61, 609, 61, 61, 61, 366,
	-1000, -1000, -1000, -1000, 319, -1000, -1000, -1000, 314, -1000,
	-1000, 2086, -1000, 191, 193, 15, 1, -6, -13, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 364, 594, 157, 196, -1000, -1000, 292,
	-1000, -1000, 214, 214, 1321, -1000, -1000, -1000, -1000, 313,
	3700, 3700, 3700, 980, 1321, 1290, 563, 1166, 124, 163,
	163, 140, 140, 140, 140, 140, 230, 230, -1000, -1000,
	-1000, 384, -1000, -1000, -1000, 384, 1422, 497, -1000, -1000,
	4036, 60, 501, 57, -1000, -1000, -1000, 3520, -1000, 384,
	435, 435, 156, 277, 435, 1422, 218, -1000, 3520, 384,
	-1000, 435, 384, 435, 435, -1000, -1000, 5760, -1000, -1000,
	-1000, -1000, 513, -1000, 647, 465, 485, -1000, -1000, 3136,
	384, 448, 54, 681, 5604, 3520, 2725, 670, 214, 417,
	615, 172, 397, 5448, -1000, 394, -1000, -1000, -68, 383,
	-1000, -1000, -1000, 461, 61, 61, -1000, 392, 184, -1000,
	-1000, -1000, 441, -1000, 496, 437, -1000, -1000, -1000, -1000,
	-1000, 5760, -1000, -1000, -1000, -1000, -1000, 390, -49, 529,
	388, 381, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 980,
	1321, 995, -1000, 3700, 3700, -1000, -1000, 435, 1422, -1000,
	-1000, 5136, -1000, -1000, 2299, 1422, 2512, 214, -1000, -1000,
	-1000, 66, 321, 66, -131, 519, 197, -1000, 3520, 222,
	-1000, -1000, -1000, -1000, -1000, -1000, 693, 4980, 644, -1000,
	501, -1000, -1000, 521, 5448, 5448, 670, -1000, 214, -1000,
	-1000, 384, -1000, -53, 310, -1000, 416, -1000, 516, -1000,
	104, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 360, 309, -1000, 305, -1000, -1000, -1000,
	608, -1000, -1000, -1000, -1000, 3700, 1321, 1321, -1000, -1000,
	-1000, -1000, 50, 384, -1000, 384, 516, 516, -1000, 516,
	518, -1000, 516, -30, 516, -31, 384, 384, 501, -125,
	-1000, 214, 3520, 690, 493, 517, -1000, -1000, -1000, 655,
	4196, 4352, 709, -1000, 501, -1000, 531, 41, -1000, -1000,
	2086, 166, -1000, -1000, 5448, -1000, 272, 642, -1000, 640,
	-1000, 442, 438, 378, 1321, 1873, -1000, -1000, -1000, 58,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3700, 384,
	359, 214, 686, 666, 4980, 4980, 4980, 4980, -1000, 584,
	581, -1000, 570, 569, 576, 5760, -1000, 408, 4196, 169,
	-1000, 4824, -1000, -1000, 5604, 485, 384, 5448, -1000, 373,
	-1000, -1000, 355, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -8, -1000, -1000, -1000, 3520, 3520, 517, 538, 434,
	-1000, -1000, -1000, -1000, 577, -1000, 568, -1000, -1000, -1000,
	-1000, -1000, 23, 22, 18, -1000, 484, -1000, -1000, -1000,
	-1000, 384, 19, -141, 214, 464, 3520, 3520, -1000, -1000,
	501, 501, 501, -1000, 593, -137, -146, 214, 214, 5448,
	5448, 5448, -1000, 588, -1000, 371, -1000, 371, 371, -139,
	-1000, 5448, -1000, -1000, -142, -1000, -147, -1000,
}
var yyPgo = [...]int{

	0, 870, 869, 868, 867, 866, 865, 108, 369, 864,
	863, 860, 859, 858, 857, 852, 851, 850, 849, 848,
	847, 846, 843, 45, 842, 840, 839, 41, 837, 44,
	836, 835, 833, 27, 169, 31, 22, 3, 832, 17,
	13, 4, 830, 829, 14, 827, 781, 826, 823, 822,
	2, 26, 821, 820, 819, 818, 42, 153, 817, 815,
	810, 809, 808, 807, 32, 1, 11, 9, 16, 804,
	18, 6, 801, 33, 798, 793, 791, 789, 39, 788,
	48, 782, 15, 40, 780, 29, 7, 28, 779, 358,
	777, 307, 368, 773, 770, 769, 20, 0, 59, 67,
	24, 768, 739, 37, 5, 763, 761, 77, 10, 21,
	19, 760, 756, 751, 750, 749, 748, 747, 160, 745,
	743, 23, 53, 742, 741, 740, 738, 737, 43, 12,
	736, 735, 734, 733, 30, 732, 38, 25, 731, 730,
	729, 8, 725, 724, 721, 50, 46, 720, 112,
}
var yyR1 = [...]int{

	0, 143, 144, 144, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 15, 15, 15, 15,
	18, 137, 139, 124, 124, 123, 123, 125, 125, 138,
	138, 138, 134, 112, 112, 112, 115, 115, 113, 113,
	113, 113, 113, 113, 113, 114, 114, 114, 114, 114,
	116, 116, 116, 116, 116, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 133,
	133, 118, 118, 128, 128, 129, 129, 129, 126, 126,
	127, 127, 130, 130, 130, 119, 119, 119, 119, 119,
	131, 131, 121, 121, 121, 122, 122, 132, 132, 132,
	132, 132, 120, 120, 135, 140, 140, 140, 140, 136,
	136, 142, 142, 141, 16, 16, 16, 16, 16, 16,
	16, 16, 17, 17, 17, 1, 19, 2, 3, 4,
	5, 5, 5, 5, 111, 111, 111, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 32, 32, 21, 22,
	22, 22, 22, 147, 23, 24, 24, 25, 25, 25,
	29, 29, 29, 27, 27, 28, 28, 35, 35, 34,
	34, 36, 36, 36, 36, 101, 101, 101, 100, 100,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 48,
	42, 42, 42, 42, 106, 106, 105, 105, 105, 104,
	104, 43, 43, 43, 43, 44, 44, 44, 44, 45,
	45, 47, 47, 46, 46, 49, 49, 49, 49, 50,
	50, 51, 51, 37, 37, 37, 37, 37, 37, 37,
	90, 90, 53, 53, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 63, 63, 63, 63, 63, 63,
	54, 54, 54, 54, 54, 54, 54, 33, 33, 64,
	64, 64, 70, 65, 65, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 61, 61, 61, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 60, 60, 60,
	60, 60, 60, 60, 60, 148, 148, 62, 62, 62,
	62, 30, 30, 30, 30, 30, 109, 109, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 74, 74, 31, 31, 72, 72, 73, 75, 75,
	71, 71, 71, 56, 56, 56, 56, 56, 56, 56,
	58, 58, 58, 76, 76, 77, 77, 78, 78, 79,
	79, 80, 81, 81, 81, 82, 82, 82, 82, 83,
	83, 83, 55, 55, 55, 55, 55, 55, 84, 84,
	84, 84, 85, 85, 66, 66, 68, 68, 67, 69,
	86, 86, 87, 88, 88, 91, 91, 92, 92, 89,
	89, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 94, 94, 94, 95, 95, 98, 98, 99, 99,
	102, 102, 103, 103, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 145, 146, 107, 108, 108,
	108,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 2, 2, 9, 4, 6,
	4, 4, 3, 0, 3, 0, 4, 0, 3, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 4, 5, 4, 3, 3, 2, 2, 3,
	2, 3, 2, 2, 1, 1, 1, 3, 5, 5,
	5, 5, 3, 3, 6, 3, 0, 3, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -143, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 107, 108,
	109, 131, 111, 124, 47, 209, 126, 215, 218, 219,
	222, 221, 24, 125, 129, 130, -145, 7, 193, 50,
	-144, 223, -78, 14, -25, 5, -23, -147, -23, -23,
	-23, -107, -137, 50, 185, 115, 114, -89, 118, 114,
	115, 185, 114, 114, -111, 173, 183, 107, 177, 178,
	180, 182, 53, -96, -97, 67, 21, 23, 167, 70,
	102, 15, 71, 152, 155, 101, 194, 45, 186, 187,
	184, 185, 172, 28, 9, 24, 125, 20, 95, 109,
	74, 75, 210, 128, 22, 126, 65, 18, 48, 10,
	12, 13, 119, 118, 86, 115, 43, 7, 103, 25,
	83, 39, 27, 41, 84, 16, 188, 189, 30, 198,
	97, 46, 33, 68, 63, 49, 66, 14, 44, 213,
	212, 85, 110, 193, 42, 6, 197, 29, 124, 40,
	114, 73, 117, 64, 214, 5, 120, 8, 47, 121,
	190, 191, 192, 31, 211, 72, 11, 199, 138, 132,
	160, 151, 149, 62, 127, 147, 143, 141, 26, 165,
	217, 204, 142, 136, 137, 164, 201, 32, 163, 159,
	162, 135, 158, 36, 154, 144, 17, 130, 122, 203,
	140, 129, 35, 169, 134, 156, 145, 146, 161, 133,
	157, 131, 170, 205, 153, 150, 116, 174, 175, 176,
	202, 148, 171, -102, 53, -97, -107, -107, 56, -107,
	220, -107, -107, -107, -107, -107, -107, -7, -82, 16,
	15, -10, -8, -145, 6, 19, 20, -29, 37, 38,
	-24, -89, -46, -102, 10, 206, -138, -134, 53, -92,
	119, 53, -92, 114, -91, 119, 53, -91, -46, -46,
	-107, 10, 10, 114, 185, -107, -107, 179, -107, -107,
	-107, -146, 52, -83, 18, 30, -37, -52, 68, -57,
	28, 22, -56, -53, -71, -69, -70, 102, 91, 92,
	99, 69, 103, -61, -59, -60, -62, 55, 54, 56,
	57, 58, 59, 63, 64, 65, -98, -102, -67, -145,
	41, 42, 194, 195, 198, 196, 71, 31, 184, 192,
	191, 190, 188, 189, 186, 187, 119, 185, 97, 193,
	53, -97, -79, -80, -37, -78, -7, -23, 33, -27,
	20, 61, -47, 25, -46, 29, 104, -46, 15, 52,
	51, -112, -115, -117, -116, -113, -114, 149, 150, 102,
	153, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 127, 145, 146, 147, 148, 132, 133, 134, 135,
	136, 137, 138, 140, 141, 142, 143, 144, -102, 68,
	49, -46, -46, -46, 22, 49, -102, -46, -46, -46,
	-46, -32, 10, 8, 86, 67, 66, 83, 51, 17,
	-37, -54, 86, 68, 84, 85, 70, 88, 87, 98,
	91, 92, 93, 94, 95, 96, 97, 89, 90, 101,
	76, 77, 78, 79, 80, 81, 82, -90, -145, -70,
	-145, 105, 106, -57, -57, -57, -57, -57, -57, -145,
	104, -7, -65, -37, -145, -145, -145, -145, -145, -145,
	-145, -74, -37, -145, -148, -145, -148, -148, -148, -148,
	-148, -148, -148, -145, -145, -145, -145, 51, -81, 23,
	24, -82, -146, -29, -58, -98, 56, 59, 53, -97,
	-28, 40, -55, 29, 31, -7, -145, -46, -86, -87,
	-71, -98, -102, -103, -102, -96, 107, 173, 183, -51,
	11, 208, -139, -124, 217, -134, -135, -140, 122, 120,
	-136, 115, 27, -130, 63, 68, -126, 170, -118, 50,
	-118, -118, -118, -118, -121, 152, -121, -121, -121, 50,
	-118, -118, -118, -128, 50, -128, -128, -129, 50, -129,
	22, -46, -93, 110, 217, 194, 112, 109, 113, 108,
	167, 152, 62, 28, 14, 205, 53, -46, -107, -107,
	-107, -107, -82, 181, 35, -37, -37, -63, 63, 68,
	64, 65, -37, -37, -57, -64, -67, -70, 60, 86,
	84, 85, 70, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -109, 53,
	55, 53, -56, -56, -98, -35, 20, -34, -36, 93,
	-37, -102, -99, -103, -98, -96, -146, 51, -146, -7,
	-34, -34, -37, -37, -34, -27, -72, -73, 72, -98,
	-146, -34, -35, -34, -34, -80, -83, -88, 18, 10,
	31, 31, -34, -85, 49, -86, -66, -68, -67, -145,
	-7, -84, -98, -51, 51, 76, 104, -78, -37, -145,
	-125, 167, 76, 50, 27, -136, 53, 53, -119, 28,
	63, -127, 171, 56, -121, -121, -122, 101, 29, -122,
	-122, -122, -133, 55, 56, 56, -108, -145, -99, -96,
	-107, -94, -95, 117, 21, 115, 27, 76, 117, 123,
	123, 123, -107, 55, 36, 63, 64, 65, -64, -57,
	-57, -57, -33, 128, 67, -146, -146, -34, 51, -101,
	-100, 21, -98, 55, 104, -145, 104, -37, -146, -146,
	-146, 51, 121, 21, -146, -34, -75, -73, 74, -37,
	-146, -146, -146, -146, -146, -46, -38, 10, 26, -85,
	51, -146, -146, -146, 51, 104, -78, -87, -37, -99,
	-82, 53, -123, 28, 76, 53, -142, -141, -98, 53,
	-131, 167, 55, 56, 57, 63, 52, -122, -122, 53,
	53, 102, 52, 51, 51, 52, 51, -46, -107, 53,
	152, -137, 53, -134, -33, 67, -57, -57, -146, -36,
	-100, 93, -103, -35, -99, -110, 102, 149, 127, 147,
	143, 164, 154, 169, 145, 170, -109, -110, 199, -78,
	75, -37, 73, -51, -39, -40, -41, -42, -48, -70,
	-145, -46, 27, -68, 31, -7, -145, -98, -98, -82,
	-146, 155, 56, 52, 51, -118, -132, 122, 27, 120,
	55, 56, 56, 29, -57, 104, -146, -146, -118, -118,
	-118, -129, -118, 137, -118, 137, -146, -146, -145, -31,
	197, -37, -76, 12, 51, -43, -44, -45, 39, 43,
	45, 40, 41, 42, 46, -106, 21, -39, -145, -105,
	-104, 21, -102, 55, 8, -66, -7, 104, -108, 76,
	-141, -120, 62, 27, 27, 52, 52, 53, 93, -121,
	53, -57, -146, 55, -77, 13, 15, -40, -41, -40,
	-41, 39, 39, 39, 44, 39, 44, 39, -44, -102,
	-146, -49, 47, 118, 48, -104, -86, -146, -98, 53,
	55, -30, 86, 202, -37, -65, 49, 49, 39, 39,
	115, 115, 115, -146, 200, 46, 203, -37, -37, -145,
	-145, -145, 36, 201, 204, -50, -98, -50, -50, 36,
	-146, 51, -146, -146, 202, -98, 203, 204,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	387, 0, 173, 173, 173, 173, 607, 0, 0, 429,
	0, 0, 0, 0, 0, 607, 607, 0, 607, 0,
	607, 607, 607, 607, 607, 607, 0, 31, 32, 605,
	1, 3, 395, 0, 0, 177, 180, 175, 429, 0,
	0, 35, 36, 0, 427, 0, 427, 0, 430, 425,
	0, 425, 0, 0, 607, 531, 532, 466, 607, 607,
	0, 607, 154, 155, 156, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 168, 450, 451, 147, 148, 607, 150,
	607, 152, 153, 169, 170, 171, 172, 25, 399, 0,
	0, 387, 27, 0, 173, 178, 179, 183, 181, 182,
	174, 0, 0, 233, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 146,
	157, 0, 0, 0, 0, 162, 163, 166, 165, 149,
	151, 26, 606, 21, 0, 0, 396, 243, 0, 248,
	250, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 311, 312, 313, 314, 373, 374, 375,
	376, 377, 378, 379, 252, 253, 370, 0, 419, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 335, 335,
	335, 335, 335, 335, 335, 335, 0, 0, 0, 0,
	-2, -2, 388, 389, 392, 395, 25, 180, 0, 185,
	184, 176, 0, 0, 232, 0, 0, 241, 0, 43,
	0, 102, 98, 54, 55, 91, 57, 91, 91, 91,
	91, 112, 112, 112, 112, 83, 84, 85, 86, 87,
	0, 70, 91, 91, 91, 74, 58, 59, 60, 61,
	62, 63, 64, 93, 93, 93, 95, 95, 38, 0,
	0, 40, 0, 142, 426, 0, 144, 607, 607, 607,
	607, 395, 0, 400, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 271, 272, 273, 274, 275, 276, 249, 0, 263,
	0, 0, 0, 305, 306, 307, 308, 309, 0, 187,
	0, 25, 0, 283, 0, 0, 0, 0, 0, 0,
	183, 0, 362, 0, 327, 0, 328, 329, 330, 331,
	332, 333, 334, 0, 187, 0, 0, 0, 391, 393,
	394, 399, 28, 183, 0, 380, 0, 0, 446, 447,
	0, 186, 412, 0, 0, -2, 0, 231, 241, 420,
	0, 370, 0, 234, 452, 453, 466, 531, 532, 387,
	0, 0, 41, 47, 0, 50, 51, 0, 0, 0,
	0, 129, 130, 105, 103, 0, 100, 99, 56, 0,
	112, 112, 77, 78, 115, 0, 115, 115, 115, 0,
	71, 72, 73, 65, 0, 66, 67, 68, 0, 69,
	428, 608, 607, 441, 0, 438, 0, 436, 0, 431,
	432, 433, 434, 435, 437, 439, 440, 143, 158, 159,
	160, 161, 607, 0, 0, 244, 245, 247, 264, 0,
	266, 268, 397, 398, 254, 255, 279, 280, 281, 0,
	0, 0, 0, 277, 259, 0, 290, 291, 292, 293,
	294, 295, 296, 297, 298, 299, 300, 301, 304, 346,
	347, 0, 302, 303, 310, 0, 0, 188, 189, 191,
	195, 0, 371, 0, 448, -2, 282, 0, 418, 25,
	0, 0, 0, 0, 0, 0, 368, 365, 0, 0,
	336, 0, 0, 0, 0, 390, 22, 0, 423, 424,
	381, 382, 200, 29, 0, 412, 402, 414, 416, 0,
	25, 0, 408, 387, 0, 0, 0, 395, 242, 0,
	45, 0, 0, 0, 125, 0, 127, 128, 110, 0,
	104, 53, 101, 0, 115, 115, 79, 0, 0, 80,
	81, 82, 0, 89, 0, 0, 39, 609, 610, 449,
	134, 0, 607, 442, 443, 444, 445, 0, 0, 0,
	0, 0, 164, 167, 401, 265, 267, 269, 256, 277,
	260, 0, 257, 0, 0, 251, 315, 0, 0, 192,
	196, 0, 198, 199, 0, 187, 0, 284, -2, 318,
	319, 0, 0, 0, 0, 387, 0, 366, 0, 0,
	326, 337, 338, 339, 340, 23, 241, 0, 0, 30,
	0, 417, -2, 0, 0, 0, 395, 421, 422, 371,
	34, 0, 42, 0, 0, 44, 0, 131, 91, 126,
	117, 111, 106, 107, 108, 109, 92, 75, 76, 116,
	113, 114, 88, 0, 0, 96, 0, 135, 136, 137,
	0, 139, 140, 141, 258, 0, 278, 261, 316, 190,
	197, 193, 0, 0, 372, 0, 91, 91, 351, 91,
	95, 354, 91, 356, 91, 359, 0, 0, 0, 363,
	325, 369, 0, 383, 201, 202, 204, 205, 206, 214,
	0, 216, 0, 415, 0, -2, 0, 410, 409, 33,
	608, 0, 48, 124, 0, 133, 122, 0, 119, 121,
	90, 0, 0, 0, 262, 0, 317, 320, 348, 112,
	352, 353, 355, 357, 358, 360, 322, 321, 0, 0,
	0, 367, 385, 0, 0, 0, 0, 0, 221, 0,
	0, 224, 0, 0, 0, 0, 215, 0, 0, 235,
	217, 0, 219, 220, 0, 405, 25, 0, 37, 0,
	132, 52, 0, 118, 120, 94, 97, 138, 194, 349,
	350, 341, 324, 364, 24, 0, 0, 203, 210, 0,
	213, 222, 223, 225, 0, 227, 0, 229, 230, 207,
	208, 209, 0, 0, 0, 218, 413, -2, 411, 46,
	123, 0, 0, 0, 386, 384, 0, 0, 226, 228,
	0, 0, 0, 323, 0, 0, 0, 211, 212, 0,
	0, 0, 342, 0, 345, 0, 239, 0, 0, 343,
	236, 0, 237, 238, 0, 240, 0, 344,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 223,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:266
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:271
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:272
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:276
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:298
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:306
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:317
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:327
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:344
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:355
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:367
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:377
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Set{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:395
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:401
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:408
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:416
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:423
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:434
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:441
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:447
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:451
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:456
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:465
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:469
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:475
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:484
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:490
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:668
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:673
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:677
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:682
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:686
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:698
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:704
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:716
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:731
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:765
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:774
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:787
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:791
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:796
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:804
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:808
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:817
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:827
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:837
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:865
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:871
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:877
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:881
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:886
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:891
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:895
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:899
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:903
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:907
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:914
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:922
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:927
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:943
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.statement = &Xa{}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:955
		{
			yyVAL.statement = &Explain{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:961
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:967
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:971
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:985
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:998
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.statement = &OtherRead{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1074
		{
			setAllowComments(yylex, true)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.bytes2 = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.str = UnionStr
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.str = UnionAllStr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.str = UnionDistinctStr
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = SQLCacheStr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.str = DistinctStr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = StraightJoinHint
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.selectExprs = nil
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.empty = struct{}{}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.empty = struct{}{}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.str = JoinStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.str = JoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.str = JoinStr
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.str = StraightJoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.str = LeftJoinStr
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.str = LeftJoinStr
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = RightJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = RightJoinStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = NaturalJoinStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1329
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.indexHints = nil
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.expr = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.str = IsNullStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.str = IsNotNullStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = IsTrueStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = IsNotTrueStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = IsFalseStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = IsNotFalseStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.str = EqualStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.str = LessThanStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.str = GreaterThanStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.str = LessEqualStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = GreaterEqualStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = NotEqualStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.expr = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = BooleanModeStr
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 344:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.str = QueryExpansionStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.str = string("")
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = nil
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &NullVal{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2013
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.exprs = nil
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.orderBy = nil
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.str = AscScr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.str = AscScr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.str = DescScr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.limit = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.str = ForUpdateStr
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.str = ShareModeStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2133
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2146
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.updateExprs = nil
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.byt = 0
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.byt = 1
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.byt = 0
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.byt = 1
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.str = IgnoreStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2500
		{
			decNesting(yylex)
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2505
		{
			forceEOF(yylex)
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2510
		{
			forceEOF(yylex)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2514
		{
			forceEOF(yylex)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
