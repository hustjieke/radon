//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
	optimizeOptionEnum    OptimizeOptionEnum
	checkOptionEnum       CheckOptionEnum
	checkOptionList       CheckOptionList
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHANGED = 57389
const CHECK = 57390
const CHECKSUM = 57391
const FAST = 57392
const MEDIUM = 57393
const UPGRADE = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const JOIN = 57403
const STRAIGHT_JOIN = 57404
const LEFT = 57405
const RIGHT = 57406
const INNER = 57407
const OUTER = 57408
const CROSS = 57409
const NATURAL = 57410
const USE = 57411
const FORCE = 57412
const ON = 57413
const ID = 57414
const HEX = 57415
const STRING = 57416
const INTEGRAL = 57417
const FLOAT = 57418
const HEXNUM = 57419
const VALUE_ARG = 57420
const LIST_ARG = 57421
const COMMENT = 57422
const COMMENT_KEYWORD = 57423
const NULL = 57424
const TRUE = 57425
const FALSE = 57426
const OFF = 57427
const OR = 57428
const AND = 57429
const NOT = 57430
const BETWEEN = 57431
const CASE = 57432
const WHEN = 57433
const THEN = 57434
const ELSE = 57435
const END = 57436
const LE = 57437
const GE = 57438
const NE = 57439
const NULL_SAFE_EQUAL = 57440
const IS = 57441
const LIKE = 57442
const REGEXP = 57443
const IN = 57444
const SHIFT_LEFT = 57445
const SHIFT_RIGHT = 57446
const DIV = 57447
const MOD = 57448
const UNARY = 57449
const COLLATE = 57450
const BINARY = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const MODIFY = 57461
const COLUMN = 57462
const IF = 57463
const IGNORE = 57464
const INDEX = 57465
const PRIMARY = 57466
const QUICK = 57467
const TABLE = 57468
const TO = 57469
const VIEW = 57470
const USING = 57471
const DESC = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const SHOW = 57475
const DATE = 57476
const ESCAPE = 57477
const HELP = 57478
const REPAIR = 57479
const TRUNCATE = 57480
const OPTIMIZE = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const BOOL = 57501
const CHARACTER = 57502
const VARBINARY = 57503
const NCHAR = 57504
const CHARSET = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const FIXED = 57530
const DYNAMIC = 57531
const STORAGE = 57532
const DISK = 57533
const MEMORY = 57534
const COLUMN_FORMAT = 57535
const AVG_ROW_LENGTH = 57536
const COMPRESSION = 57537
const CONNECTION = 57538
const DATA = 57539
const DIRECTORY = 57540
const DELAY_KEY_WRITE = 57541
const ENCRYPTION = 57542
const INSERT_METHOD = 57543
const MAX_ROWS = 57544
const MIN_ROWS = 57545
const PACK_KEYS = 57546
const PASSWORD = 57547
const ROW_FORMAT = 57548
const STATS_AUTO_RECALC = 57549
const STATS_PERSISTENT = 57550
const STATS_SAMPLE_PAGES = 57551
const TABLESPACE = 57552
const DELAYED = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const COMPRESSED = 57556
const REDUNDANT = 57557
const COMPACT = 57558
const TOKUDB_DEFAULT = 57559
const TOKUDB_FAST = 57560
const TOKUDB_SMALL = 57561
const TOKUDB_ZLIB = 57562
const TOKUDB_QUICKLZ = 57563
const TOKUDB_LZMA = 57564
const TOKUDB_SNAPPY = 57565
const TOKUDB_UNCOMPRESSED = 57566
const COLLATION = 57567
const DATABASES = 57568
const TABLES = 57569
const WARNINGS = 57570
const VARIABLES = 57571
const EVENTS = 57572
const BINLOG = 57573
const GTID = 57574
const STATUS = 57575
const COLUMNS = 57576
const FIELDS = 57577
const CURRENT_TIMESTAMP = 57578
const CURRENT_DATE = 57579
const DATABASE = 57580
const SCHEMA = 57581
const CURRENT_TIME = 57582
const LOCALTIME = 57583
const LOCALTIMESTAMP = 57584
const UTC_DATE = 57585
const UTC_TIME = 57586
const UTC_TIMESTAMP = 57587
const REPLACE = 57588
const CONVERT = 57589
const CAST = 57590
const GROUP_CONCAT = 57591
const SEPARATOR = 57592
const MATCH = 57593
const AGAINST = 57594
const BOOLEAN = 57595
const LANGUAGE = 57596
const WITH = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const FORMAT = 57601
const TREE = 57602
const TRADITIONAL = 57603
const EXTENDED = 57604
const PARTITION = 57605
const PARTITIONS = 57606
const LIST = 57607
const XA = 57608
const DISTRIBUTED = 57609
const ENGINES = 57610
const VERSIONS = 57611
const PROCESSLIST = 57612
const QUERYZ = 57613
const TXNZ = 57614
const KILL = 57615
const ENGINE = 57616
const SINGLE = 57617
const BEGIN = 57618
const START = 57619
const TRANSACTION = 57620
const COMMIT = 57621
const ROLLBACK = 57622
const GLOBAL = 57623
const LOCAL = 57624
const SESSION = 57625
const NAMES = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NO_WRITE_TO_BINLOG = 57636
const RADON = 57637
const ATTACH = 57638
const ATTACHLIST = 57639
const DETACH = 57640
const RESHARD = 57641
const CLEANUP = 57642
const RECOVER = 57643
const REBALANCE = 57644

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHANGED",
	"CHECK",
	"CHECKSUM",
	"FAST",
	"MEDIUM",
	"UPGRADE",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"VIEW",
	"USING",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NO_WRITE_TO_BINLOG",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5271

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 206,
	6, 376,
	7, 376,
	8, 376,
	9, 376,
	18, 376,
	72, 376,
	263, 376,
	-2, 934,
	-1, 394,
	99, 942,
	-2, 743,
	-1, 400,
	99, 793,
	-2, 721,
	-1, 421,
	1, 97,
	320, 97,
	-2, 107,
	-1, 461,
	5, 32,
	-2, 367,
	-1, 543,
	127, 773,
	-2, 769,
	-1, 544,
	127, 774,
	-2, 770,
	-1, 576,
	124, 107,
	174, 107,
	177, 107,
	180, 107,
	-2, 119,
	-1, 627,
	1, 97,
	320, 97,
	-2, 107,
	-1, 635,
	1, 98,
	320, 98,
	-2, 107,
	-1, 794,
	124, 107,
	174, 107,
	177, 107,
	180, 107,
	-2, 120,
	-1, 851,
	35, 327,
	72, 327,
	75, 327,
	140, 327,
	-2, 939,
	-1, 1008,
	127, 776,
	-2, 772,
	-1, 1182,
	5, 33,
	-2, 571,
	-1, 1205,
	5, 32,
	-2, 692,
	-1, 1428,
	5, 33,
	-2, 693,
	-1, 1481,
	5, 32,
	-2, 695,
	-1, 1544,
	5, 33,
	-2, 696,
}

const yyPrivate = 57344

const yyLast = 11828

var yyAct = [...]int{

	544, 521, 1564, 1055, 1487, 1144, 1346, 522, 56, 1523,
	668, 497, 1517, 1420, 1377, 519, 1347, 1337, 492, 1376,
	886, 411, 768, 1406, 1343, 1550, 1263, 1290, 1103, 773,
	900, 1080, 880, 1417, 1336, 1316, 364, 63, 1167, 1175,
	937, 999, 1145, 1002, 122, 1146, 122, 212, 410, 74,
	992, 1093, 1082, 461, 3, 769, 395, 969, 1202, 399,
	499, 459, 496, 1018, 56, 1118, 671, 855, 1007, 925,
	562, 637, 122, 369, 403, 795, 413, 561, 552, 649,
	546, 1083, 391, 495, 1034, 454, 424, 764, 373, 398,
	808, 636, 122, 560, 486, 568, 390, 422, 388, 84,
	67, 634, 117, 427, 480, 481, 211, 359, 62, 896,
	363, 1216, 1217, 650, 639, 95, 1048, 1001, 122, 1047,
	782, 783, 1049, 930, 1004, 1215, 479, 94, 738, 564,
	781, 69, 70, 71, 72, 73, 563, 353, 355, 354,
	356, 357, 563, 358, 564, 350, 952, 484, 1436, 833,
	792, 1488, 654, 1035, 663, 408, 947, 1586, 362, 407,
	1563, 1585, 29, 30, 32, 33, 639, 406, 1537, 1583,
	1562, 1536, 825, 405, 1329, 957, 1400, 90, 954, 955,
	432, 29, 30, 32, 33, 348, 1096, 1148, 446, 934,
	425, 1097, 1098, 431, 1525, 118, 430, 920, 383, 382,
	34, 86, 413, 658, 55, 42, 1066, 820, 1549, 1065,
	56, 56, 436, 1147, 1109, 440, 379, 378, 380, 438,
	439, 656, 1108, 457, 1113, 43, 919, 879, 60, 1499,
	694, 693, 703, 704, 696, 697, 698, 699, 700, 701,
	702, 695, 664, 665, 705, 347, 1286, 60, 1395, 1452,
	887, 1393, 1526, 1265, 29, 30, 32, 33, 922, 673,
	1132, 420, 92, 829, 1509, 466, 1551, 918, 1148, 1085,
	953, 924, 1508, 1507, 78, 1525, 1058, 849, 418, 417,
	416, 86, 79, 428, 88, 83, 36, 37, 38, 415,
	40, 1135, 433, 1513, 1147, 1134, 119, 1133, 717, 718,
	1474, 1476, 1272, 59, 58, 57, 41, 1431, 1385, 46,
	53, 39, 54, 1181, 915, 913, 909, 85, 912, 914,
	60, 929, 753, 823, 928, 1179, 929, 927, 1265, 928,
	1041, 726, 927, 1526, 824, 826, 827, 828, 468, 830,
	831, 832, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 887, 1273, 705, 789, 472, 474, 122, 657, 1568,
	917, 473, 473, 122, 831, 672, 29, 30, 32, 33,
	1475, 682, 681, 1535, 680, 638, 1084, 56, 460, 1110,
	1111, 441, 848, 916, 1106, 1107, 122, 683, 683, 685,
	1296, 403, 1500, 1185, 80, 1527, 1056, 403, 403, 81,
	82, 695, 976, 939, 705, 548, 398, 956, 791, 682,
	681, 681, 569, 569, 821, 424, 974, 975, 973, 31,
	122, 122, 1294, 549, 1131, 1040, 683, 683, 424, 754,
	659, 122, 60, 122, 122, 567, 469, 1331, 31, 44,
	1531, 122, 628, 682, 681, 684, 47, 911, 483, 48,
	49, 467, 51, 50, 1552, 1581, 1130, 1019, 921, 673,
	683, 682, 681, 1088, 482, 1019, 1186, 1192, 52, 122,
	554, 550, 1295, 565, 910, 1371, 1573, 555, 683, 1372,
	442, 556, 1299, 122, 698, 699, 700, 701, 702, 695,
	489, 547, 705, 572, 1489, 1089, 1090, 1091, 414, 938,
	1375, 714, 716, 1092, 517, 518, 81, 82, 962, 964,
	965, 31, 627, 1374, 963, 1237, 644, 1298, 1260, 719,
	720, 721, 722, 723, 724, 642, 653, 725, 662, 640,
	728, 729, 730, 731, 732, 733, 734, 660, 737, 739,
	739, 739, 739, 739, 739, 739, 739, 747, 748, 749,
	750, 651, 403, 1259, 1187, 715, 122, 122, 1236, 1235,
	403, 1129, 60, 682, 681, 672, 1258, 759, 677, 770,
	1333, 1232, 972, 771, 1256, 398, 727, 1227, 413, 419,
	683, 1104, 790, 1105, 1570, 755, 694, 693, 703, 704,
	696, 697, 698, 699, 700, 701, 702, 695, 669, 1226,
	705, 1257, 1160, 1161, 1162, 682, 681, 1225, 1239, 1255,
	1122, 888, 889, 890, 1121, 993, 686, 994, 882, 883,
	884, 885, 683, 31, 1114, 946, 843, 470, 1168, 1556,
	1455, 1373, 1362, 1361, 893, 894, 895, 1240, 1233, 757,
	1229, 122, 122, 1238, 767, 1228, 1221, 669, 822, 1151,
	1150, 122, 122, 1119, 736, 122, 776, 902, 775, 845,
	784, 740, 741, 742, 743, 744, 745, 746, 1101, 1582,
	1574, 1096, 122, 1577, 485, 1292, 1097, 1098, 1445, 1554,
	1445, 1519, 933, 485, 511, 510, 512, 513, 514, 515,
	970, 1516, 787, 516, 1514, 485, 1443, 756, 696, 697,
	698, 699, 700, 701, 702, 695, 968, 1291, 705, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 56, 403, 931, 923, 926, 903,
	1445, 1491, 942, 898, 899, 1449, 728, 1081, 403, 1288,
	998, 1285, 398, 1148, 1445, 1490, 1442, 1241, 1234, 971,
	1525, 1404, 485, 1020, 694, 693, 703, 704, 696, 697,
	698, 699, 700, 701, 702, 695, 122, 29, 705, 1147,
	727, 1445, 485, 1432, 485, 1430, 485, 403, 1173, 485,
	1279, 1278, 1010, 1006, 1275, 1276, 1008, 1275, 1274, 1441,
	1023, 413, 398, 1050, 995, 948, 485, 1271, 1038, 1052,
	1053, 996, 997, 631, 630, 1209, 959, 960, 1526, 966,
	967, 1042, 1051, 1016, 1204, 629, 949, 29, 577, 576,
	1344, 426, 1039, 64, 29, 1057, 1201, 1060, 1061, 1062,
	1063, 1064, 1026, 60, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1011, 1012, 1044,
	1027, 1015, 1037, 669, 774, 1203, 1013, 1014, 1045, 565,
	1039, 1143, 1426, 948, 1204, 1022, 822, 1024, 1025, 1142,
	1054, 1480, 1404, 1277, 1173, 1009, 547, 654, 780, 778,
	1033, 29, 1173, 60, 763, 751, 559, 1021, 1503, 1173,
	60, 60, 1059, 1493, 1408, 1411, 1412, 1413, 1409, 1043,
	1410, 1414, 881, 1115, 1116, 370, 122, 122, 122, 1243,
	1242, 872, 871, 654, 1439, 1344, 1039, 901, 1368, 1363,
	868, 75, 1087, 1269, 897, 892, 891, 907, 1136, 1137,
	906, 1094, 905, 641, 1140, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 27, 60, 874, 1506,
	1408, 1411, 1412, 1413, 1409, 56, 1410, 1414, 1120, 1317,
	1504, 873, 866, 1505, 1467, 1465, 1464, 1463, 867, 1468,
	1466, 60, 1154, 374, 375, 970, 1127, 1469, 1575, 1412,
	1413, 1561, 1159, 958, 93, 1319, 1547, 1032, 1031, 553,
	1158, 1148, 487, 1164, 1165, 1166, 1147, 1381, 1139, 1138,
	1117, 875, 1321, 573, 1325, 403, 1320, 551, 1318, 1155,
	557, 1424, 368, 1323, 1180, 904, 643, 1147, 870, 488,
	1177, 1153, 76, 1322, 1416, 371, 372, 553, 1478, 122,
	1267, 1163, 1100, 1099, 971, 1086, 1324, 1326, 1571, 361,
	1366, 1560, 1206, 1207, 1365, 1206, 1148, 365, 1559, 1458,
	1367, 770, 1558, 413, 413, 771, 575, 398, 1030, 574,
	366, 89, 1223, 1224, 1152, 64, 1029, 1457, 1403, 1230,
	1231, 774, 646, 1156, 1219, 1220, 1210, 869, 385, 1214,
	1262, 1191, 1510, 1102, 877, 679, 1222, 876, 1205, 66,
	68, 1205, 465, 7, 61, 1211, 1208, 1, 1213, 462,
	6, 1008, 464, 5, 463, 4, 1264, 404, 1486, 635,
	854, 853, 1557, 77, 1266, 1548, 1522, 1524, 1172, 1529,
	1497, 1494, 1496, 794, 793, 409, 844, 860, 122, 859,
	858, 1280, 1281, 1282, 1189, 856, 413, 1112, 1268, 878,
	1293, 208, 1297, 1170, 1193, 865, 864, 1171, 788, 819,
	818, 1302, 1303, 817, 1270, 816, 815, 814, 1182, 1183,
	1184, 813, 812, 1188, 811, 1212, 810, 809, 1194, 807,
	1195, 1196, 1197, 1198, 520, 806, 805, 403, 804, 803,
	802, 801, 403, 1287, 1289, 800, 796, 1307, 1308, 1301,
	799, 1300, 1177, 798, 1304, 398, 1435, 398, 797, 1218,
	863, 861, 122, 1305, 857, 582, 1348, 413, 413, 1341,
	580, 581, 1349, 579, 56, 770, 1311, 1310, 120, 771,
	204, 770, 1314, 1328, 584, 771, 1345, 1330, 1352, 1354,
	1334, 583, 1355, 578, 1415, 1335, 1006, 1327, 1315, 1008,
	421, 1342, 1419, 1174, 91, 1141, 204, 1356, 1313, 346,
	1128, 908, 1359, 1360, 45, 87, 713, 1028, 1095, 396,
	1350, 1046, 1340, 779, 777, 387, 204, 693, 703, 704,
	696, 697, 698, 699, 700, 701, 702, 695, 386, 1353,
	705, 403, 403, 403, 1351, 752, 545, 201, 1456, 1402,
	1190, 735, 204, 1264, 1369, 1017, 1378, 1378, 1378, 498,
	1370, 1379, 1380, 703, 704, 696, 697, 698, 699, 700,
	701, 702, 695, 384, 961, 705, 509, 1332, 506, 508,
	1309, 507, 758, 687, 490, 1384, 1473, 1339, 678, 951,
	1382, 1383, 655, 429, 202, 456, 101, 1398, 100, 437,
	1407, 1405, 122, 122, 1338, 1200, 645, 1399, 1498, 1418,
	1388, 1389, 1391, 1390, 762, 381, 1392, 377, 1394, 455,
	862, 65, 376, 26, 403, 1434, 25, 1357, 1358, 403,
	1425, 15, 24, 16, 14, 13, 35, 11, 10, 1378,
	9, 8, 367, 1437, 1378, 28, 403, 2, 1438, 22,
	23, 21, 20, 19, 18, 727, 1264, 1440, 17, 12,
	846, 398, 1340, 847, 1364, 122, 122, 122, 122, 0,
	1451, 1446, 1341, 1341, 1341, 1341, 122, 1453, 0, 122,
	0, 0, 122, 1460, 0, 1462, 1418, 0, 1348, 0,
	0, 413, 403, 413, 1349, 1477, 0, 1482, 1470, 1459,
	403, 1461, 1315, 1479, 0, 0, 403, 1484, 0, 0,
	0, 0, 1483, 0, 1485, 1378, 0, 0, 1401, 1492,
	1495, 1378, 1386, 0, 1387, 1340, 1340, 1340, 1340, 1502,
	0, 0, 1010, 0, 669, 1396, 1397, 0, 0, 1340,
	0, 0, 1348, 1481, 0, 0, 0, 1511, 1349, 0,
	56, 0, 0, 0, 403, 0, 0, 1427, 1428, 1429,
	1521, 1433, 1528, 1532, 1518, 0, 1530, 1533, 0, 1378,
	0, 0, 0, 1520, 413, 1540, 1541, 1542, 0, 1546,
	0, 0, 770, 0, 1444, 0, 771, 1447, 1448, 1555,
	0, 204, 1553, 1543, 0, 1545, 1512, 204, 0, 0,
	0, 403, 403, 403, 1566, 1567, 0, 1454, 0, 0,
	0, 0, 0, 1569, 0, 0, 1565, 1565, 1565, 0,
	204, 0, 0, 0, 0, 1472, 0, 1572, 0, 0,
	1580, 0, 0, 0, 0, 0, 473, 0, 403, 0,
	0, 0, 1501, 669, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 1584, 204, 204, 0, 0, 476, 0,
	0, 0, 0, 0, 455, 204, 0, 204, 648, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 599, 558, 1538, 1539,
	0, 0, 0, 0, 1515, 0, 349, 0, 351, 352,
	0, 360, 0, 661, 0, 0, 1534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1544, 632, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 455, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 434, 435, 0, 0,
	443, 444, 445, 0, 447, 448, 449, 450, 451, 452,
	453, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	0, 0, 1576, 0, 1578, 1579, 0, 0, 0, 0,
	0, 0, 0, 0, 455, 0, 0, 0, 0, 0,
	204, 204, 772, 600, 0, 0, 0, 0, 0, 613,
	616, 617, 618, 619, 620, 621, 0, 622, 623, 624,
	625, 626, 601, 602, 603, 604, 585, 586, 614, 0,
	588, 1306, 0, 589, 590, 591, 592, 593, 594, 595,
	596, 597, 598, 605, 606, 607, 608, 609, 610, 611,
	612, 694, 693, 703, 704, 696, 697, 698, 699, 700,
	701, 702, 695, 0, 0, 705, 0, 766, 766, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 204, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 124, 0, 0, 0, 150, 204, 154, 157, 158,
	0, 0, 615, 0, 0, 0, 0, 0, 0, 0,
	1176, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 178,
	163, 0, 455, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 944, 402, 0, 1178,
	1005, 661, 0, 0, 1005, 1005, 130, 0, 1005, 0,
	0, 682, 681, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 1005, 1005, 1005, 1005, 0, 0, 683, 0,
	0, 0, 0, 0, 116, 0, 115, 1005, 471, 0,
	204, 0, 0, 475, 0, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 112, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 192, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 1036, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 97,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 114,
	0, 0, 105, 0, 0, 0, 0, 0, 666, 0,
	667, 0, 670, 0, 0, 0, 0, 674, 675, 676,
	0, 0, 182, 0, 146, 0, 0, 0, 0, 0,
	204, 204, 204, 0, 0, 0, 0, 0, 0, 111,
	0, 123, 128, 159, 0, 175, 144, 190, 149, 188,
	187, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 180, 0, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 196, 195, 197, 129,
	198, 199, 0, 0, 0, 0, 0, 1123, 1124, 1125,
	0, 110, 98, 0, 109, 107, 0, 96, 0, 104,
	689, 0, 692, 0, 0, 0, 0, 0, 706, 707,
	708, 709, 710, 711, 712, 1005, 690, 691, 688, 694,
	693, 703, 704, 696, 697, 698, 699, 700, 701, 702,
	695, 1005, 0, 705, 99, 108, 102, 103, 106, 1169,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 661, 0, 0, 694,
	693, 703, 704, 696, 697, 698, 699, 700, 701, 702,
	695, 0, 0, 705, 0, 935, 936, 0, 0, 0,
	0, 943, 0, 945, 0, 0, 0, 0, 0, 170,
	0, 124, 0, 0, 852, 851, 0, 154, 157, 158,
	0, 0, 0, 850, 0, 0, 0, 849, 0, 0,
	1199, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 178,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 0,
	0, 0, 0, 0, 661, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1283,
	0, 0, 848, 0, 0, 0, 204, 191, 772, 0,
	0, 0, 0, 134, 772, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 192, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 123, 128, 159, 0, 175, 144, 190, 149, 188,
	187, 145, 0, 0, 0, 0, 204, 1422, 0, 0,
	0, 1149, 0, 143, 180, 0, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 1157, 0,
	0, 0, 0, 0, 193, 194, 196, 195, 197, 129,
	198, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	204, 204, 204, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 204, 0, 0, 1422, 0, 328, 312,
	268, 331, 242, 258, 344, 260, 261, 299, 221, 278,
	170, 256, 124, 0, 222, 0, 150, 0, 154, 157,
	158, 0, 309, 0, 0, 0, 320, 329, 275, 0,
	245, 214, 252, 215, 272, 140, 241, 314, 281, 259,
	224, 228, 0, 255, 286, 332, 338, 160, 291, 0,
	178, 163, 0, 0, 274, 317, 276, 310, 267, 300,
	234, 290, 333, 257, 296, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 293, 326,
	254, 295, 298, 213, 292, 772, 217, 223, 343, 324,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 273,
	277, 306, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 289, 0, 0, 1284, 229, 219, 271,
	0, 0, 0, 233, 0, 247, 307, 0, 0, 0,
	0, 263, 264, 266, 303, 302, 318, 325, 191, 334,
	243, 244, 253, 315, 134, 251, 262, 176, 189, 297,
	126, 322, 316, 287, 269, 270, 218, 0, 305, 139,
	148, 240, 294, 185, 186, 135, 192, 225, 340, 127,
	401, 339, 169, 400, 184, 323, 288, 283, 220, 321,
	285, 282, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 216, 0, 179, 330, 345, 147, 141,
	183, 138, 164, 131, 125, 231, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 239, 319, 0, 0,
	0, 0, 0, 182, 230, 146, 237, 235, 238, 311,
	236, 279, 280, 335, 336, 337, 308, 232, 0, 0,
	313, 284, 123, 128, 159, 342, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 250, 341,
	304, 301, 327, 0, 143, 180, 0, 181, 389, 0,
	0, 394, 392, 393, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 328, 312, 268, 331, 242, 258, 344,
	260, 261, 299, 221, 278, 170, 256, 124, 0, 222,
	0, 150, 0, 154, 157, 158, 0, 309, 0, 0,
	0, 320, 329, 275, 0, 245, 214, 252, 215, 272,
	140, 241, 314, 281, 259, 224, 228, 0, 255, 286,
	332, 338, 160, 291, 0, 178, 163, 0, 0, 274,
	317, 276, 310, 267, 300, 234, 290, 333, 257, 296,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 293, 326, 254, 295, 298, 213, 292,
	0, 217, 223, 343, 324, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 273, 277, 306, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 289, 0,
	0, 0, 229, 219, 271, 0, 0, 0, 233, 0,
	247, 307, 0, 0, 0, 0, 263, 264, 266, 303,
	302, 318, 325, 191, 334, 243, 244, 253, 315, 134,
	251, 262, 176, 189, 297, 126, 322, 316, 287, 269,
	270, 218, 0, 305, 139, 148, 240, 294, 185, 186,
	135, 192, 225, 340, 127, 401, 339, 169, 400, 184,
	323, 288, 283, 220, 321, 285, 282, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 216, 0,
	179, 330, 345, 147, 141, 183, 138, 164, 131, 125,
	231, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 319, 0, 0, 0, 0, 0, 182, 230,
	146, 237, 235, 238, 311, 236, 279, 280, 335, 336,
	337, 308, 232, 0, 0, 313, 284, 123, 128, 159,
	342, 175, 144, 190, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 250, 341, 304, 301, 327, 0, 143,
	180, 0, 181, 0, 0, 0, 394, 392, 393, 397,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 196, 195, 197, 129, 198, 199, 328, 312,
	268, 331, 242, 258, 344, 260, 261, 299, 221, 278,
	170, 256, 124, 0, 222, 0, 150, 0, 154, 157,
	158, 0, 309, 0, 0, 0, 320, 329, 275, 0,
	245, 214, 252, 215, 272, 140, 241, 314, 281, 259,
	224, 228, 0, 255, 286, 332, 338, 160, 291, 0,
	178, 163, 0, 0, 274, 317, 276, 310, 267, 300,
	234, 290, 333, 257, 296, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 293, 326,
	254, 295, 298, 213, 292, 0, 217, 223, 343, 324,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 273,
	277, 306, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 289, 0, 0, 0, 229, 219, 271,
	0, 0, 0, 233, 0, 247, 307, 0, 0, 0,
	0, 263, 264, 266, 303, 302, 318, 325, 191, 334,
	243, 244, 253, 315, 134, 251, 262, 176, 189, 297,
	126, 322, 316, 287, 269, 270, 218, 0, 305, 139,
	148, 240, 294, 185, 186, 135, 192, 225, 340, 127,
	401, 339, 169, 400, 184, 323, 288, 283, 220, 321,
	285, 282, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 216, 0, 179, 330, 345, 147, 141,
	183, 138, 164, 131, 125, 231, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 239, 319, 0, 0,
	0, 0, 0, 182, 230, 146, 237, 235, 238, 311,
	236, 279, 280, 335, 336, 337, 308, 232, 0, 0,
	313, 284, 123, 128, 159, 342, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 250, 341,
	304, 301, 327, 0, 143, 180, 0, 181, 566, 0,
	0, 153, 0, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 328, 312, 268, 331, 242, 258, 344,
	260, 261, 299, 221, 278, 170, 256, 124, 0, 222,
	0, 150, 0, 154, 157, 158, 0, 309, 0, 0,
	0, 320, 329, 275, 0, 245, 214, 252, 215, 272,
	140, 241, 314, 281, 259, 224, 228, 0, 255, 286,
	332, 338, 160, 291, 0, 178, 163, 0, 0, 274,
	317, 276, 310, 267, 300, 234, 290, 333, 257, 296,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 293, 326, 254, 295, 298, 213, 292,
	0, 217, 223, 343, 324, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 273, 277, 306, 265, 0, 0,
	0, 0, 0, 0, 1450, 0, 246, 0, 289, 0,
	0, 0, 229, 219, 271, 0, 0, 0, 233, 0,
	247, 307, 0, 0, 0, 0, 263, 264, 266, 303,
	302, 318, 325, 191, 334, 243, 244, 253, 315, 134,
	251, 262, 176, 189, 297, 126, 322, 316, 287, 269,
	270, 218, 0, 305, 139, 148, 240, 294, 185, 186,
	135, 192, 225, 340, 127, 226, 339, 169, 227, 184,
	323, 288, 283, 220, 321, 285, 282, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 216, 0,
	179, 330, 345, 147, 141, 183, 138, 164, 131, 125,
	231, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 319, 0, 0, 0, 0, 0, 182, 230,
	146, 237, 235, 238, 311, 236, 279, 280, 335, 336,
	337, 308, 232, 0, 0, 313, 284, 123, 128, 159,
	342, 175, 144, 190, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 250, 341, 304, 301, 327, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 196, 195, 197, 129, 198, 199, 328, 312,
	268, 331, 242, 258, 344, 260, 261, 299, 221, 278,
	170, 256, 124, 0, 222, 0, 150, 0, 154, 157,
	158, 0, 309, 0, 0, 0, 320, 329, 275, 0,
	245, 214, 252, 215, 272, 140, 241, 314, 281, 259,
	224, 228, 0, 255, 286, 332, 338, 160, 291, 0,
	178, 163, 0, 0, 274, 317, 276, 310, 267, 300,
	234, 290, 333, 257, 296, 0, 0, 0, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 293, 326,
	254, 295, 298, 213, 292, 0, 217, 223, 343, 324,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 273,
	277, 306, 265, 0, 0, 0, 0, 0, 0, 1312,
	0, 246, 0, 289, 0, 0, 0, 229, 219, 271,
	0, 0, 0, 233, 0, 247, 307, 0, 0, 0,
	0, 263, 264, 266, 303, 302, 318, 325, 191, 334,
	243, 244, 253, 315, 134, 251, 262, 176, 189, 297,
	126, 322, 316, 287, 269, 270, 218, 0, 305, 139,
	148, 240, 294, 185, 186, 135, 192, 225, 340, 127,
	226, 339, 169, 227, 184, 323, 288, 283, 220, 321,
	285, 282, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 216, 0, 179, 330, 345, 147, 141,
	183, 138, 164, 131, 125, 231, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 239, 319, 0, 0,
	0, 0, 0, 182, 230, 146, 237, 235, 238, 311,
	236, 279, 280, 335, 336, 337, 308, 232, 0, 0,
	313, 284, 123, 128, 159, 342, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 250, 341,
	304, 301, 327, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 328, 312, 268, 331, 242, 258, 344,
	260, 261, 299, 221, 278, 170, 256, 124, 0, 222,
	0, 150, 0, 154, 157, 158, 0, 309, 0, 0,
	0, 320, 329, 275, 0, 245, 214, 252, 215, 272,
	140, 241, 314, 281, 259, 224, 228, 0, 255, 286,
	332, 338, 160, 291, 0, 178, 163, 0, 0, 274,
	317, 276, 310, 267, 300, 234, 290, 333, 257, 296,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 293, 326, 254, 295, 298, 213, 292,
	0, 217, 223, 343, 324, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 273, 277, 306, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 289, 0,
	0, 0, 229, 219, 271, 0, 0, 0, 233, 0,
	247, 307, 0, 0, 0, 0, 263, 264, 266, 303,
	302, 318, 325, 191, 334, 243, 244, 253, 315, 134,
	251, 262, 176, 189, 297, 126, 322, 316, 287, 269,
	270, 218, 0, 305, 139, 148, 240, 294, 185, 186,
	135, 192, 225, 340, 127, 401, 339, 169, 400, 184,
	323, 288, 283, 220, 321, 285, 282, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 216, 0,
	179, 330, 345, 147, 141, 183, 138, 164, 131, 125,
	231, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 319, 0, 0, 0, 0, 0, 182, 230,
	146, 237, 235, 238, 311, 236, 279, 280, 335, 336,
	337, 308, 232, 0, 0, 313, 284, 123, 128, 159,
	342, 175, 144, 190, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 250, 341, 304, 301, 327, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 0, 397,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 196, 195, 197, 129, 198, 199, 328, 312,
	268, 331, 242, 258, 344, 260, 261, 299, 221, 278,
	170, 256, 124, 0, 222, 0, 150, 0, 154, 157,
	158, 0, 309, 0, 0, 0, 320, 329, 275, 0,
	245, 214, 252, 215, 272, 140, 241, 314, 281, 259,
	224, 228, 0, 255, 286, 332, 338, 160, 291, 0,
	178, 163, 0, 0, 274, 317, 276, 310, 267, 300,
	234, 290, 333, 257, 296, 0, 0, 0, 209, 0,
	210, 0, 0, 0, 0, 0, 0, 130, 293, 326,
	254, 295, 298, 213, 292, 0, 217, 223, 343, 324,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 273,
	277, 306, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 289, 0, 0, 0, 229, 219, 271,
	0, 0, 0, 233, 0, 247, 307, 0, 0, 0,
	0, 263, 264, 266, 303, 302, 318, 325, 191, 334,
	243, 244, 253, 315, 134, 251, 262, 176, 189, 297,
	126, 322, 316, 287, 269, 270, 218, 0, 305, 139,
	148, 240, 294, 185, 186, 135, 192, 225, 340, 127,
	226, 339, 169, 227, 184, 323, 288, 283, 220, 321,
	285, 282, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 216, 0, 179, 330, 345, 147, 141,
	183, 138, 164, 131, 125, 231, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 239, 319, 0, 0,
	0, 0, 0, 182, 230, 146, 237, 235, 238, 311,
	236, 279, 280, 335, 336, 337, 308, 232, 0, 0,
	313, 284, 123, 128, 159, 342, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 250, 341,
	304, 301, 327, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 328, 312, 268, 331, 242, 258, 344,
	260, 261, 299, 221, 278, 170, 256, 124, 0, 222,
	0, 150, 0, 154, 157, 158, 0, 309, 0, 0,
	0, 320, 329, 275, 0, 245, 214, 252, 215, 272,
	140, 241, 314, 281, 259, 224, 228, 0, 255, 286,
	332, 338, 160, 291, 0, 178, 163, 0, 0, 274,
	317, 276, 310, 267, 300, 234, 290, 333, 257, 296,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 293, 326, 254, 295, 298, 213, 292,
	0, 217, 223, 343, 324, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 273, 277, 306, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 289, 0,
	0, 0, 229, 219, 271, 0, 0, 0, 233, 0,
	247, 307, 0, 0, 0, 0, 263, 264, 266, 303,
	302, 318, 325, 191, 334, 243, 244, 253, 315, 134,
	251, 262, 176, 189, 297, 126, 322, 316, 287, 269,
	270, 218, 0, 305, 139, 148, 240, 294, 185, 186,
	135, 192, 225, 340, 127, 226, 339, 169, 227, 184,
	323, 288, 283, 220, 321, 285, 282, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 216, 0,
	179, 330, 345, 147, 141, 183, 138, 164, 131, 125,
	231, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 319, 0, 0, 0, 0, 0, 182, 230,
	146, 237, 235, 238, 311, 236, 279, 280, 335, 336,
	337, 308, 232, 0, 0, 313, 284, 123, 128, 159,
	342, 175, 144, 190, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 250, 341, 304, 301, 327, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 196, 195, 197, 129, 198, 199, 328, 312,
	268, 331, 242, 258, 344, 260, 261, 299, 221, 278,
	170, 256, 124, 0, 222, 0, 150, 0, 154, 157,
	158, 0, 309, 0, 0, 0, 320, 329, 275, 0,
	245, 214, 252, 215, 272, 140, 241, 314, 281, 259,
	224, 228, 0, 255, 286, 332, 338, 160, 291, 0,
	178, 163, 0, 0, 274, 317, 276, 310, 267, 300,
	234, 290, 333, 257, 296, 0, 0, 0, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 293, 326,
	254, 295, 298, 213, 292, 0, 217, 223, 343, 324,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 273,
	277, 306, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 289, 0, 0, 0, 229, 219, 271,
	0, 0, 0, 233, 0, 247, 307, 0, 0, 0,
	0, 263, 264, 266, 303, 302, 318, 325, 191, 334,
	243, 244, 253, 315, 134, 251, 262, 176, 189, 297,
	126, 322, 316, 287, 269, 270, 218, 0, 305, 139,
	148, 240, 294, 185, 186, 135, 192, 225, 340, 127,
	226, 339, 169, 227, 184, 323, 288, 283, 220, 321,
	285, 282, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 216, 0, 179, 330, 345, 147, 141,
	183, 138, 164, 131, 125, 231, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 239, 319, 0, 0,
	0, 0, 0, 182, 230, 146, 237, 235, 238, 311,
	236, 279, 280, 335, 336, 337, 308, 232, 0, 0,
	313, 284, 123, 128, 159, 342, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 250, 341,
	304, 301, 327, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 328, 312, 268, 331, 242, 258, 344,
	260, 261, 299, 221, 278, 170, 256, 124, 0, 222,
	0, 150, 0, 154, 157, 158, 0, 309, 0, 0,
	0, 320, 329, 275, 0, 245, 214, 252, 215, 272,
	140, 241, 314, 281, 259, 224, 228, 0, 255, 286,
	332, 338, 160, 291, 0, 178, 163, 0, 0, 274,
	317, 276, 310, 267, 300, 234, 290, 333, 257, 296,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 293, 326, 254, 295, 298, 213, 292,
	0, 217, 223, 343, 324, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 273, 277, 306, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 289, 0,
	0, 0, 229, 219, 271, 0, 0, 0, 233, 0,
	247, 307, 0, 0, 0, 0, 263, 264, 266, 303,
	302, 318, 325, 191, 334, 243, 244, 253, 315, 134,
	251, 262, 176, 189, 297, 126, 322, 316, 287, 269,
	270, 218, 0, 305, 139, 148, 240, 294, 185, 186,
	135, 192, 225, 340, 127, 226, 339, 169, 227, 184,
	323, 288, 283, 220, 321, 285, 282, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 216, 0,
	179, 330, 345, 147, 141, 183, 138, 164, 131, 125,
	231, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 319, 0, 0, 0, 0, 0, 182, 230,
	146, 237, 235, 238, 311, 236, 279, 280, 335, 336,
	337, 308, 232, 0, 0, 313, 284, 123, 128, 159,
	342, 175, 144, 190, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 250, 341, 304, 301, 327, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	193, 194, 196, 195, 197, 129, 198, 199, 1000, 0,
	494, 0, 0, 140, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 160, 0, 0, 178, 163,
	0, 0, 0, 0, 523, 524, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 543, 511, 510, 512,
	513, 514, 515, 0, 0, 130, 516, 517, 518, 0,
	0, 0, 491, 504, 0, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 501, 502, 1003, 0, 0,
	0, 541, 0, 503, 0, 0, 500, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 192, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 146, 531, 537, 540, 0, 538, 535,
	536, 534, 533, 532, 542, 525, 526, 528, 0, 527,
	123, 128, 159, 0, 175, 144, 190, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 180, 0, 181, 0, 0, 0, 153,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 193, 194, 196, 195, 197, 129, 198,
	199, 0, 494, 0, 0, 140, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 160, 0, 0,
	178, 163, 0, 0, 0, 0, 523, 524, 0, 0,
	0, 0, 0, 0, 785, 60, 0, 0, 543, 511,
	510, 512, 513, 514, 515, 0, 0, 130, 516, 517,
	518, 786, 0, 0, 491, 504, 0, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 501, 502, 0,
	0, 0, 0, 541, 0, 503, 0, 0, 500, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 192, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 146, 531, 537, 540, 0,
	538, 535, 536, 534, 533, 532, 542, 525, 526, 528,
	0, 527, 123, 128, 159, 0, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 170, 0, 124, 0, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 0, 494, 0, 0, 140, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 160,
	0, 0, 178, 163, 0, 0, 0, 0, 523, 524,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 485,
	543, 511, 510, 512, 513, 514, 515, 0, 0, 130,
	516, 517, 518, 0, 0, 0, 491, 504, 0, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 501,
	502, 0, 0, 0, 0, 541, 0, 503, 0, 0,
	500, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 192, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 146, 531, 537,
	540, 0, 538, 535, 536, 534, 533, 532, 542, 525,
	526, 528, 0, 527, 123, 128, 159, 0, 175, 144,
	190, 149, 188, 187, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 180, 0, 181,
	0, 0, 0, 153, 170, 0, 124, 0, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 193, 194, 196,
	195, 197, 129, 198, 199, 0, 494, 0, 0, 140,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 160, 0, 0, 178, 163, 0, 0, 0, 0,
	523, 524, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 543, 511, 510, 512, 513, 514, 515, 0,
	0, 130, 516, 517, 518, 0, 0, 0, 491, 504,
	0, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 501, 502, 1003, 0, 0, 0, 541, 0, 503,
	0, 0, 500, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	192, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 146,
	531, 537, 540, 0, 538, 535, 536, 534, 533, 532,
	542, 525, 526, 528, 0, 527, 123, 128, 159, 0,
	175, 144, 190, 149, 188, 187, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 0, 0, 143, 180,
	0, 181, 0, 0, 0, 153, 170, 0, 124, 0,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 193,
	194, 196, 195, 197, 129, 198, 199, 0, 494, 0,
	0, 140, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 160, 0, 0, 178, 163, 0, 0,
	0, 0, 523, 524, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 543, 511, 510, 512, 513, 514,
	515, 0, 0, 130, 516, 517, 518, 0, 0, 0,
	491, 504, 0, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 502, 0, 0, 0, 0, 541,
	0, 503, 0, 0, 500, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 192, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 146, 531, 537, 540, 0, 538, 535, 536, 534,
	533, 532, 542, 525, 526, 528, 0, 527, 123, 128,
	159, 0, 175, 144, 190, 149, 188, 187, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 180, 0, 181, 0, 0, 0, 153, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 193, 194, 196, 195, 197, 129, 198, 199, 0,
	494, 0, 0, 140, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 160, 0, 0, 178, 163,
	0, 0, 0, 0, 523, 524, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 543, 511, 510, 512,
	513, 514, 515, 0, 0, 130, 516, 517, 518, 0,
	0, 0, 491, 504, 0, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 501, 502, 0, 0, 0,
	0, 541, 0, 503, 0, 0, 500, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 192, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 146, 531, 537, 540, 0, 538, 535,
	536, 534, 533, 532, 542, 525, 526, 528, 0, 527,
	123, 128, 159, 0, 175, 144, 190, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 180, 0, 181, 170, 0, 124, 153,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 193, 194, 196, 195, 197, 129, 198,
	199, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 160, 0, 0, 178, 163, 0, 0,
	0, 0, 523, 524, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 543, 511, 510, 512, 513, 514,
	515, 0, 0, 130, 516, 517, 518, 0, 0, 0,
	0, 504, 0, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 502, 0, 0, 0, 0, 541,
	0, 503, 0, 0, 500, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 192, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 146, 531, 537, 540, 0, 538, 535, 536, 534,
	533, 532, 542, 525, 526, 528, 0, 527, 123, 128,
	159, 0, 175, 144, 190, 149, 188, 187, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 180, 0, 181, 170, 0, 124, 153, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 0, 0, 0,
	0, 193, 194, 196, 195, 197, 129, 198, 199, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 160, 0, 0, 178, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 693, 703,
	704, 696, 697, 698, 699, 700, 701, 702, 695, 0,
	0, 705, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	192, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 128, 159, 0,
	175, 144, 190, 149, 188, 187, 145, 0, 0, 0,
	0, 29, 0, 0, 0, 0, 0, 0, 143, 180,
	0, 181, 170, 0, 124, 153, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 0, 0, 0, 0, 193,
	194, 196, 195, 197, 129, 198, 199, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 178, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 192, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 170, 0, 124, 0, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 182, 140, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 178, 163, 0, 123, 128, 159, 0, 175, 144,
	190, 149, 188, 187, 145, 0, 0, 0, 0, 121,
	0, 1423, 0, 0, 0, 0, 143, 180, 130, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 194, 196,
	195, 197, 129, 198, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 192, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 128, 159, 0, 175, 144, 190,
	149, 188, 187, 145, 0, 0, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 143, 180, 0, 181, 170,
	0, 124, 153, 0, 0, 150, 0, 154, 157, 158,
	0, 0, 0, 0, 0, 0, 193, 194, 196, 195,
	197, 129, 198, 199, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 178,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 192, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 140, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 178, 163,
	0, 123, 128, 159, 0, 175, 144, 190, 149, 188,
	187, 145, 0, 0, 0, 0, 402, 0, 0, 760,
	0, 0, 761, 143, 180, 130, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 196, 195, 197, 129,
	198, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 192, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 128, 159, 0, 175, 144, 190, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 180, 0, 181, 170, 0, 124, 153,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 193, 194, 196, 195, 197, 129, 198,
	199, 140, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 0, 178, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 570, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 192, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	140, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 0, 178, 163, 0, 123, 128,
	159, 0, 175, 144, 190, 149, 188, 187, 145, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	143, 180, 130, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 194, 196, 195, 197, 129, 198, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 134,
	0, 0, 176, 189, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 192, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 170, 0, 124, 0, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 140,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 160, 0, 0, 178, 163, 0, 123, 128, 159,
	0, 175, 144, 190, 205, 188, 187, 206, 0, 207,
	0, 0, 121, 0, 1423, 0, 0, 0, 0, 143,
	180, 130, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 196, 195, 197, 129, 198, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	192, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 170, 0, 124, 0, 0, 0, 150,
	0, 154, 157, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 140, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 0, 0, 178, 163, 0, 123, 128, 159, 0,
	175, 144, 190, 149, 188, 187, 145, 0, 60, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 143, 180,
	130, 181, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	194, 196, 195, 197, 129, 198, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 134, 0, 0,
	176, 189, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 148, 0, 0, 185, 186, 135, 192,
	0, 0, 127, 0, 0, 169, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 0, 0, 179, 0,
	0, 147, 141, 183, 138, 164, 131, 125, 0, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 170, 0, 124, 0, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 140, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 178, 163, 0, 123, 128, 159, 0, 175,
	144, 190, 149, 188, 187, 145, 0, 0, 0, 0,
	402, 0, 1178, 0, 0, 0, 0, 143, 180, 130,
	181, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 194,
	196, 195, 197, 129, 198, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 192, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 128, 159, 0, 175, 144,
	190, 149, 188, 187, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 180, 0, 181,
	0, 0, 170, 153, 124, 0, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 0, 0, 193, 194, 196,
	195, 197, 129, 198, 199, 0, 765, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 178, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 192, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 170, 0, 124, 0, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 140, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 178, 163, 0, 123, 128, 159, 0, 175, 144,
	190, 149, 188, 187, 145, 0, 0, 0, 0, 412,
	0, 458, 0, 0, 0, 0, 143, 180, 130, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 194, 196,
	195, 197, 129, 198, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 192, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 140, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
	178, 163, 0, 123, 128, 159, 0, 175, 144, 190,
	149, 188, 187, 145, 0, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 143, 180, 130, 181, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 194, 196, 195,
	197, 129, 198, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 192, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 170,
	0, 124, 0, 0, 0, 150, 0, 154, 157, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 140, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 178,
	163, 0, 123, 128, 159, 0, 175, 144, 190, 149,
	188, 187, 145, 0, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 143, 180, 130, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 194, 196, 195, 197,
	129, 198, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 192, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 140, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 178, 163,
	0, 123, 128, 159, 0, 175, 144, 190, 149, 188,
	187, 145, 0, 0, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 143, 180, 130, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 194, 196, 195, 197, 129,
	198, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 192, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 170, 0, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 140, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 0, 178, 163, 0,
	123, 128, 159, 0, 175, 144, 190, 149, 188, 187,
	145, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 143, 180, 130, 181, 0, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 194, 196, 195, 197, 129, 198,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 192, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 170, 0, 124, 0,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 140, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 0, 178, 163, 0, 123,
	128, 159, 0, 175, 144, 190, 149, 188, 187, 145,
	0, 0, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 143, 180, 130, 181, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 194, 196, 195, 197, 129, 198, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 192, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	140, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 0, 178, 163, 0, 123, 128,
	159, 0, 175, 144, 190, 149, 188, 187, 145, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 0,
	143, 180, 130, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 194, 196, 195, 197, 129, 198, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 134,
	0, 0, 176, 189, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 192, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 128, 159,
	0, 175, 144, 190, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 196, 195, 197, 129, 198, 199,
}
var yyPact = [...]int{

	156, -1000, -212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1051, 1084, -1000,
	-1000, -1000, -1000, -1000, -1000, 849, 251, 62, 144, 119,
	-184, 1909, 52, 11090, -1000, 9138, 4483, -28, -1000, -150,
	-1000, -1000, -176, -1000, -184, 52, 875, -1000, -1000, -1000,
	-1000, -1000, -1000, 1031, 1045, 899, 989, 914, -1000, -12,
	-30, 11090, 1068, 2593, -125, 10672, 151, 140, 139, 138,
	151, -1000, -1000, -1000, 118, 11508, -1000, 52, 746, 145,
	-1000, 11090, -1000, 52, -1000, -1000, -54, 37, -1000, -1000,
	-32, 371, -1000, -1000, -1000, -62, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11090, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10254, 360, 175, 211, 337, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 549, -1000, -1000, -1000,
	-1000, -1000, -1000, 819, 819, -1000, 11090, -1000, -1000, -192,
	-1000, 52, 11090, 609, 974, 7121, 7121, 1051, -1000, 875,
	-1000, -1000, -1000, 952, -1000, -1000, 387, 142, -1000, -1000,
	-1000, 142, -1000, -1000, 966, 11090, 813, -1000, -1000, -160,
	3223, -1000, -1000, -1000, -1000, 336, 8929, 8929, -1000, -1000,
	-1000, 959, -1000, -1000, -1000, -1000, -1000, 1044, 1041, 745,
	-1000, 1582, -1000, -1000, 11508, 351, 740, 729, 728, 11090,
	11090, 71, -1000, -1000, -1000, 145, 862, 11508, 977, -1000,
	11090, 1062, 11090, 11090, -1000, -1000, 371, 371, -1000, -1000,
	11090, -1000, -1000, -1000, -1000, -1000, 371, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 79, -1000, -1000, -1000, -1000, -1000,
	-10, -1000, -1000, -1000, -1000, -1000, -1000, 331, 5428, -35,
	-1000, -1000, -1000, 7121, -1000, -1000, 221, -1000, -1000, -1000,
	-1000, -1000, 11090, 804, -1000, -1000, -1000, 1077, 265, 372,
	-1000, 7121, 2069, 819, 819, -1000, -1000, 170, -1000, -1000,
	7399, 7399, 7399, 7399, 7399, 7399, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 819,
	204, -1000, 6839, 819, 819, 819, 819, 819, 819, 7121,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	819, 819, 819, -1000, -1000, 812, -1000, 282, 1031, 609,
	914, 8651, 822, -1000, -1000, 10045, 10045, 10881, 1060, 2908,
	-1000, 806, 805, -173, -185, -1000, -160, 5993, -1000, -1000,
	-1000, -1000, 230, -1000, 819, 126, 123, 2232, 877, 24,
	-1000, -1000, -1000, 830, -1000, 830, 830, 830, 830, 73,
	73, 73, 73, -1000, -1000, -1000, -1000, -1000, 854, 853,
	-1000, 830, 830, 830, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 852, 852, 852, 845, 845, 71, 976, 861,
	859, 856, -1000, 183, -1000, 71, -1000, 147, -183, -1000,
	11090, 11090, -1000, -1000, 804, 1031, -60, -1000, -1000, 392,
	11090, 11090, 371, -1000, 11090, -1000, -1000, -1000, 547, -121,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 722, 354,
	-1000, 11090, -1000, -1000, -1000, -1000, -1000, 804, 128, -1000,
	926, 7121, 7121, 423, 7121, 7121, 281, 7399, 490, 309,
	7399, 7399, 7399, 7399, 7399, 7399, 7399, 7399, 7399, 7399,
	7399, 7399, 7399, 7399, 7399, 540, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 719, -1000, 875, 608, 608, 229,
	229, 229, 229, 229, 7677, 5711, 5113, 609, 6839, 6557,
	6557, 7121, 7121, 6557, 990, 362, 354, 10463, -1000, 609,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6557, 6557, 6557,
	6557, 7121, -1000, -1000, -1000, 974, -1000, 990, 1048, -1000,
	935, 934, 6557, -1000, -127, 11090, -1000, -127, 843, -1000,
	326, -1000, 203, 1051, 7121, -1000, 4168, -1000, -175, -1000,
	-166, -188, -1000, -1000, -1000, -1000, -1000, 354, -1000, 718,
	10672, 819, 819, -1000, 123, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	297, 297, 152, 297, 297, 297, 297, 297, -6, -9,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, -1000, -1000, 662, 242, 235, -1000, -1000,
	-1000, -1000, 1003, -1000, 877, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 378, 418, -1000,
	998, -1000, 997, 591, 1075, 506, 179, 171, 20, -1000,
	-1000, 546, 73, 73, -1000, -1000, -1000, 956, -1000, -1000,
	-1000, 576, 576, -1000, -1000, -1000, -1000, 536, -1000, -1000,
	-1000, 532, -1000, -1000, -1000, 11090, 11090, 11090, -1000, 421,
	325, 116, 160, 158, 154, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 297, 297, -1000, -1000, 955, 954,
	297, 840, 972, -1000, 573, -1000, -1000, -1000, 572, 7121,
	-1000, 371, 1060, -1000, -1000, -1000, -1000, 248, 7121, -1000,
	-1000, -1000, 938, -1000, -1000, -1000, -1000, -1000, 924, 281,
	321, -1000, -1000, 517, -1000, -1000, 354, 354, 644, -1000,
	-1000, -1000, -1000, 490, 7399, 7399, 7399, 476, 644, 2109,
	1191, 1156, 229, 368, 368, 280, 280, 280, 280, 280,
	584, 584, -1000, -1000, -1000, 609, -1000, -1000, -1000, 609,
	6557, 801, -1000, -1000, 1822, 198, 819, 186, -1000, -1000,
	609, 705, 705, 320, 516, 705, 6557, 370, -1000, 7121,
	609, -1000, 705, 609, 705, 705, -1000, -1000, 11090, -1000,
	-1000, -1000, -1000, 816, 811, 819, -1000, 761, 1051, 10881,
	7121, 5113, 1031, 354, -1000, -1000, -1000, -179, -197, -1000,
	-1000, 609, 10672, 10672, -1000, 569, -1000, 506, 297, 297,
	529, 521, 499, 568, 563, 297, 297, 493, 561, 673,
	481, 480, 437, 565, 560, 704, 531, 523, 475, 11299,
	107, -1000, 662, -1000, 995, 242, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 851, -1000, -1000, -1000, -1000,
	-1000, -1000, -67, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 723, -1000, -1000, 227, 714, -1000,
	711, 800, 707, 819, 819, 819, -1000, 11090, -1000, -1000,
	-1000, 666, 69, 849, 664, 10672, 632, 347, -1000, -1000,
	439, -1000, -1000, -1000, -1000, 1027, 951, 297, 297, -1000,
	-1000, -1000, 354, 392, -1000, -1000, 354, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 476, 644, 1671, -1000, 7399, 7399,
	-1000, -1000, 705, 6557, -1000, -1000, 9765, -1000, -1000, 3853,
	6557, 4798, -1000, -1000, -1000, 834, 540, 834, -95, 809,
	339, -1000, 7121, 474, -1000, -1000, -1000, -1000, -1000, -1000,
	1060, 9556, 844, 10881, 819, -1000, 8442, 10672, -1000, 10881,
	1031, -1000, 354, -1000, -1000, -1000, -1000, -1000, -1000, 609,
	609, -1000, -1000, 506, 506, -1000, -1000, -1000, -1000, -1000,
	556, 555, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 847, -1000, 1020, 846, 107, 662, 401,
	-1000, -1000, -1000, -1000, -1000, 554, -1000, 435, -1000, 422,
	10463, 10463, 10463, -1000, -1000, -1000, 953, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 632, 632, -1000, -1000, 7399, 644, 644, -1000,
	-1000, -1000, -1000, 181, 609, -1000, 609, 830, 830, -1000,
	830, 845, -1000, 830, 89, 830, 86, 609, 609, 819,
	-91, -1000, 354, 7121, 1056, 799, 833, -1000, -1000, -1000,
	986, 7955, 8164, -1000, 969, 749, 789, -1000, -1000, 6275,
	609, 702, 180, 700, -1000, 787, -1000, 819, -133, -1000,
	-1000, -1000, -1000, 10463, -1000, -1000, -1000, -1000, 10463, 842,
	107, -1000, 715, -1000, 672, 622, 698, -1000, 830, 698,
	698, 660, -1000, -1000, 644, 3538, -1000, -1000, -1000, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7399, 609,
	553, 354, 1054, 1034, 9556, 9556, 9556, 9556, -1000, 906,
	905, -1000, 904, 903, 916, 11090, -1000, 678, 7955, 231,
	-1000, 9347, -1000, -1000, 993, -1000, 819, -1000, -1000, 818,
	10672, 10463, 10672, -1000, -129, -1000, 416, 671, 657, 10463,
	821, -1000, -1000, -1000, -1000, 10463, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 120, -1000, -1000, -1000, 7121, 7121, 833,
	817, 889, -1000, -1000, -1000, -1000, 902, -1000, 888, -1000,
	-1000, -1000, -1000, -1000, 133, 132, 124, -1000, 1074, -1000,
	819, -1000, 875, 166, -1000, -1000, 621, -1000, 616, -1000,
	-1000, -1000, 607, 10463, 249, -1000, 168, 724, 609, 103,
	-105, 354, 790, 7121, 7121, -1000, -1000, 819, 819, 819,
	10881, 789, 609, 10672, -129, -1000, 933, 182, 182, -1000,
	605, -1000, -1000, -1000, -1000, 297, 552, 1028, -1000, -1000,
	-1000, 1013, -1000, -1000, -1000, 923, -101, -114, 354, 354,
	10463, 10463, 10463, 787, -1000, -1000, -1000, 250, -1000, 297,
	-1000, 507, 1010, 182, -1000, 398, -1000, -1000, -1000, -1000,
	595, -1000, 920, -1000, 600, -1000, 600, 600, 819, 377,
	-1000, 594, 182, -1000, -1000, -103, -1000, 10463, -1000, -1000,
	-1000, -1000, -1000, -112, -1000, -117, -1000,
}
var yyPgo = [...]int{

	0, 25, 26, 1404, 1403, 1400, 31, 1022, 1399, 1398,
	1394, 1393, 61, 1392, 1391, 1390, 1389, 1387, 53, 946,
	1385, 1382, 1104, 1102, 1099, 1092, 1381, 1380, 1378, 1377,
	1376, 1375, 1374, 1373, 1372, 1371, 1366, 1363, 100, 1362,
	1361, 51, 1360, 1357, 1355, 78, 1354, 88, 1348, 1347,
	1346, 38, 117, 41, 43, 124, 1345, 33, 34, 17,
	1344, 1341, 23, 1340, 1241, 87, 1339, 79, 113, 1338,
	1336, 40, 1335, 1334, 1332, 984, 1329, 1328, 85, 1327,
	1326, 2, 29, 1324, 62, 1323, 58, 83, 18, 1322,
	1321, 1319, 1318, 1316, 1314, 57, 10, 6, 1, 16,
	1299, 60, 11, 1295, 63, 1291, 1290, 1289, 1288, 37,
	1286, 80, 1285, 36, 94, 1284, 84, 1279, 24, 22,
	55, 1278, 1265, 82, 98, 93, 70, 1264, 77, 1263,
	1261, 95, 1259, 1258, 1257, 99, 1256, 103, 498, 1255,
	1254, 1251, 1250, 1249, 1245, 1244, 102, 66, 59, 0,
	15, 56, 39, 1243, 21, 1174, 68, 13, 1242, 97,
	1240, 1234, 1587, 50, 96, 35, 1233, 1231, 1224, 1213,
	1211, 1210, 1205, 32, 1204, 1201, 1200, 1198, 1196, 1193,
	1190, 1186, 1185, 1181, 1180, 1179, 1178, 1176, 1175, 1169,
	90, 1167, 1166, 1164, 1162, 1161, 1157, 1156, 1155, 1153,
	1150, 1149, 20, 1148, 1146, 1145, 1142, 28, 1141, 69,
	3, 71, 1140, 1139, 1137, 109, 30, 1135, 1130, 1129,
	1127, 65, 48, 1126, 81, 52, 49, 1125, 1124, 1123,
	75, 14, 19, 1122, 1121, 1120, 12, 9, 1119, 1117,
	1116, 1115, 5, 42, 45, 1113, 1112, 27, 1111, 1110,
	67, 101, 1109, 91, 4, 1108, 1107, 1097, 1094, 7,
	147, 1090, 128,
}
var yyR1 = [...]int{

	0, 257, 258, 258, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	18, 19, 20, 20, 21, 21, 22, 22, 23, 23,
	43, 43, 43, 43, 44, 44, 44, 117, 117, 116,
	116, 24, 25, 26, 26, 255, 255, 254, 178, 178,
	7, 7, 27, 27, 27, 27, 27, 256, 256, 256,
	256, 256, 256, 246, 246, 247, 247, 239, 237, 237,
	234, 234, 240, 240, 233, 233, 238, 238, 235, 235,
	242, 242, 242, 242, 242, 243, 244, 251, 251, 252,
	252, 206, 206, 253, 253, 253, 253, 211, 211, 210,
	210, 209, 209, 209, 212, 212, 212, 30, 226, 228,
	228, 229, 229, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 180, 182, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 195, 196, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 198, 198, 199,
	199, 200, 200, 201, 201, 183, 207, 207, 181, 177,
	179, 227, 227, 227, 222, 154, 154, 166, 166, 166,
	166, 248, 248, 249, 249, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 169, 169, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 168, 168, 168, 168,
	168, 170, 170, 170, 170, 170, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 172, 172, 172, 172, 172, 172, 172, 172, 221,
	221, 173, 173, 215, 215, 216, 216, 216, 213, 213,
	214, 214, 217, 217, 174, 174, 174, 174, 174, 174,
	42, 41, 41, 41, 133, 133, 133, 218, 202, 202,
	202, 176, 203, 203, 204, 204, 204, 205, 205, 205,
	219, 219, 220, 220, 175, 223, 223, 223, 223, 6,
	6, 241, 241, 241, 241, 236, 236, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 5, 5, 225, 225,
	224, 224, 232, 232, 231, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 160, 160, 139, 139, 144, 144,
	144, 29, 29, 29, 78, 78, 145, 145, 8, 9,
	140, 140, 140, 72, 72, 72, 10, 12, 12, 12,
	12, 12, 73, 73, 73, 73, 73, 73, 11, 11,
	11, 11, 208, 208, 208, 208, 208, 13, 143, 143,
	143, 14, 16, 16, 16, 16, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 50, 50, 70, 70, 70, 67,
	67, 68, 68, 69, 69, 66, 66, 71, 71, 71,
	74, 74, 74, 35, 146, 146, 33, 75, 75, 75,
	36, 76, 76, 76, 76, 76, 76, 77, 77, 37,
	31, 34, 261, 38, 39, 39, 40, 40, 40, 47,
	47, 47, 45, 45, 46, 46, 53, 53, 52, 52,
	54, 54, 54, 54, 153, 153, 153, 152, 152, 56,
	56, 57, 57, 58, 58, 59, 59, 59, 79, 60,
	60, 60, 60, 161, 161, 158, 158, 158, 157, 157,
	61, 61, 61, 61, 62, 62, 62, 62, 63, 63,
	65, 65, 64, 64, 80, 80, 80, 80, 81, 81,
	82, 82, 55, 55, 55, 55, 55, 55, 55, 136,
	136, 84, 84, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 94, 94, 94, 94, 94, 94, 85,
	85, 85, 85, 85, 85, 85, 51, 51, 95, 95,
	95, 101, 96, 96, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 92, 92, 92, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 91, 91, 91, 91,
	91, 91, 91, 91, 262, 262, 93, 93, 93, 93,
	48, 48, 48, 48, 48, 163, 163, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	105, 105, 49, 49, 103, 103, 104, 106, 106, 102,
	102, 102, 87, 87, 87, 87, 87, 87, 87, 89,
	89, 89, 107, 107, 108, 108, 109, 109, 110, 110,
	111, 112, 112, 112, 113, 113, 113, 113, 114, 114,
	114, 86, 86, 86, 86, 86, 86, 115, 115, 115,
	115, 118, 118, 97, 97, 99, 99, 98, 100, 119,
	119, 120, 121, 121, 124, 124, 123, 123, 123, 123,
	123, 132, 132, 131, 131, 131, 122, 122, 125, 125,
	129, 129, 128, 130, 130, 130, 130, 127, 127, 126,
	126, 164, 164, 164, 134, 134, 137, 137, 138, 138,
	135, 135, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 147, 147, 147, 142, 142, 245, 245, 150,
	150, 151, 151, 155, 155, 156, 156, 159, 159, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 259,
	260, 162,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 8, 9, 7, 8,
	0, 1, 1, 1, 0, 1, 1, 1, 3, 0,
	4, 8, 7, 3, 3, 1, 3, 5, 0, 2,
	1, 1, 3, 5, 11, 11, 11, 0, 1, 1,
	5, 9, 7, 1, 1, 1, 1, 2, 3, 2,
	0, 2, 1, 1, 0, 2, 1, 3, 0, 2,
	0, 1, 1, 2, 2, 3, 3, 0, 1, 1,
	2, 1, 1, 4, 4, 2, 4, 0, 1, 0,
	1, 1, 2, 2, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 4,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 3, 3,
	4, 1, 3, 3, 3, 1, 1, 3, 1, 1,
	1, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 4,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 3, 4, 1, 1, 1, 1, 0, 3,
	3, 2, 0, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 7, 7, 8, 9, 0,
	1, 3, 1, 2, 3, 0, 2, 0, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 3, 2, 6, 7, 7, 7, 9,
	7, 7, 7, 4, 0, 1, 0, 1, 0, 1,
	1, 6, 6, 4, 1, 3, 0, 1, 3, 2,
	1, 1, 1, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 3, 3, 3, 1, 1, 3, 5,
	3, 6, 0, 1, 1, 1, 1, 2, 0, 1,
	1, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	3, 3, 4, 4, 4, 6, 5, 5, 3, 3,
	5, 6, 7, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 0, 3, 1, 1, 1, 0,
	2, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 1, 1, 5, 1, 1, 2, 0, 1, 1,
	4, 2, 1, 1, 1, 1, 1, 0, 2, 4,
	4, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 1, 2, 3, 3, 3, 2,
	3, 1, 2, 1, 1, 1, 2, 3, 2, 2,
	0, 2, 3, 2, 2, 2, 1, 0, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0,
}
var yyChk = [...]int{

	-1000, -257, -17, -18, -22, -23, -24, -25, -26, -27,
	-28, -29, -8, -31, -32, -35, -33, -9, -10, -11,
	-13, -14, -16, -15, -34, -36, -37, -19, -20, 6,
	7, 263, 8, 9, 44, -30, 130, 131, 132, 155,
	134, 150, 49, 69, 283, -140, 153, 290, 293, 294,
	297, 296, 312, 154, 156, 48, -259, 149, 148, 147,
	72, -258, 320, -109, 14, -40, 5, -38, -261, -38,
	-38, -38, -38, -38, -226, 72, -7, -245, 23, 31,
	143, 255, 256, 34, -135, 255, 139, -139, 140, -7,
	33, -145, 143, -75, 311, 299, 248, 130, 243, 285,
	-69, -70, 287, 288, 250, 143, 289, 246, 286, 245,
	242, 180, 75, 46, 140, 27, 25, -146, 143, 244,
	-155, 75, -149, 269, 19, 211, 157, 176, 270, 317,
	84, 210, 213, 214, 151, 172, 216, 215, 208, 166,
	42, 206, 190, 291, 274, 279, 252, 205, 167, 276,
	23, 191, 195, 298, 25, 218, 189, 26, 27, 271,
	54, 193, 219, 58, 209, 220, 197, 196, 198, 179,
	17, 221, 222, 192, 194, 273, 154, 223, 57, 202,
	292, 294, 250, 207, 181, 170, 171, 278, 277, 155,
	275, 145, 173, 312, 313, 315, 314, 316, 318, 319,
	-162, -64, -73, 134, -155, 276, 279, 281, -208, 75,
	77, -148, -149, 90, 38, 40, 200, 93, 163, 125,
	185, 15, 21, 94, 47, 174, 177, 180, 48, 124,
	251, 212, 264, 130, 67, 254, 257, 253, 255, 243,
	168, 43, 9, 147, 148, 37, 118, 132, 97, 98,
	285, 152, 39, 149, 87, 50, 18, 70, 10, 46,
	12, 13, 153, 138, 139, 109, 140, 65, 7, 161,
	162, 126, 41, 106, 61, 35, 63, 107, 16, 258,
	259, 45, 188, 184, 268, 187, 51, 160, 183, 120,
	68, 55, 91, 85, 169, 88, 71, 156, 89, 14,
	66, 288, 142, 141, 287, 165, 108, 133, 263, 29,
	64, 256, 6, 267, 44, 150, 159, 62, 143, 244,
	33, 186, 158, 182, 96, 144, 86, 289, 5, 34,
	203, 8, 52, 69, 146, 260, 261, 262, 53, 178,
	175, 286, 272, 95, 11, 204, -143, 273, 213, -162,
	295, -162, -162, 313, 315, 314, 316, 317, 319, 283,
	-162, -75, -146, -18, -113, 16, 15, -21, -19, -259,
	6, 36, 37, -47, 59, 60, -39, -43, 229, 228,
	230, -44, 229, 228, -64, 10, -121, -122, -124, 295,
	-164, -123, 299, 300, 298, -151, -132, 301, -150, -148,
	180, 177, 75, -149, -256, 298, 292, 284, 280, -227,
	-222, -154, 75, -149, -138, 138, 140, 140, 140, -138,
	143, -160, -159, 75, -149, -146, 75, -137, 138, -64,
	-146, 247, 143, 255, -162, -162, 244, -66, 251, 252,
	-68, 10, 109, -162, -162, -162, 250, -162, -162, -162,
	-162, -162, -162, -162, -78, -64, -72, -154, 77, -12,
	18, -18, -24, -22, -23, -25, -12, 276, 127, 99,
	78, -162, -98, -259, -98, -162, -64, -162, -162, 318,
	296, 297, -146, -78, -260, 74, -114, 18, 45, -55,
	-83, 91, -88, 43, 39, -87, -84, -102, -100, -101,
	125, 114, 115, 122, 92, 126, -92, -90, -91, -93,
	77, 76, 78, 79, 80, 81, 85, 86, 87, -150,
	-155, -98, -259, 63, 64, 264, 265, 268, 266, 94,
	53, 253, 262, 261, 260, 258, 259, 254, 257, 138,
	255, 120, 263, 75, -149, -110, -111, -55, -109, -18,
	-38, 55, -45, 37, 83, -135, -135, 44, -64, 73,
	-125, -128, -126, 302, 304, -123, 295, 99, -131, -150,
	77, 43, -131, 44, 15, 15, 74, 73, -166, -169,
	-171, -170, -172, -167, -168, 174, 175, 125, 178, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 44,
	151, 170, 171, 172, 173, 191, 192, 193, 194, 195,
	196, 197, 198, 157, 176, 270, 158, 159, 160, 161,
	162, 163, 165, 166, 167, 168, 169, -159, 91, 75,
	75, 75, -64, -64, -251, -252, -253, -211, 304, 43,
	-137, 71, -159, 39, -78, -50, 10, -64, -155, -67,
	-68, -68, -64, -67, 73, -74, 142, 279, 213, 99,
	-156, -155, -148, 189, 277, 278, -162, -162, -96, -55,
	-162, -147, 144, 38, -162, -162, -162, -78, -77, 8,
	109, 90, 89, 106, 73, 17, -55, -85, 109, 91,
	107, 108, 93, 111, 110, 121, 114, 115, 116, 117,
	118, 119, 120, 112, 113, 124, 99, 100, 101, 102,
	103, 104, 105, -136, -259, -101, -259, 128, 129, -88,
	-88, -88, -88, -88, -88, -259, 127, -18, -259, -259,
	-259, -259, -259, -259, -259, -105, -55, -259, -262, -259,
	-262, -262, -262, -262, -262, -262, -262, -259, -259, -259,
	-259, 73, -112, 40, 147, -113, -260, -47, -89, -150,
	78, 81, -46, 62, -65, 41, -64, -65, -119, -120,
	-102, -150, -155, -82, 11, -124, -164, -127, 73, -129,
	73, 303, 305, 306, -125, 71, 88, -55, -203, 124,
	-259, 282, 24, -228, -229, -230, -181, -177, -179, -180,
	-182, -183, -184, -185, -186, -187, -188, -189, -190, -191,
	-192, -193, -194, -195, -196, -197, -198, -199, -200, -201,
	84, 291, -211, 200, 211, 49, 212, 213, 214, 140,
	216, 217, 218, 26, 219, 220, 221, 222, 223, 224,
	225, 226, 227, -222, -223, -224, -5, -4, 140, 35,
	31, 23, 22, -248, -249, -250, -217, -174, -218, -219,
	-220, -175, -42, -176, -204, -205, 85, 91, 43, 200,
	141, 35, 34, 84, 71, 124, 210, 207, -213, 203,
	-173, 72, -173, -173, -173, -173, -202, 177, -202, -202,
	-202, 72, 72, -173, -173, -173, -215, 72, -215, -215,
	-216, 72, -216, -251, 39, 71, 71, 71, -141, 133,
	291, 264, 135, 132, 136, 131, 200, 177, 84, 43,
	14, 275, 75, -253, 124, -209, -190, 180, 177, 174,
	306, -78, -64, -113, 249, -162, -162, -71, 107, 11,
	-155, -64, -67, -162, -64, -162, 78, 277, 73, -260,
	-64, -76, 18, 142, 50, 51, 279, 47, 57, -55,
	-55, -94, 85, 91, 86, 87, -55, -55, -88, -95,
	-98, -101, 82, 109, 107, 108, 93, -88, -88, -88,
	-88, -88, -88, -88, -88, -88, -88, -88, -88, -88,
	-88, -88, -163, 75, 77, 75, -87, -87, -150, -53,
	37, -52, -54, 116, -55, -155, -151, -156, -148, -260,
	-18, -52, -52, -55, -55, -52, -45, -103, -104, 95,
	-150, -260, -52, -53, -52, -52, -111, -114, -134, 18,
	10, 53, 53, -52, -116, 280, -64, -116, -82, 73,
	99, 127, -109, -55, -126, -128, -130, 307, 304, 310,
	75, -154, -259, -259, -230, -210, 99, -210, 124, -209,
	-210, -210, -210, -210, -210, 215, 215, -210, -210, -210,
	-210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
	-6, 75, -225, -224, 141, 34, 32, -250, 85, 77,
	78, 79, 85, -41, -84, -133, 253, 258, 259, 35,
	35, 77, 8, -207, 75, 77, 205, 206, 43, 43,
	208, 209, -214, 204, 78, -202, -202, 44, -221, 77,
	-221, 78, 78, -64, -64, -64, -162, -147, -142, 140,
	35, 99, 144, 137, 137, 137, -210, -210, 44, 44,
	-210, -144, 29, 21, -242, -243, -244, 45, 19, -162,
	77, 77, -55, -67, -82, -12, -55, -162, 52, 58,
	85, 86, 87, -95, -88, -88, -88, -51, 152, 90,
	-260, -260, -52, 73, -153, -152, 38, -150, 77, 127,
	-259, 127, -260, -260, -260, 73, 146, 38, -260, -52,
	-106, -104, 97, -55, -260, -260, -260, -260, -260, -64,
	-56, 10, -86, 44, 53, -18, -259, -259, -86, 44,
	-109, -120, -55, -151, -113, 304, 308, 309, -260, -154,
	-154, 77, -207, -210, -210, 78, 78, 78, 77, 77,
	-210, -210, 78, 77, 75, 78, 78, 78, 78, 43,
	77, 43, 206, 205, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 78, 43, 78, 43, 78,
	43, 75, -149, -2, -1, 146, -6, 35, -225, 72,
	-41, 74, 75, 125, 74, 73, 74, 73, 74, 73,
	-259, -259, -259, -64, -162, 75, 177, -226, 75, -222,
	-247, 75, 43, -212, 75, 125, 43, -206, 78, 43,
	-244, -243, -210, -210, -71, -51, 90, -88, -88, -260,
	-54, -152, 116, -156, -53, -151, -165, 125, 174, 151,
	172, 168, 189, 179, 202, 170, 203, -163, -165, 269,
	-109, 98, -55, 96, -82, -57, -58, -59, -60, -79,
	-101, -259, -64, -118, 71, -119, -97, -99, -98, -259,
	-18, -115, -154, -117, -154, -119, -113, -260, -260, -207,
	-207, 77, 77, 72, -3, 24, 20, 30, 72, -2,
	-6, 74, 78, 77, 78, 78, -232, -231, -150, -232,
	-232, 44, -247, -247, -88, 127, -260, -260, -173, -173,
	-173, -216, -173, 162, -173, 162, -260, -260, -259, -49,
	267, -55, -107, 12, 73, -61, -62, -63, 61, 65,
	67, 62, 63, 64, 68, -161, 38, -57, -259, -158,
	-157, 38, -155, 77, 42, -118, 73, -260, -260, -260,
	73, 127, 73, -260, -259, -178, 281, -232, -232, 72,
	-2, 74, 74, 74, -260, 73, -173, -260, -260, 75,
	116, -202, 75, -88, -260, 77, -108, 13, 15, -58,
	-59, -58, -59, 61, 61, 61, 66, 61, 66, 61,
	-62, -155, -260, -80, 69, 139, 70, -157, 35, -99,
	53, -18, -259, -154, -150, -154, -255, -254, 280, 78,
	74, 74, -232, 72, -234, -231, -233, -235, -48, 109,
	272, -55, -96, 71, 71, 61, 61, 140, 140, 140,
	8, -97, -18, 127, 73, -260, 75, -236, -236, 74,
	-232, -242, -240, -237, -239, 26, 84, 146, -242, -238,
	-237, 272, -242, -237, -260, 270, 68, 273, -55, -55,
	-259, -259, -259, -119, -260, -154, -254, 53, -241, 26,
	-1, 84, 272, -236, 74, -210, 77, -246, 24, 20,
	28, 58, 271, 274, -81, -150, -81, -81, 109, -210,
	77, 28, -236, 78, 75, 58, -260, 73, -260, -260,
	-98, 78, 75, 272, -150, 273, 274,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 676, 0, 462,
	462, 462, 462, 462, 462, 0, 767, 750, 346, 356,
	447, 433, 0, 0, 991, 372, 382, 388, 991, 0,
	991, 991, 0, 991, 447, 0, 0, 360, 361, 362,
	989, 1, 3, 684, 0, 0, 466, 469, 464, 40,
	44, 0, 0, 0, 67, 0, 748, 0, 0, 0,
	748, 60, 61, 768, 0, 344, 751, 0, 0, 746,
	347, 0, 357, 0, 448, 449, 0, 0, 991, 991,
	0, 0, 991, 991, 991, 0, 991, 991, 991, 991,
	991, 991, 991, 434, 426, 427, 428, 0, 444, 445,
	446, 773, 774, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	359, 363, 0, 0, 522, 938, -2, 377, 387, 383,
	384, 385, 386, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 0, 389, 390, 392,
	991, 394, 395, 0, 0, 991, 0, 991, 991, 0,
	461, 0, 0, 32, 688, 0, 0, 676, 34, 0,
	462, 467, 468, 472, 470, 471, 463, 750, 41, 42,
	43, 750, 45, 46, 0, 0, 53, 54, 712, 0,
	0, 714, 741, 742, -2, 0, 0, 0, 771, 772,
	-2, 792, 769, 770, 62, 68, 69, 0, 0, 0,
	191, 0, 195, 196, 0, 0, 0, 0, 0, 0,
	0, -2, 345, 777, 778, 746, 0, 0, 0, 358,
	0, 424, 0, 0, 408, 409, 429, 0, 435, 436,
	0, 431, 432, 413, 414, 415, 429, 417, 418, 419,
	420, 421, 422, 423, 440, 354, 366, 364, 365, 378,
	0, -2, 368, 369, 370, 371, 380, 0, 0, 0,
	991, 393, 991, 0, 991, 398, 762, 400, 401, 991,
	991, 991, 0, 457, 33, 990, 28, 0, 0, 685,
	532, 0, 537, 539, 0, 574, 575, 576, 577, 578,
	0, 0, 0, 0, 0, 0, 600, 601, 602, 603,
	662, 663, 664, 665, 666, 667, 668, 541, 542, 659,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 650,
	0, 624, 624, 624, 624, 624, 624, 624, 624, 0,
	0, 0, 0, -2, -2, 677, 678, 681, 684, 32,
	469, 0, 474, 473, 465, 0, 0, 0, 530, 0,
	726, 737, 730, 0, 0, 715, 0, 0, 719, 723,
	724, 725, 292, 722, 0, 0, -2, 317, 201, 268,
	198, 199, 200, 261, 216, 261, 261, 261, 261, 288,
	288, 288, 288, 244, 245, 246, 247, 248, 0, 0,
	231, 261, 261, 261, 235, 251, 252, 253, 254, 255,
	256, 257, 258, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 263, 263, 263, 265, 265, -2, 0, 0,
	0, 0, 117, 0, 343, -2, 99, 0, 0, 108,
	0, 0, 353, 747, 460, 684, 0, 991, 991, 437,
	0, 0, 429, 991, 0, 991, 441, 442, 0, 0,
	523, 775, 776, 373, 374, 375, 391, 396, 0, 572,
	397, 0, 763, 764, 402, 403, 404, 450, 459, 689,
	0, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 560, 561, 562,
	563, 564, 565, 538, 0, 552, 0, 0, 0, 594,
	595, 596, 597, 598, 0, 476, 0, 32, 0, 0,
	0, 0, 0, 0, 472, 0, 651, 0, 616, 0,
	617, 618, 619, 620, 621, 622, 623, 0, 476, 0,
	0, 0, 680, 682, 683, 688, 35, 472, 0, 669,
	0, 0, 0, 475, 49, 0, 521, 49, 530, 709,
	0, 659, 0, 676, 0, 713, 0, 728, 0, 729,
	0, 0, 739, 740, 727, 716, 717, 718, 720, 0,
	0, 0, 0, 118, -2, 121, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	109, 109, 0, 109, 109, 109, 109, 109, 0, 0,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 192, 193, 309, 328, 0, 330, 331,
	326, -2, 318, 194, 202, 203, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 272, 0, 0, 287,
	0, 301, 303, 0, 0, 0, 0, 0, 270, 269,
	215, 0, 288, 288, 238, 239, 240, 0, 241, 242,
	243, 0, 0, 232, 233, 234, 226, 0, 227, 228,
	229, 0, 230, 63, 749, 0, 0, 0, 991, 762,
	0, 759, 0, 757, 0, 752, 753, 754, 755, 756,
	758, 760, 761, 100, 109, 109, 105, 111, 0, 0,
	109, 348, 90, 991, 0, 406, 407, 410, 0, 0,
	430, 429, 530, 416, 355, 443, 379, 0, 0, 707,
	991, 458, 0, 452, 453, 454, 455, 456, 0, 533,
	534, 536, 553, 0, 555, 557, 686, 687, 543, 544,
	568, 569, 570, 0, 0, 0, 0, 566, 548, 0,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 593, 635, 636, 0, 591, 592, 599, 0,
	0, 477, 478, 480, 484, 0, 660, 0, -2, 571,
	32, 0, 0, 0, 0, 0, 0, 657, 654, 0,
	0, 625, 0, 0, 0, 0, 679, 29, 0, 744,
	745, 670, 671, 489, 0, 0, 520, 0, 676, 0,
	0, 0, 684, 531, 738, 731, 732, 0, 0, 736,
	293, 0, 0, 0, 122, 0, 110, 0, 109, 109,
	0, 0, 0, 0, 0, 109, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	321, 310, 309, 329, 0, 328, 319, 204, 273, 274,
	275, 276, 277, 278, 279, 281, 284, 285, 286, 300,
	302, 304, 0, 291, 186, 187, 294, 295, 296, 297,
	298, 299, 197, 271, 0, 236, 237, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 335, 0, 991, 765,
	766, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	0, 351, 349, 350, 352, 91, 92, 109, 109, 405,
	425, 438, 439, 437, 411, 381, 573, 399, 451, 690,
	554, 556, 558, 545, 566, 549, 0, 546, 0, 0,
	540, 604, 0, 0, 481, 485, 0, 487, 488, 0,
	476, 0, -2, 607, 608, 0, 0, 0, 0, 676,
	0, 655, 0, 0, 615, 626, 627, 628, 629, 30,
	530, 0, 701, 0, 0, -2, 0, 0, 38, 0,
	684, 710, 711, 660, 52, 733, 734, 735, 70, 0,
	0, 188, 189, 0, 0, 147, 148, 185, 150, 151,
	0, 0, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 0, 322, 0, 0, 321, 309, 0,
	280, 262, 289, 290, 249, 0, 250, 0, 266, 0,
	0, 0, 0, 336, 337, 338, 0, 340, 341, 342,
	103, 75, 76, 104, 114, 115, 116, 106, 101, 102,
	93, 94, 0, 0, 412, 547, 0, 567, 550, 605,
	479, 486, 482, 0, 0, 661, 0, 261, 261, 640,
	261, 265, 643, 261, 645, 261, 648, 0, 0, 0,
	652, 614, 658, 0, 672, 490, 491, 493, 494, 495,
	503, 0, 505, 36, 0, 701, 691, 703, 705, 0,
	32, 0, 697, 0, 47, 39, 51, 0, 58, 149,
	190, 152, 153, 0, 320, 323, 324, 325, 0, 0,
	321, 282, 0, 260, 0, 0, 0, 332, 261, 0,
	0, 0, 95, 96, 551, 0, 606, 609, 637, 288,
	641, 642, 644, 646, 647, 649, 611, 610, 0, 0,
	0, 656, 674, 0, 0, 0, 0, 0, 510, 0,
	0, 513, 0, 0, 0, 0, 504, 0, 0, 524,
	506, 0, 508, 509, 0, 37, 0, 706, -2, 0,
	0, 0, 0, 50, 0, 72, 0, 0, 0, 0,
	0, 283, 264, 267, 80, 0, 334, 84, 88, 339,
	483, 638, 639, 630, 613, 653, 31, 0, 0, 492,
	499, 0, 502, 511, 512, 514, 0, 516, 0, 518,
	519, 496, 497, 498, 0, 0, 0, 507, 0, 704,
	0, -2, 0, 699, 698, 48, 0, 55, 0, 59,
	315, 315, 0, 0, 90, 333, 90, 90, 0, 0,
	0, 675, 673, 0, 0, 515, 517, 0, 0, 0,
	0, 694, 32, 0, 0, 71, 0, 305, 306, 315,
	0, 64, 81, 82, 83, 109, 0, 0, 65, 85,
	86, 0, 66, 89, 612, 0, 0, 0, 500, 501,
	0, 0, 0, 702, -2, 700, 56, 0, 316, 109,
	312, 0, 0, 307, 315, 0, 79, 77, 73, 74,
	0, 631, 0, 634, 0, 528, 0, 0, 0, 0,
	313, 0, 308, 78, 87, 632, 525, 0, 526, 527,
	57, 311, 314, 0, 529, 0, 633,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 92, 3, 3, 3, 119, 111, 3,
	72, 74, 116, 114, 73, 115, 127, 117, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 320,
	100, 99, 101, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 121, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 122,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 93, 94, 95,
	96, 97, 98, 102, 103, 104, 105, 106, 107, 108,
	109, 112, 113, 118, 120, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1093
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1099
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1101
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1134
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1179
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1192
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1204
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1216
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = ""
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1244
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.optVal = nil
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1339
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1346
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 66:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.str = "hash"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.str = "btree"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = "default"
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1534
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1552
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.str = "default"
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1637
		{
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1642
		{
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = "character set"
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = "char set"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = "default"
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1676
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1974
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2186
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2226
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.optVal = nil
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2576
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2652
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.str = yyDollar[3].str
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2734
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2748
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2768
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2793
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2805
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 307:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2819
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 308:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2830
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2895
		{
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2898
		{
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2901
		{
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2907
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2912
		{
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2944
		{
			// set empty
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.str = yyDollar[1].str
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2970
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2986
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2991
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.byt = 0
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
			yyVAL.byt = 1
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3039
		{
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3041
		{
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3043
		{
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3047
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3063
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3083
		{
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3085
		{
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3095
		{
			yyVAL.statement = &Xa{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3101
		{
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3103
		{
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3105
		{
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.showFilter = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3112
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3122
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3153
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3165
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3169
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3179
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.optVal = nil
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3197
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3202
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3217
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3222
		{
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3224
		{
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3278
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3282
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3308
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3312
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3316
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3327
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3334
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3338
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3342
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3346
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3354
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3358
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3362
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3366
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3370
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3374
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3393
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3403
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3407
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.str = ""
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3427
		{
			yyVAL.str = "full "
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3437
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.showFilter = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3447
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3451
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3456
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3460
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3464
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3470
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3476
		{
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3478
		{
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3482
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3487
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNone
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNoWriteToBinlog
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3495
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionLocal
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3501
		{
			yyVAL.statement = &Optimize{OptimizeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3507
		{
			yyVAL.checkOptionEnum = CheckOptionForUpgrade
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3511
		{
			yyVAL.checkOptionEnum = CheckOptionQuick
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3515
		{
			yyVAL.checkOptionEnum = CheckOptionFast
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3519
		{
			yyVAL.checkOptionEnum = CheckOptionMedium
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3523
		{
			yyVAL.checkOptionEnum = CheckOptionExtended
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3527
		{
			yyVAL.checkOptionEnum = CheckOptionChanged
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3532
		{
			yyVAL.checkOptionList = []CheckOptionEnum{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3536
		{
			yyVAL.checkOptionList = append(yyDollar[1].checkOptionList, yyDollar[2].checkOptionEnum)
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.statement = &Check{Tables: yyDollar[3].tableNames, CheckOptions: yyDollar[4].checkOptionList}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.statement = &Analyze{AnalyzeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3560
		{
			setAllowComments(yylex, true)
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3563
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3569
		{
			yyVAL.bytes2 = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3573
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3579
		{
			yyVAL.str = UnionStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3583
		{
			yyVAL.str = UnionAllStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3587
		{
			yyVAL.str = UnionDistinctStr
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3592
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3596
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3600
		{
			yyVAL.str = SQLCacheStr
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3605
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3609
		{
			yyVAL.str = DistinctStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3614
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3618
		{
			yyVAL.str = StraightJoinHint
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3623
		{
			yyVAL.selectExprs = nil
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3627
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3643
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3651
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3664
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3668
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3675
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3680
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3684
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3704
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3708
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3712
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3718
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3731
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3735
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3739
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3743
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3752
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3757
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3761
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3765
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3772
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3778
		{
			yyVAL.str = JoinStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3782
		{
			yyVAL.str = JoinStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3786
		{
			yyVAL.str = JoinStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3790
		{
			yyVAL.str = StraightJoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3796
		{
			yyVAL.str = LeftJoinStr
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3800
		{
			yyVAL.str = LeftJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.str = RightJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.str = RightJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3814
		{
			yyVAL.str = NaturalJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3818
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3828
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3832
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3838
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3842
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.indexHints = nil
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3851
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3855
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3859
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3865
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3869
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3874
		{
			yyVAL.expr = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3884
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3888
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3892
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3896
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3900
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3904
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3914
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3918
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3924
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3928
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3934
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3942
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3946
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3950
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3954
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3958
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3962
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3976
		{
			yyVAL.str = IsNullStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3980
		{
			yyVAL.str = IsNotNullStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3984
		{
			yyVAL.str = IsTrueStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3988
		{
			yyVAL.str = IsNotTrueStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3992
		{
			yyVAL.str = IsFalseStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3996
		{
			yyVAL.str = IsNotFalseStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4002
		{
			yyVAL.str = EqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4006
		{
			yyVAL.str = LessThanStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4010
		{
			yyVAL.str = GreaterThanStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4014
		{
			yyVAL.str = LessEqualStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4018
		{
			yyVAL.str = GreaterEqualStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4022
		{
			yyVAL.str = NotEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4026
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4041
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4055
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4071
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4075
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4079
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4083
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4087
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4099
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4103
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4107
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4111
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4115
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4119
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4123
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4147
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4151
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4155
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4163
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4177
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4181
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4185
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4203
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4207
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4211
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4225
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4229
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4233
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4237
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 612:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4241
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4245
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4249
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4253
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4267
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4271
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4275
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4280
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4285
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4290
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4295
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4310
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4314
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4318
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4322
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4328
		{
			yyVAL.str = ""
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4332
		{
			yyVAL.str = BooleanModeStr
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4336
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 633:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4340
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.str = QueryExpansionStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4350
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4354
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4360
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4364
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4368
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4372
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4376
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4380
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4386
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4390
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4394
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4398
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4402
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4406
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4410
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4415
		{
			yyVAL.expr = nil
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4419
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4424
		{
			yyVAL.str = string("")
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4428
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4434
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4438
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4444
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4449
		{
			yyVAL.expr = nil
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4453
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4473
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4477
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4481
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4485
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4489
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.expr = &NullVal{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4503
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4512
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4516
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4521
		{
			yyVAL.exprs = nil
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4525
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4530
		{
			yyVAL.expr = nil
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4534
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4539
		{
			yyVAL.orderBy = nil
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4543
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4549
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4553
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4559
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4564
		{
			yyVAL.str = AscScr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4568
		{
			yyVAL.str = AscScr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4572
		{
			yyVAL.str = DescScr
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4577
		{
			yyVAL.limit = nil
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4581
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4585
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4589
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.str = ""
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4598
		{
			yyVAL.str = ForUpdateStr
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4602
		{
			yyVAL.str = ShareModeStr
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4615
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4619
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4623
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4628
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4632
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4636
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4643
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4647
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4651
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4655
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4660
		{
			yyVAL.updateExprs = nil
		}
	case 702:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4664
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4670
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4674
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4680
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4684
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4690
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4696
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4706
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4710
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4716
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4722
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4726
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4732
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4736
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4743
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4747
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4751
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4755
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4759
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4766
		{
			yyVAL.bytes = []byte("charset")
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4772
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4776
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4780
		{
			yyVAL.expr = &Default{}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4786
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4790
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4796
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4800
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4806
		{
			yyVAL.str = ""
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4810
		{
			yyVAL.str = yyDollar[2].str
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4816
		{
			yyVAL.str = yyDollar[3].str
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4822
		{
			yyVAL.str = RepeatableRead
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4826
		{
			yyVAL.str = ReadCommitted
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4830
		{
			yyVAL.str = ReadUncommitted
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4834
		{
			yyVAL.str = Serializable
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4840
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4844
		{
			yyVAL.str = yyDollar[2].str
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4850
		{
			yyVAL.str = TxReadWrite
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4854
		{
			yyVAL.str = TxReadOnly
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4860
		{
			yyVAL.str = SessionStr
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4864
		{
			yyVAL.str = SessionStr
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4868
		{
			yyVAL.str = GlobalStr
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4877
		{
			yyVAL.byt = 0
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4881
		{
			yyVAL.byt = 1
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4886
		{
			yyVAL.byt = 0
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4890
		{
			yyVAL.byt = 1
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4895
		{
			yyVAL.str = ""
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4899
		{
			yyVAL.str = IgnoreStr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4905
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4909
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4913
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4917
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4921
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4925
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4929
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4933
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4937
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4941
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4946
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4950
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4954
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4960
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4964
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4969
		{
			yyVAL.str = IndexStr
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4973
		{
			yyVAL.str = UniqueStr
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4979
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4983
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4990
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4996
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5000
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5007
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5013
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5017
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5254
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5263
		{
			decNesting(yylex)
		}
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5268
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
