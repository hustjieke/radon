//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
	optimizeOptionEnum    OptimizeOptionEnum
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const DO = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALGORITHM = 57362
const BTREE = 57363
const CASCADE = 57364
const CONSTRAINT = 57365
const FULLTEXT = 57366
const HASH = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const INTO = 57384
const DUPLICATE = 57385
const DEFAULT = 57386
const SET = 57387
const LOCK = 57388
const FULL = 57389
const CHECKSUM = 57390
const VALUES = 57391
const LAST_INSERT_ID = 57392
const NEXT = 57393
const VALUE = 57394
const SHARE = 57395
const MODE = 57396
const SQL_NO_CACHE = 57397
const SQL_CACHE = 57398
const JOIN = 57399
const STRAIGHT_JOIN = 57400
const LEFT = 57401
const RIGHT = 57402
const INNER = 57403
const OUTER = 57404
const CROSS = 57405
const NATURAL = 57406
const USE = 57407
const FORCE = 57408
const ON = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const NULL = 57420
const TRUE = 57421
const FALSE = 57422
const OFF = 57423
const OR = 57424
const AND = 57425
const NOT = 57426
const BETWEEN = 57427
const CASE = 57428
const WHEN = 57429
const THEN = 57430
const ELSE = 57431
const END = 57432
const LE = 57433
const GE = 57434
const NE = 57435
const NULL_SAFE_EQUAL = 57436
const IS = 57437
const LIKE = 57438
const REGEXP = 57439
const IN = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const MODIFY = 57457
const COLUMN = 57458
const IF = 57459
const IGNORE = 57460
const INDEX = 57461
const PRIMARY = 57462
const QUICK = 57463
const TABLE = 57464
const TO = 57465
const VIEW = 57466
const USING = 57467
const DESC = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const SHOW = 57471
const DATE = 57472
const ESCAPE = 57473
const HELP = 57474
const REPAIR = 57475
const TRUNCATE = 57476
const OPTIMIZE = 57477
const BIT = 57478
const TINYINT = 57479
const SMALLINT = 57480
const MEDIUMINT = 57481
const INT = 57482
const INTEGER = 57483
const BIGINT = 57484
const INTNUM = 57485
const REAL = 57486
const DOUBLE = 57487
const FLOAT_TYPE = 57488
const DECIMAL = 57489
const NUMERIC = 57490
const TIME = 57491
const TIMESTAMP = 57492
const DATETIME = 57493
const YEAR = 57494
const CHAR = 57495
const VARCHAR = 57496
const BOOL = 57497
const CHARACTER = 57498
const VARBINARY = 57499
const NCHAR = 57500
const CHARSET = 57501
const TEXT = 57502
const TINYTEXT = 57503
const MEDIUMTEXT = 57504
const LONGTEXT = 57505
const BLOB = 57506
const TINYBLOB = 57507
const MEDIUMBLOB = 57508
const LONGBLOB = 57509
const JSON = 57510
const ENUM = 57511
const GEOMETRY = 57512
const POINT = 57513
const LINESTRING = 57514
const POLYGON = 57515
const GEOMETRYCOLLECTION = 57516
const MULTIPOINT = 57517
const MULTILINESTRING = 57518
const MULTIPOLYGON = 57519
const NULLX = 57520
const AUTO_INCREMENT = 57521
const APPROXNUM = 57522
const SIGNED = 57523
const UNSIGNED = 57524
const ZEROFILL = 57525
const FIXED = 57526
const DYNAMIC = 57527
const STORAGE = 57528
const DISK = 57529
const MEMORY = 57530
const COLUMN_FORMAT = 57531
const AVG_ROW_LENGTH = 57532
const COMPRESSION = 57533
const CONNECTION = 57534
const DATA = 57535
const DIRECTORY = 57536
const DELAY_KEY_WRITE = 57537
const ENCRYPTION = 57538
const INSERT_METHOD = 57539
const MAX_ROWS = 57540
const MIN_ROWS = 57541
const PACK_KEYS = 57542
const PASSWORD = 57543
const ROW_FORMAT = 57544
const STATS_AUTO_RECALC = 57545
const STATS_PERSISTENT = 57546
const STATS_SAMPLE_PAGES = 57547
const TABLESPACE = 57548
const DELAYED = 57549
const LOW_PRIORITY = 57550
const HIGH_PRIORITY = 57551
const COMPRESSED = 57552
const REDUNDANT = 57553
const COMPACT = 57554
const TOKUDB_DEFAULT = 57555
const TOKUDB_FAST = 57556
const TOKUDB_SMALL = 57557
const TOKUDB_ZLIB = 57558
const TOKUDB_QUICKLZ = 57559
const TOKUDB_LZMA = 57560
const TOKUDB_SNAPPY = 57561
const TOKUDB_UNCOMPRESSED = 57562
const COLLATION = 57563
const DATABASES = 57564
const TABLES = 57565
const WARNINGS = 57566
const VARIABLES = 57567
const EVENTS = 57568
const BINLOG = 57569
const GTID = 57570
const STATUS = 57571
const COLUMNS = 57572
const FIELDS = 57573
const CURRENT_TIMESTAMP = 57574
const CURRENT_DATE = 57575
const DATABASE = 57576
const SCHEMA = 57577
const CURRENT_TIME = 57578
const LOCALTIME = 57579
const LOCALTIMESTAMP = 57580
const UTC_DATE = 57581
const UTC_TIME = 57582
const UTC_TIMESTAMP = 57583
const REPLACE = 57584
const CONVERT = 57585
const CAST = 57586
const GROUP_CONCAT = 57587
const SEPARATOR = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const FORMAT = 57597
const TREE = 57598
const TRADITIONAL = 57599
const EXTENDED = 57600
const PARTITION = 57601
const PARTITIONS = 57602
const LIST = 57603
const XA = 57604
const DISTRIBUTED = 57605
const ENGINES = 57606
const VERSIONS = 57607
const PROCESSLIST = 57608
const QUERYZ = 57609
const TXNZ = 57610
const KILL = 57611
const ENGINE = 57612
const SINGLE = 57613
const BEGIN = 57614
const START = 57615
const TRANSACTION = 57616
const COMMIT = 57617
const ROLLBACK = 57618
const GLOBAL = 57619
const LOCAL = 57620
const SESSION = 57621
const NAMES = 57622
const ISOLATION = 57623
const LEVEL = 57624
const READ = 57625
const WRITE = 57626
const ONLY = 57627
const REPEATABLE = 57628
const COMMITTED = 57629
const UNCOMMITTED = 57630
const SERIALIZABLE = 57631
const NO_WRITE_TO_BINLOG = 57632
const RADON = 57633
const ATTACH = 57634
const ATTACHLIST = 57635
const DETACH = 57636
const RESHARD = 57637
const CLEANUP = 57638
const RECOVER = 57639
const REBALANCE = 57640

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"DO",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"VIEW",
	"USING",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NO_WRITE_TO_BINLOG",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5218

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 204,
	6, 378,
	7, 378,
	8, 378,
	9, 378,
	19, 378,
	68, 378,
	259, 378,
	-2, 922,
	-1, 410,
	123, 765,
	-2, 761,
	-1, 411,
	123, 766,
	-2, 762,
	-1, 446,
	95, 930,
	-2, 735,
	-1, 452,
	95, 784,
	-2, 713,
	-1, 473,
	1, 98,
	316, 98,
	-2, 108,
	-1, 513,
	5, 32,
	-2, 369,
	-1, 642,
	120, 108,
	170, 108,
	173, 108,
	176, 108,
	-2, 120,
	-1, 693,
	1, 98,
	316, 98,
	-2, 108,
	-1, 701,
	1, 99,
	316, 99,
	-2, 108,
	-1, 788,
	123, 768,
	-2, 764,
	-1, 855,
	120, 108,
	170, 108,
	173, 108,
	176, 108,
	-2, 121,
	-1, 912,
	36, 328,
	68, 328,
	71, 328,
	136, 328,
	-2, 927,
	-1, 1032,
	5, 33,
	-2, 563,
	-1, 1219,
	5, 32,
	-2, 684,
	-1, 1419,
	5, 33,
	-2, 685,
	-1, 1469,
	5, 32,
	-2, 687,
	-1, 1532,
	5, 33,
	-2, 688,
}

const yyPrivate = 57344

const yyLast = 11755

var yyAct = [...]int{

	411, 388, 1550, 1475, 1349, 1506, 580, 389, 56, 1170,
	463, 364, 829, 1380, 1411, 386, 1512, 1350, 947, 1340,
	1397, 1346, 1304, 1106, 1129, 834, 1408, 1171, 1379, 998,
	447, 1172, 1081, 1108, 1538, 1277, 416, 961, 74, 1216,
	462, 779, 63, 1339, 120, 830, 120, 210, 451, 1194,
	782, 772, 1017, 1119, 787, 511, 714, 734, 1025, 1144,
	363, 355, 916, 627, 56, 986, 703, 856, 628, 366,
	781, 607, 120, 421, 455, 799, 465, 1060, 612, 749,
	506, 702, 869, 700, 442, 957, 476, 440, 626, 450,
	941, 825, 120, 1109, 120, 209, 362, 715, 425, 474,
	479, 443, 618, 634, 84, 67, 591, 605, 62, 991,
	115, 353, 532, 533, 1074, 705, 120, 1073, 1229, 414,
	1075, 1230, 1231, 843, 844, 629, 630, 630, 842, 513,
	3, 413, 629, 344, 531, 853, 69, 70, 71, 72,
	73, 347, 349, 348, 350, 351, 784, 352, 460, 728,
	1427, 1476, 459, 1061, 1008, 1571, 1525, 342, 1569, 1489,
	458, 1561, 1524, 1537, 1488, 1207, 457, 719, 1335, 484,
	86, 498, 995, 29, 30, 32, 33, 54, 90, 483,
	1174, 116, 29, 30, 32, 33, 415, 1514, 1092, 981,
	1122, 29, 30, 32, 33, 1123, 1124, 492, 477, 1091,
	465, 356, 435, 434, 512, 723, 1173, 1139, 56, 56,
	509, 940, 34, 1389, 1135, 42, 1539, 341, 980, 1442,
	546, 545, 555, 556, 548, 549, 550, 551, 552, 553,
	554, 547, 43, 1134, 557, 60, 721, 729, 730, 1300,
	1515, 948, 1330, 488, 60, 983, 29, 30, 32, 33,
	490, 491, 1328, 60, 979, 1279, 736, 518, 1158, 472,
	1115, 1116, 1117, 78, 431, 430, 432, 93, 1118, 384,
	385, 79, 985, 1084, 83, 1498, 92, 910, 1279, 1111,
	88, 485, 117, 1462, 1464, 1156, 85, 1497, 736, 557,
	1496, 470, 469, 36, 37, 38, 86, 40, 468, 480,
	467, 976, 974, 970, 1161, 973, 975, 1502, 60, 1422,
	59, 58, 57, 41, 1160, 948, 46, 53, 39, 55,
	1320, 1159, 990, 990, 1067, 989, 989, 1031, 988, 988,
	546, 545, 555, 556, 548, 549, 550, 551, 552, 553,
	554, 547, 1029, 578, 557, 520, 1035, 978, 850, 524,
	526, 120, 537, 1463, 1082, 525, 525, 735, 569, 570,
	1554, 809, 536, 535, 547, 892, 1487, 557, 566, 568,
	977, 704, 1018, 722, 1136, 1137, 814, 909, 80, 537,
	1286, 1110, 1443, 493, 1157, 1155, 1066, 724, 852, 735,
	1132, 1133, 633, 1000, 577, 81, 82, 581, 582, 583,
	584, 585, 586, 587, 1540, 590, 592, 592, 592, 592,
	592, 592, 592, 592, 600, 601, 602, 603, 521, 1036,
	536, 535, 536, 535, 1310, 1209, 31, 800, 1520, 56,
	1287, 567, 694, 1114, 972, 31, 1122, 537, 120, 537,
	1174, 1123, 1124, 455, 31, 982, 44, 1514, 519, 455,
	455, 1308, 620, 47, 756, 1556, 48, 49, 450, 51,
	50, 971, 614, 1567, 635, 635, 1173, 476, 754, 755,
	753, 1195, 120, 120, 1559, 52, 535, 494, 815, 811,
	476, 536, 535, 1313, 999, 120, 120, 466, 1211, 1477,
	81, 82, 537, 120, 1037, 1378, 1174, 1197, 537, 31,
	1515, 1309, 800, 1514, 1042, 538, 593, 594, 595, 596,
	597, 598, 599, 1312, 1199, 1274, 1203, 60, 1198, 579,
	1196, 120, 1173, 604, 1544, 1201, 1377, 752, 616, 1392,
	810, 744, 746, 747, 621, 1200, 356, 745, 622, 1251,
	536, 535, 750, 589, 631, 1273, 536, 535, 1202, 1204,
	1568, 615, 114, 638, 113, 718, 1515, 537, 1010, 1011,
	1012, 1250, 1516, 537, 610, 613, 693, 1374, 471, 727,
	1130, 1375, 1131, 111, 1249, 725, 56, 455, 706, 708,
	550, 551, 552, 553, 554, 547, 1272, 716, 557, 581,
	1270, 455, 778, 1246, 450, 1253, 1241, 110, 1240, 378,
	377, 379, 380, 381, 382, 120, 801, 1239, 383, 786,
	751, 773, 1148, 774, 606, 1147, 1271, 1140, 455, 1007,
	1269, 522, 120, 120, 359, 1252, 455, 788, 1376, 1365,
	1364, 1254, 1247, 820, 1243, 831, 1242, 1235, 1177, 832,
	1176, 450, 1145, 804, 465, 1127, 1563, 606, 851, 1560,
	1505, 816, 95, 792, 793, 1440, 1255, 796, 1107, 1306,
	1436, 1542, 112, 1436, 1508, 103, 776, 777, 1503, 606,
	1434, 803, 356, 805, 806, 949, 950, 951, 1436, 1479,
	1433, 740, 741, 742, 904, 807, 1305, 789, 790, 1302,
	797, 1436, 1478, 1395, 606, 1436, 606, 1432, 579, 1299,
	802, 1248, 109, 1423, 606, 1421, 606, 120, 120, 883,
	837, 791, 1076, 836, 828, 818, 120, 120, 1293, 1292,
	120, 845, 775, 817, 1289, 1290, 1289, 1288, 356, 697,
	963, 794, 795, 1023, 606, 120, 696, 906, 695, 29,
	478, 1169, 943, 944, 945, 946, 1347, 994, 1065, 1168,
	534, 606, 643, 642, 1285, 750, 1065, 1417, 954, 955,
	956, 534, 1395, 1291, 108, 96, 719, 107, 105, 835,
	94, 1023, 102, 841, 1003, 959, 960, 964, 1223, 1215,
	848, 839, 1218, 984, 812, 455, 987, 992, 719, 1399,
	1402, 1403, 1404, 1400, 1030, 1401, 1405, 29, 625, 1493,
	1027, 60, 64, 422, 60, 1481, 942, 97, 106, 100,
	101, 104, 1430, 1257, 1256, 548, 549, 550, 551, 552,
	553, 554, 547, 751, 29, 557, 1065, 120, 1399, 1402,
	1403, 1404, 1400, 1013, 1401, 1405, 29, 1023, 455, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1371, 1022, 465, 450, 1366, 1064, 1023, 962, 75, 60,
	1078, 1079, 1077, 1217, 1283, 60, 958, 1218, 1039, 953,
	952, 1492, 1347, 968, 1041, 967, 966, 1068, 707, 1468,
	27, 824, 1495, 1020, 1455, 1453, 60, 1021, 1053, 1456,
	1454, 1052, 1494, 1457, 1059, 1403, 1404, 1452, 60, 1032,
	1033, 1034, 1451, 1549, 1038, 1071, 1063, 1523, 1070, 1044,
	1212, 1045, 1046, 1047, 1048, 1083, 1049, 1086, 1087, 1088,
	1089, 1090, 883, 1080, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 426, 427, 631,
	619, 1535, 1058, 608, 1057, 1174, 420, 1043, 1384, 1085,
	1173, 1165, 1164, 617, 1143, 639, 623, 1050, 1051, 613,
	1415, 965, 1141, 1142, 423, 424, 709, 120, 120, 120,
	609, 1173, 1407, 76, 619, 1466, 1281, 1126, 1113, 1125,
	1184, 1369, 1069, 1112, 1557, 1368, 1548, 1174, 417, 1446,
	1120, 1370, 571, 572, 573, 574, 575, 576, 641, 640,
	546, 545, 555, 556, 548, 549, 550, 551, 552, 553,
	554, 547, 89, 1146, 557, 1056, 56, 1547, 1162, 1163,
	64, 1546, 418, 1055, 1166, 1445, 1394, 455, 1153, 1180,
	835, 711, 455, 437, 1499, 1128, 808, 66, 517, 7,
	514, 6, 1027, 516, 5, 450, 68, 450, 515, 4,
	387, 61, 1, 456, 1474, 120, 701, 915, 914, 1179,
	786, 1545, 1193, 77, 1181, 1536, 1511, 1183, 1220, 1221,
	1513, 1220, 1192, 1518, 1188, 1485, 1482, 831, 788, 465,
	465, 832, 1208, 450, 1191, 1189, 1484, 1206, 1205, 1233,
	1234, 855, 854, 461, 118, 905, 202, 921, 1227, 920,
	919, 917, 1138, 1222, 939, 1228, 1276, 1224, 1236, 1307,
	206, 1225, 1311, 926, 925, 849, 788, 1237, 1238, 880,
	879, 878, 202, 877, 1244, 1245, 876, 875, 874, 873,
	1187, 872, 1280, 871, 870, 868, 867, 866, 865, 864,
	863, 1278, 202, 862, 202, 1282, 861, 1178, 857, 860,
	859, 1426, 858, 924, 120, 922, 918, 1294, 1295, 1296,
	648, 646, 465, 647, 748, 645, 202, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 1284, 650, 649, 1232, 644, 1406, 473, 1210,
	1219, 1410, 1024, 1219, 91, 1167, 340, 1154, 1301, 969,
	1315, 45, 1303, 1314, 87, 565, 1316, 1317, 1054, 1318,
	1121, 448, 1072, 1226, 840, 1333, 120, 838, 439, 438,
	1351, 465, 465, 1344, 1019, 1356, 1352, 1354, 56, 831,
	1348, 1355, 1357, 832, 813, 831, 1358, 1326, 611, 832,
	1337, 1444, 1338, 1393, 546, 545, 555, 556, 548, 549,
	550, 551, 552, 553, 554, 547, 1040, 588, 557, 798,
	365, 1359, 1362, 1363, 546, 545, 555, 556, 548, 549,
	550, 551, 552, 553, 554, 547, 743, 376, 557, 373,
	375, 374, 819, 539, 357, 1343, 1323, 1324, 1461, 1325,
	1342, 412, 1327, 720, 1329, 455, 455, 455, 200, 508,
	1321, 99, 1322, 98, 489, 1398, 1373, 1396, 1341, 1214,
	1381, 1381, 1381, 1331, 1332, 710, 1278, 1372, 1334, 1441,
	823, 455, 433, 429, 1382, 1383, 555, 556, 548, 549,
	550, 551, 552, 553, 554, 547, 450, 923, 557, 1385,
	1386, 1360, 1361, 1388, 65, 120, 120, 428, 26, 15,
	1353, 1193, 1409, 24, 16, 14, 13, 35, 1336, 11,
	10, 9, 25, 8, 419, 28, 2, 455, 1425, 22,
	1416, 23, 455, 21, 20, 19, 18, 17, 12, 1014,
	1015, 1016, 1381, 907, 908, 1367, 0, 1381, 0, 0,
	0, 0, 0, 0, 0, 1428, 120, 120, 120, 120,
	1429, 202, 0, 1344, 1344, 1344, 1344, 120, 1278, 1431,
	120, 0, 0, 120, 1343, 0, 1448, 1409, 1450, 1351,
	0, 0, 465, 455, 465, 1352, 1458, 1465, 1470, 0,
	0, 455, 1471, 0, 1473, 1467, 0, 455, 1472, 1447,
	0, 1449, 1391, 0, 0, 0, 1381, 0, 0, 0,
	1483, 0, 1381, 1491, 0, 0, 0, 0, 0, 1480,
	1418, 1419, 1420, 0, 1424, 1343, 1343, 1343, 1343, 0,
	1351, 0, 1437, 1500, 579, 0, 1352, 0, 56, 1343,
	0, 0, 455, 0, 0, 1507, 0, 1435, 202, 0,
	1438, 1439, 1510, 0, 1517, 1521, 0, 1381, 0, 356,
	0, 1519, 1522, 465, 1528, 1529, 1530, 1534, 0, 198,
	1509, 831, 1531, 1533, 1541, 832, 1460, 0, 0, 0,
	0, 894, 202, 202, 0, 0, 0, 0, 0, 455,
	455, 455, 1552, 1553, 0, 202, 713, 0, 705, 791,
	0, 0, 886, 202, 1551, 1551, 1551, 1543, 1558, 1486,
	1469, 0, 0, 1345, 0, 0, 1566, 0, 343, 0,
	345, 346, 525, 354, 455, 0, 0, 0, 0, 0,
	1555, 726, 0, 0, 881, 0, 0, 0, 0, 1570,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 356, 0, 0, 0, 0, 0, 199,
	1501, 0, 0, 0, 0, 0, 486, 487, 0, 1532,
	495, 496, 497, 0, 499, 500, 501, 502, 503, 504,
	505, 0, 0, 0, 0, 436, 0, 0, 785, 726,
	890, 0, 0, 785, 785, 0, 0, 785, 0, 1526,
	1527, 0, 0, 1185, 1186, 481, 0, 482, 0, 0,
	0, 785, 785, 785, 785, 202, 0, 0, 1562, 0,
	1564, 1565, 0, 0, 0, 0, 0, 0, 0, 507,
	0, 0, 202, 202, 833, 0, 0, 0, 665, 545,
	555, 556, 548, 549, 550, 551, 552, 553, 554, 547,
	884, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 887, 888, 889, 0, 891, 892, 893, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 541, 0,
	544, 0, 0, 0, 0, 0, 558, 559, 560, 561,
	562, 563, 564, 0, 542, 543, 540, 546, 545, 555,
	556, 548, 549, 550, 551, 552, 553, 554, 547, 0,
	0, 557, 0, 0, 653, 0, 0, 202, 202, 0,
	0, 0, 0, 0, 0, 0, 1001, 202, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 882, 0, 0, 0, 202, 679, 682, 683, 684,
	685, 686, 687, 0, 688, 689, 690, 691, 692, 667,
	668, 669, 670, 651, 652, 680, 0, 654, 0, 1319,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	671, 672, 673, 674, 675, 676, 677, 678, 0, 0,
	0, 785, 0, 933, 932, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 523, 0, 0, 0, 0, 527,
	0, 529, 530, 0, 0, 935, 0, 0, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 202, 934, 927,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1390, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 202, 202,
	0, 0, 0, 0, 0, 698, 699, 0, 0, 0,
	0, 0, 731, 0, 732, 0, 733, 0, 712, 0,
	0, 737, 738, 739, 0, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 0, 0, 0,
	726, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 997, 0, 0, 0, 0, 1004, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 122, 0, 0, 0, 148, 0, 152, 155,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	507, 993, 0, 0, 0, 138, 202, 0, 833, 0,
	1002, 0, 158, 1005, 833, 176, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1009, 0,
	0, 0, 0, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 545,
	555, 556, 548, 549, 550, 551, 552, 553, 554, 547,
	0, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 132,
	0, 0, 174, 187, 0, 124, 0, 0, 0, 0,
	1062, 0, 0, 0, 137, 146, 0, 0, 183, 184,
	133, 190, 0, 0, 125, 202, 1413, 167, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 154, 140, 149,
	171, 159, 172, 150, 165, 164, 166, 0, 0, 0,
	177, 0, 0, 145, 139, 181, 136, 162, 129, 123,
	0, 130, 131, 135, 134, 0, 153, 160, 163, 169,
	170, 175, 0, 0, 0, 0, 202, 202, 202, 202,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	202, 0, 0, 1413, 0, 0, 0, 0, 180, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 1152,
	0, 0, 0, 0, 0, 0, 0, 121, 126, 157,
	0, 173, 142, 188, 147, 186, 185, 143, 0, 0,
	0, 0, 0, 0, 1175, 0, 0, 0, 0, 141,
	178, 0, 179, 0, 0, 0, 151, 0, 0, 1182,
	1149, 1150, 1151, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 194, 193, 195, 127, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 307, 264, 326, 238, 243, 254, 338, 256,
	257, 294, 219, 274, 168, 252, 122, 0, 220, 0,
	148, 0, 152, 155, 156, 0, 304, 0, 1213, 0,
	315, 324, 271, 0, 241, 212, 249, 213, 268, 138,
	237, 309, 277, 255, 0, 332, 158, 286, 0, 176,
	161, 0, 0, 270, 312, 272, 305, 263, 295, 230,
	285, 327, 253, 291, 0, 0, 0, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 288, 321, 251,
	290, 293, 211, 287, 1298, 215, 221, 337, 319, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 269, 273,
	301, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 284, 0, 0, 0, 225, 217, 267, 0,
	0, 0, 229, 0, 244, 302, 0, 1297, 0, 0,
	259, 260, 262, 298, 297, 313, 320, 189, 328, 239,
	240, 250, 310, 132, 248, 258, 174, 187, 292, 124,
	317, 311, 282, 265, 266, 216, 0, 300, 137, 146,
	236, 289, 183, 184, 133, 190, 222, 334, 125, 453,
	333, 167, 452, 182, 318, 283, 279, 218, 316, 281,
	278, 154, 140, 149, 171, 159, 172, 150, 165, 164,
	166, 0, 214, 0, 177, 325, 339, 145, 139, 181,
	136, 162, 129, 123, 227, 130, 131, 135, 134, 0,
	153, 160, 163, 169, 170, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 235, 314, 0, 0, 0,
	0, 0, 180, 226, 144, 233, 231, 234, 306, 232,
	275, 276, 329, 330, 331, 303, 228, 0, 0, 308,
	280, 121, 126, 157, 336, 173, 142, 188, 147, 186,
	185, 143, 0, 0, 0, 0, 0, 247, 335, 299,
	296, 322, 0, 141, 178, 0, 179, 441, 0, 0,
	446, 444, 445, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 194, 193, 195, 127,
	196, 197, 323, 307, 264, 326, 238, 243, 254, 338,
	256, 257, 294, 219, 274, 168, 252, 122, 0, 220,
	0, 148, 0, 152, 155, 156, 0, 304, 0, 0,
	0, 315, 324, 271, 0, 241, 212, 249, 213, 268,
	138, 237, 309, 277, 255, 0, 332, 158, 286, 0,
	176, 161, 0, 0, 270, 312, 272, 305, 263, 295,
	230, 285, 327, 253, 291, 0, 0, 0, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 288, 321,
	251, 290, 293, 211, 287, 0, 215, 221, 337, 319,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 269,
	273, 301, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 242, 0, 284, 0, 0, 0, 225, 217, 267,
	0, 0, 0, 229, 0, 244, 302, 0, 0, 0,
	0, 259, 260, 262, 298, 297, 313, 320, 189, 328,
	239, 240, 250, 310, 132, 248, 258, 174, 187, 292,
	124, 317, 311, 282, 265, 266, 216, 0, 300, 137,
	146, 236, 289, 183, 184, 133, 190, 222, 334, 125,
	453, 333, 167, 452, 182, 318, 283, 279, 218, 316,
	281, 278, 154, 140, 149, 171, 159, 172, 150, 165,
	164, 166, 0, 214, 0, 177, 325, 339, 145, 139,
	181, 136, 162, 129, 123, 227, 130, 131, 135, 134,
	0, 153, 160, 163, 169, 170, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 235, 314, 0, 0,
	0, 0, 0, 180, 226, 144, 233, 231, 234, 306,
	232, 275, 276, 329, 330, 331, 303, 228, 0, 0,
	308, 280, 121, 126, 157, 336, 173, 142, 188, 147,
	186, 185, 143, 0, 0, 0, 0, 0, 247, 335,
	299, 296, 322, 0, 141, 178, 0, 179, 0, 0,
	0, 446, 444, 445, 449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 194, 193, 195,
	127, 196, 197, 323, 307, 264, 326, 238, 243, 254,
	338, 256, 257, 294, 219, 274, 168, 252, 122, 0,
	220, 0, 148, 0, 152, 155, 156, 0, 304, 0,
	0, 0, 315, 324, 271, 0, 241, 212, 249, 213,
	268, 138, 237, 309, 277, 255, 0, 332, 158, 286,
	0, 176, 161, 0, 0, 270, 312, 272, 305, 263,
	295, 230, 285, 327, 253, 291, 0, 0, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 288,
	321, 251, 290, 293, 211, 287, 0, 215, 221, 337,
	319, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	269, 273, 301, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 0, 284, 0, 0, 0, 225, 217,
	267, 0, 0, 0, 229, 0, 244, 302, 0, 0,
	0, 0, 259, 260, 262, 298, 297, 313, 320, 189,
	328, 239, 240, 250, 310, 132, 248, 258, 174, 187,
	292, 124, 317, 311, 282, 265, 266, 216, 0, 300,
	137, 146, 236, 289, 183, 184, 133, 190, 222, 334,
	125, 453, 333, 167, 452, 182, 318, 283, 279, 218,
	316, 281, 278, 154, 140, 149, 171, 159, 172, 150,
	165, 164, 166, 0, 214, 0, 177, 325, 339, 145,
	139, 181, 136, 162, 129, 123, 227, 130, 131, 135,
	134, 0, 153, 160, 163, 169, 170, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 235, 314, 0,
	0, 0, 0, 0, 180, 226, 144, 233, 231, 234,
	306, 232, 275, 276, 329, 330, 331, 303, 228, 0,
	0, 308, 280, 121, 126, 157, 336, 173, 142, 188,
	147, 186, 185, 143, 0, 0, 0, 0, 0, 247,
	335, 299, 296, 322, 0, 141, 178, 0, 179, 632,
	0, 0, 151, 0, 0, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 194, 193,
	195, 127, 196, 197, 323, 307, 264, 326, 238, 243,
	254, 338, 256, 257, 294, 219, 274, 168, 252, 122,
	0, 220, 0, 148, 0, 152, 155, 156, 0, 304,
	0, 0, 0, 315, 324, 271, 0, 241, 212, 249,
	213, 268, 138, 237, 309, 277, 255, 0, 332, 158,
	286, 0, 176, 161, 0, 0, 270, 312, 272, 305,
	263, 295, 230, 285, 327, 253, 291, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	288, 321, 251, 290, 293, 211, 287, 0, 215, 221,
	337, 319, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 269, 273, 301, 261, 0, 0, 0, 0, 0,
	0, 1387, 0, 242, 0, 284, 0, 0, 0, 225,
	217, 267, 0, 0, 0, 229, 0, 244, 302, 0,
	0, 0, 0, 259, 260, 262, 298, 297, 313, 320,
	189, 328, 239, 240, 250, 310, 132, 248, 258, 174,
	187, 292, 124, 317, 311, 282, 265, 266, 216, 0,
	300, 137, 146, 236, 289, 183, 184, 133, 190, 222,
	334, 125, 223, 333, 167, 224, 182, 318, 283, 279,
	218, 316, 281, 278, 154, 140, 149, 171, 159, 172,
	150, 165, 164, 166, 0, 214, 0, 177, 325, 339,
	145, 139, 181, 136, 162, 129, 123, 227, 130, 131,
	135, 134, 0, 153, 160, 163, 169, 170, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 314,
	0, 0, 0, 0, 0, 180, 226, 144, 233, 231,
	234, 306, 232, 275, 276, 329, 330, 331, 303, 228,
	0, 0, 308, 280, 121, 126, 157, 336, 173, 142,
	188, 147, 186, 185, 143, 0, 0, 0, 0, 0,
	247, 335, 299, 296, 322, 0, 141, 178, 0, 179,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 194,
	193, 195, 127, 196, 197, 323, 307, 264, 326, 238,
	243, 254, 338, 256, 257, 294, 219, 274, 168, 252,
	122, 0, 220, 0, 148, 0, 152, 155, 156, 0,
	304, 0, 0, 0, 315, 324, 271, 0, 241, 212,
	249, 213, 268, 138, 237, 309, 277, 255, 0, 332,
	158, 286, 0, 176, 161, 0, 0, 270, 312, 272,
	305, 263, 295, 230, 285, 327, 253, 291, 0, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 288, 321, 251, 290, 293, 211, 287, 0, 215,
	221, 337, 319, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 269, 273, 301, 261, 0, 0, 0, 0,
	0, 0, 1190, 0, 242, 0, 284, 0, 0, 0,
	225, 217, 267, 0, 0, 0, 229, 0, 244, 302,
	0, 0, 0, 0, 259, 260, 262, 298, 297, 313,
	320, 189, 328, 239, 240, 250, 310, 132, 248, 258,
	174, 187, 292, 124, 317, 311, 282, 265, 266, 216,
	0, 300, 137, 146, 236, 289, 183, 184, 133, 190,
	222, 334, 125, 223, 333, 167, 224, 182, 318, 283,
	279, 218, 316, 281, 278, 154, 140, 149, 171, 159,
	172, 150, 165, 164, 166, 0, 214, 0, 177, 325,
	339, 145, 139, 181, 136, 162, 129, 123, 227, 130,
	131, 135, 134, 0, 153, 160, 163, 169, 170, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 235,
	314, 0, 0, 0, 0, 0, 180, 226, 144, 233,
	231, 234, 306, 232, 275, 276, 329, 330, 331, 303,
	228, 0, 0, 308, 280, 121, 126, 157, 336, 173,
	142, 188, 147, 186, 185, 143, 0, 0, 0, 0,
	0, 247, 335, 299, 296, 322, 0, 141, 178, 0,
	179, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	194, 193, 195, 127, 196, 197, 323, 307, 264, 326,
	238, 243, 254, 338, 256, 257, 294, 219, 274, 168,
	252, 122, 0, 220, 0, 148, 0, 152, 155, 156,
	0, 304, 0, 0, 0, 315, 324, 271, 0, 241,
	212, 249, 213, 268, 138, 237, 309, 277, 255, 0,
	332, 158, 286, 0, 176, 161, 0, 0, 270, 312,
	272, 305, 263, 295, 230, 285, 327, 253, 291, 0,
	0, 0, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 288, 321, 251, 290, 293, 211, 287, 0,
	215, 221, 337, 319, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 269, 273, 301, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 284, 0, 0,
	0, 225, 217, 267, 0, 0, 0, 229, 0, 244,
	302, 0, 0, 0, 0, 259, 260, 262, 298, 297,
	313, 320, 189, 328, 239, 240, 250, 310, 132, 248,
	258, 174, 187, 292, 124, 317, 311, 282, 265, 266,
	216, 0, 300, 137, 146, 236, 289, 183, 184, 133,
	190, 222, 334, 125, 453, 333, 167, 452, 182, 318,
	283, 279, 218, 316, 281, 278, 154, 140, 149, 171,
	159, 172, 150, 165, 164, 166, 0, 214, 0, 177,
	325, 339, 145, 139, 181, 136, 162, 129, 123, 227,
	130, 131, 135, 134, 0, 153, 160, 163, 169, 170,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	235, 314, 0, 0, 0, 0, 0, 180, 226, 144,
	233, 231, 234, 306, 232, 275, 276, 329, 330, 331,
	303, 228, 0, 0, 308, 280, 121, 126, 157, 336,
	173, 142, 188, 147, 186, 185, 143, 0, 0, 0,
	0, 0, 247, 335, 299, 296, 322, 0, 141, 178,
	0, 179, 0, 0, 0, 151, 0, 0, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	192, 194, 193, 195, 127, 196, 197, 323, 307, 264,
	326, 238, 243, 254, 338, 256, 257, 294, 219, 274,
	168, 252, 122, 0, 220, 0, 148, 0, 152, 155,
	156, 0, 304, 0, 0, 0, 315, 324, 271, 0,
	241, 212, 249, 213, 268, 138, 237, 309, 277, 255,
	0, 332, 158, 286, 0, 176, 161, 0, 0, 270,
	312, 272, 305, 263, 295, 230, 285, 327, 253, 291,
	0, 0, 0, 207, 0, 208, 0, 0, 0, 0,
	0, 0, 128, 288, 321, 251, 290, 293, 211, 287,
	0, 215, 221, 337, 319, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 269, 273, 301, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 0, 284, 0,
	0, 0, 225, 217, 267, 0, 0, 0, 229, 0,
	244, 302, 0, 0, 0, 0, 259, 260, 262, 298,
	297, 313, 320, 189, 328, 239, 240, 250, 310, 132,
	248, 258, 174, 187, 292, 124, 317, 311, 282, 265,
	266, 216, 0, 300, 137, 146, 236, 289, 183, 184,
	133, 190, 222, 334, 125, 223, 333, 167, 224, 182,
	318, 283, 279, 218, 316, 281, 278, 154, 140, 149,
	171, 159, 172, 150, 165, 164, 166, 0, 214, 0,
	177, 325, 339, 145, 139, 181, 136, 162, 129, 123,
	227, 130, 131, 135, 134, 0, 153, 160, 163, 169,
	170, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 235, 314, 0, 0, 0, 0, 0, 180, 226,
	144, 233, 231, 234, 306, 232, 275, 276, 329, 330,
	331, 303, 228, 0, 0, 308, 280, 121, 126, 157,
	336, 173, 142, 188, 147, 186, 185, 143, 0, 0,
	0, 0, 0, 247, 335, 299, 296, 322, 0, 141,
	178, 0, 179, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 194, 193, 195, 127, 196, 197, 323, 307,
	264, 326, 238, 243, 254, 338, 256, 257, 294, 219,
	274, 168, 252, 122, 0, 220, 0, 148, 0, 152,
	155, 156, 0, 304, 0, 0, 0, 315, 324, 271,
	0, 241, 212, 249, 213, 268, 138, 237, 309, 277,
	255, 0, 332, 158, 286, 0, 176, 161, 0, 0,
	270, 312, 272, 305, 263, 295, 230, 285, 327, 253,
	291, 0, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 288, 321, 251, 290, 293, 211,
	287, 0, 215, 221, 337, 319, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 269, 273, 301, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 242, 0, 284,
	0, 0, 0, 225, 217, 267, 0, 0, 0, 229,
	0, 244, 302, 0, 0, 0, 0, 259, 260, 262,
	298, 297, 313, 320, 189, 328, 239, 240, 250, 310,
	132, 248, 258, 174, 187, 292, 124, 317, 311, 282,
	265, 266, 216, 0, 300, 137, 146, 236, 289, 183,
	184, 133, 190, 222, 334, 125, 223, 333, 167, 224,
	182, 318, 283, 279, 218, 316, 281, 278, 154, 140,
	149, 171, 159, 172, 150, 165, 164, 166, 0, 214,
	0, 177, 325, 339, 145, 139, 181, 136, 162, 129,
	123, 227, 130, 131, 135, 134, 0, 153, 160, 163,
	169, 170, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 235, 314, 0, 0, 0, 0, 0, 180,
	226, 144, 233, 231, 234, 306, 232, 275, 276, 329,
	330, 331, 303, 228, 0, 0, 308, 280, 121, 126,
	157, 336, 173, 142, 188, 147, 186, 185, 143, 0,
	0, 0, 0, 0, 247, 335, 299, 296, 322, 0,
	141, 178, 0, 179, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 194, 193, 195, 127, 196, 197, 323,
	307, 264, 326, 238, 243, 254, 338, 256, 257, 294,
	219, 274, 168, 252, 122, 0, 220, 0, 148, 0,
	152, 155, 156, 0, 304, 0, 0, 0, 315, 324,
	271, 0, 241, 212, 249, 213, 268, 138, 237, 309,
	277, 255, 0, 332, 158, 286, 0, 176, 161, 0,
	0, 270, 312, 272, 305, 263, 295, 230, 285, 327,
	253, 291, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 288, 321, 251, 290, 293,
	211, 287, 0, 215, 221, 337, 319, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 269, 273, 301, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 0,
	284, 0, 0, 0, 225, 217, 267, 0, 0, 0,
	229, 0, 244, 302, 0, 0, 0, 0, 259, 260,
	262, 298, 297, 313, 320, 189, 328, 239, 240, 250,
	310, 132, 248, 258, 174, 187, 292, 124, 317, 311,
	282, 265, 266, 216, 0, 300, 137, 146, 236, 289,
	183, 184, 133, 190, 222, 334, 125, 223, 333, 167,
	224, 182, 318, 283, 279, 218, 316, 281, 278, 154,
	140, 149, 171, 159, 172, 150, 165, 164, 166, 0,
	214, 0, 177, 325, 339, 145, 139, 181, 136, 162,
	129, 123, 227, 130, 131, 135, 134, 0, 153, 160,
	163, 169, 170, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 314, 0, 0, 0, 0, 0,
	180, 226, 144, 233, 231, 234, 306, 232, 275, 276,
	329, 330, 331, 303, 228, 0, 0, 308, 280, 121,
	126, 157, 336, 173, 142, 188, 147, 186, 185, 143,
	0, 0, 0, 0, 0, 247, 335, 299, 296, 322,
	0, 141, 178, 0, 179, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 194, 193, 195, 127, 196, 197,
	323, 307, 264, 326, 238, 243, 254, 338, 256, 257,
	294, 219, 274, 168, 252, 122, 0, 220, 0, 148,
	0, 152, 155, 156, 0, 304, 0, 0, 0, 315,
	324, 271, 0, 241, 212, 249, 213, 268, 138, 237,
	309, 277, 255, 0, 332, 158, 286, 0, 176, 161,
	0, 0, 270, 312, 272, 305, 263, 295, 230, 285,
	327, 253, 291, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 288, 321, 251, 290,
	293, 211, 287, 0, 215, 221, 337, 319, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 269, 273, 301,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 284, 0, 0, 0, 225, 217, 267, 0, 0,
	0, 229, 0, 244, 302, 0, 0, 0, 0, 259,
	260, 262, 298, 297, 313, 320, 189, 328, 239, 240,
	250, 310, 132, 248, 258, 174, 187, 292, 124, 317,
	311, 282, 265, 266, 216, 0, 300, 137, 146, 236,
	289, 183, 184, 133, 190, 222, 334, 125, 223, 333,
	167, 224, 182, 318, 283, 279, 218, 316, 281, 278,
	154, 140, 149, 171, 159, 172, 150, 165, 164, 166,
	0, 214, 0, 177, 325, 339, 145, 139, 181, 136,
	162, 129, 123, 227, 130, 131, 135, 134, 0, 153,
	160, 163, 169, 170, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 314, 0, 0, 0, 0,
	0, 180, 226, 144, 233, 231, 234, 306, 232, 275,
	276, 329, 330, 331, 303, 228, 0, 0, 308, 280,
	121, 126, 157, 336, 173, 142, 188, 147, 186, 185,
	143, 0, 0, 0, 0, 0, 247, 335, 299, 296,
	322, 0, 141, 178, 0, 179, 0, 0, 0, 151,
	168, 0, 122, 0, 0, 0, 148, 0, 152, 155,
	156, 0, 0, 191, 192, 194, 193, 195, 127, 196,
	197, 0, 361, 0, 0, 138, 360, 0, 0, 0,
	0, 397, 158, 0, 0, 176, 161, 0, 0, 0,
	0, 390, 391, 0, 0, 0, 0, 0, 0, 846,
	60, 0, 0, 410, 378, 377, 379, 380, 381, 382,
	0, 0, 128, 383, 384, 385, 847, 0, 0, 358,
	371, 0, 396, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 0, 0, 0, 0, 408, 0,
	370, 0, 0, 367, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 132,
	0, 0, 174, 187, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 146, 0, 0, 183, 184,
	133, 190, 0, 0, 125, 0, 0, 167, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 154, 140, 149,
	171, 159, 172, 150, 165, 164, 166, 0, 0, 0,
	177, 0, 0, 145, 139, 181, 136, 162, 129, 123,
	0, 130, 131, 135, 134, 0, 153, 160, 163, 169,
	170, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	144, 398, 404, 407, 0, 405, 402, 403, 401, 400,
	399, 409, 392, 393, 395, 0, 394, 121, 126, 157,
	0, 173, 142, 188, 147, 186, 185, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	178, 0, 179, 0, 0, 0, 151, 0, 168, 0,
	122, 0, 0, 0, 148, 0, 152, 155, 156, 0,
	191, 192, 194, 193, 195, 127, 196, 197, 780, 0,
	361, 0, 0, 138, 360, 0, 0, 0, 0, 397,
	158, 0, 0, 176, 161, 0, 0, 0, 0, 390,
	391, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 410, 378, 377, 379, 380, 381, 382, 0, 0,
	128, 383, 384, 385, 0, 0, 0, 358, 371, 0,
	396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 783, 0, 0, 0, 408, 0, 370, 0,
	0, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 132, 0, 0,
	174, 187, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 146, 0, 0, 183, 184, 133, 190,
	0, 0, 125, 0, 0, 167, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 154, 140, 149, 171, 159,
	172, 150, 165, 164, 166, 0, 0, 0, 177, 0,
	0, 145, 139, 181, 136, 162, 129, 123, 0, 130,
	131, 135, 134, 0, 153, 160, 163, 169, 170, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 144, 398,
	404, 407, 0, 405, 402, 403, 401, 400, 399, 409,
	392, 393, 395, 0, 394, 121, 126, 157, 0, 173,
	142, 188, 147, 186, 185, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 178, 0,
	179, 0, 0, 0, 151, 168, 0, 122, 0, 0,
	0, 148, 0, 152, 155, 156, 0, 0, 191, 192,
	194, 193, 195, 127, 196, 197, 0, 361, 0, 0,
	138, 360, 0, 0, 0, 0, 397, 158, 0, 0,
	176, 161, 0, 0, 0, 0, 390, 391, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 606, 410, 378,
	377, 379, 380, 381, 382, 0, 0, 128, 383, 384,
	385, 0, 0, 0, 358, 371, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 0,
	0, 0, 0, 408, 0, 370, 0, 0, 367, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 132, 0, 0, 174, 187, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	146, 0, 0, 183, 184, 133, 190, 0, 0, 125,
	0, 0, 167, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 154, 140, 149, 171, 159, 172, 150, 165,
	164, 166, 0, 0, 0, 177, 0, 0, 145, 139,
	181, 136, 162, 129, 123, 0, 130, 131, 135, 134,
	0, 153, 160, 163, 169, 170, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 144, 398, 404, 407, 0,
	405, 402, 403, 401, 400, 399, 409, 392, 393, 395,
	0, 394, 121, 126, 157, 0, 173, 142, 188, 147,
	186, 185, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 178, 0, 179, 0, 0,
	0, 151, 168, 0, 122, 0, 0, 0, 148, 0,
	152, 155, 156, 0, 0, 191, 192, 194, 193, 195,
	127, 196, 197, 0, 361, 0, 0, 138, 360, 0,
	0, 0, 0, 397, 158, 0, 0, 176, 161, 0,
	0, 0, 0, 390, 391, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 410, 378, 377, 379, 380,
	381, 382, 0, 0, 128, 383, 384, 385, 0, 0,
	0, 358, 371, 0, 396, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 783, 0, 0, 0,
	408, 0, 370, 0, 0, 367, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 406, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 132, 0, 0, 174, 187, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 146, 0, 0,
	183, 184, 133, 190, 0, 0, 125, 0, 0, 167,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 154,
	140, 149, 171, 159, 172, 150, 165, 164, 166, 0,
	0, 0, 177, 0, 0, 145, 139, 181, 136, 162,
	129, 123, 0, 130, 131, 135, 134, 0, 153, 160,
	163, 169, 170, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 144, 398, 404, 407, 0, 405, 402, 403,
	401, 400, 399, 409, 392, 393, 395, 0, 394, 121,
	126, 157, 0, 173, 142, 188, 147, 186, 185, 143,
	0, 0, 0, 0, 0, 0, 0, 29, 0, 0,
	0, 141, 178, 0, 179, 0, 0, 0, 151, 168,
	0, 122, 0, 0, 0, 148, 0, 152, 155, 156,
	0, 0, 191, 192, 194, 193, 195, 127, 196, 197,
	0, 361, 0, 0, 138, 360, 0, 0, 0, 0,
	397, 158, 0, 0, 176, 161, 0, 0, 0, 0,
	390, 391, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 410, 378, 377, 379, 380, 381, 382, 0,
	0, 128, 383, 384, 385, 0, 0, 0, 358, 371,
	0, 396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 0, 0, 0, 0, 408, 0, 370,
	0, 0, 367, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 132, 0,
	0, 174, 187, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 146, 0, 0, 183, 184, 133,
	190, 0, 0, 125, 0, 0, 167, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 154, 140, 149, 171,
	159, 172, 150, 165, 164, 166, 0, 0, 0, 177,
	0, 0, 145, 139, 181, 136, 162, 129, 123, 0,
	130, 131, 135, 134, 0, 153, 160, 163, 169, 170,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 144,
	398, 404, 407, 0, 405, 402, 403, 401, 400, 399,
	409, 392, 393, 395, 0, 394, 121, 126, 157, 0,
	173, 142, 188, 147, 186, 185, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 178,
	0, 179, 0, 0, 0, 151, 168, 0, 122, 0,
	0, 0, 148, 0, 152, 155, 156, 0, 0, 191,
	192, 194, 193, 195, 127, 196, 197, 0, 361, 0,
	0, 138, 360, 0, 0, 0, 0, 397, 158, 0,
	0, 176, 161, 0, 0, 0, 0, 390, 391, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 410,
	378, 377, 379, 380, 381, 382, 0, 0, 128, 383,
	384, 385, 0, 0, 0, 358, 371, 0, 396, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	0, 0, 0, 0, 408, 0, 370, 0, 0, 367,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 132, 0, 0, 174, 187,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 146, 0, 0, 183, 184, 133, 190, 0, 0,
	125, 0, 0, 167, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 154, 140, 149, 171, 159, 172, 150,
	165, 164, 166, 0, 0, 0, 177, 0, 0, 145,
	139, 181, 136, 162, 129, 123, 0, 130, 131, 135,
	134, 0, 153, 160, 163, 169, 170, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 144, 398, 404, 407,
	0, 405, 402, 403, 401, 400, 399, 409, 392, 393,
	395, 0, 394, 121, 126, 157, 0, 173, 142, 188,
	147, 186, 185, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 178, 0, 179, 168,
	0, 122, 151, 0, 0, 148, 0, 152, 155, 156,
	0, 0, 0, 0, 0, 0, 191, 192, 194, 193,
	195, 127, 196, 197, 138, 0, 0, 0, 0, 0,
	397, 158, 0, 0, 176, 161, 0, 0, 0, 0,
	390, 391, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 410, 378, 377, 379, 380, 381, 382, 0,
	0, 128, 383, 384, 385, 0, 0, 0, 0, 371,
	0, 396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 0, 0, 0, 0, 408, 0, 370,
	0, 0, 367, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 132, 0,
	0, 174, 187, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 146, 0, 0, 183, 184, 133,
	190, 0, 0, 125, 0, 0, 167, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 154, 140, 149, 171,
	159, 172, 150, 165, 164, 166, 0, 0, 0, 177,
	0, 0, 145, 139, 181, 136, 162, 129, 123, 0,
	130, 131, 135, 134, 0, 153, 160, 163, 169, 170,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 144,
	398, 404, 407, 0, 405, 402, 403, 401, 400, 399,
	409, 392, 393, 395, 0, 394, 121, 126, 157, 0,
	173, 142, 188, 147, 186, 185, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 178,
	0, 179, 0, 0, 0, 151, 168, 0, 122, 0,
	0, 0, 148, 0, 152, 155, 156, 0, 0, 191,
	192, 194, 193, 195, 127, 196, 197, 1026, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 158, 0,
	0, 176, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	0, 1028, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 132, 0, 0, 174, 187,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 146, 0, 0, 183, 184, 133, 190, 0, 0,
	125, 0, 0, 167, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 154, 140, 149, 171, 159, 172, 150,
	165, 164, 166, 0, 0, 0, 177, 0, 0, 145,
	139, 181, 136, 162, 129, 123, 0, 130, 131, 135,
	134, 0, 153, 160, 163, 169, 170, 175, 0, 0,
	0, 0, 168, 0, 122, 0, 0, 913, 912, 0,
	152, 155, 156, 0, 0, 0, 911, 0, 0, 0,
	910, 0, 0, 0, 180, 0, 144, 138, 0, 0,
	0, 0, 0, 0, 158, 0, 0, 176, 161, 0,
	0, 0, 0, 121, 126, 157, 0, 173, 142, 188,
	147, 186, 185, 143, 0, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 141, 178, 0, 179, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 194, 193,
	195, 127, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 132, 0, 0, 174, 187, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 146, 0, 0,
	183, 184, 133, 190, 0, 0, 125, 0, 0, 167,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 154,
	140, 149, 171, 159, 172, 150, 165, 164, 166, 0,
	0, 0, 177, 0, 0, 145, 139, 181, 136, 162,
	129, 123, 0, 130, 131, 135, 134, 0, 153, 160,
	163, 169, 170, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	126, 157, 0, 173, 142, 188, 147, 186, 185, 143,
	0, 0, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 141, 178, 0, 179, 168, 0, 122, 151, 0,
	0, 148, 0, 152, 155, 156, 0, 0, 0, 0,
	0, 0, 191, 192, 194, 193, 195, 127, 196, 197,
	138, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	176, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 132, 0, 0, 174, 187, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	146, 0, 0, 183, 184, 133, 190, 0, 0, 125,
	0, 0, 167, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 154, 140, 149, 171, 159, 172, 150, 165,
	164, 166, 0, 0, 0, 177, 0, 0, 145, 139,
	181, 136, 162, 129, 123, 0, 130, 131, 135, 134,
	0, 153, 160, 163, 169, 170, 175, 0, 0, 0,
	0, 168, 0, 122, 0, 0, 0, 148, 0, 152,
	155, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 180, 0, 144, 138, 0, 0, 0,
	0, 0, 0, 158, 0, 0, 176, 161, 0, 0,
	0, 0, 121, 126, 157, 0, 173, 142, 188, 147,
	186, 185, 143, 0, 119, 0, 1414, 0, 0, 0,
	0, 0, 0, 128, 141, 178, 0, 179, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 194, 193, 195,
	127, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	132, 0, 0, 174, 187, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 146, 0, 0, 183,
	184, 133, 190, 0, 0, 125, 0, 0, 167, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 154, 140,
	149, 171, 159, 172, 150, 165, 164, 166, 0, 0,
	0, 177, 0, 0, 145, 139, 181, 136, 162, 129,
	123, 0, 130, 131, 135, 134, 0, 153, 160, 163,
	169, 170, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 126,
	157, 0, 173, 142, 188, 147, 186, 185, 143, 0,
	0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	141, 178, 0, 179, 168, 0, 122, 151, 0, 0,
	148, 0, 152, 155, 156, 0, 0, 0, 0, 0,
	0, 191, 192, 194, 193, 195, 127, 196, 197, 138,
	0, 0, 0, 0, 0, 0, 158, 0, 0, 176,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 132, 0, 0, 174, 187, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 146,
	0, 0, 183, 184, 133, 190, 0, 0, 125, 0,
	0, 167, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 154, 140, 149, 171, 159, 172, 150, 165, 164,
	166, 0, 0, 0, 177, 0, 0, 145, 139, 181,
	136, 162, 129, 123, 0, 130, 131, 135, 134, 0,
	153, 160, 163, 169, 170, 175, 0, 0, 0, 0,
	168, 0, 122, 0, 0, 0, 148, 0, 152, 155,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 144, 138, 0, 0, 0, 0,
	0, 0, 158, 0, 0, 176, 161, 0, 0, 0,
	0, 121, 126, 157, 0, 173, 142, 188, 147, 186,
	185, 143, 0, 454, 0, 0, 821, 0, 0, 822,
	0, 0, 128, 141, 178, 0, 179, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 194, 193, 195, 127,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 132,
	0, 0, 174, 187, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 146, 0, 0, 183, 184,
	133, 190, 0, 0, 125, 0, 0, 167, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 154, 140, 149,
	171, 159, 172, 150, 165, 164, 166, 0, 0, 0,
	177, 0, 0, 145, 139, 181, 136, 162, 129, 123,
	0, 130, 131, 135, 134, 0, 153, 160, 163, 169,
	170, 175, 0, 0, 0, 0, 168, 0, 122, 0,
	0, 0, 148, 0, 152, 155, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	144, 138, 637, 0, 0, 0, 0, 0, 158, 0,
	0, 176, 161, 0, 0, 0, 0, 121, 126, 157,
	0, 173, 142, 188, 147, 186, 185, 143, 0, 454,
	0, 636, 0, 0, 0, 0, 0, 0, 128, 141,
	178, 0, 179, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 194, 193, 195, 127, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 132, 0, 0, 174, 187,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 146, 0, 0, 183, 184, 133, 190, 0, 0,
	125, 0, 0, 167, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 154, 140, 149, 171, 159, 172, 150,
	165, 164, 166, 0, 0, 0, 177, 0, 0, 145,
	139, 181, 136, 162, 129, 123, 0, 130, 131, 135,
	134, 0, 153, 160, 163, 169, 170, 175, 0, 0,
	0, 0, 168, 0, 122, 0, 0, 0, 148, 0,
	152, 155, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 144, 138, 0, 0,
	0, 0, 0, 0, 158, 0, 0, 176, 161, 0,
	0, 0, 0, 121, 126, 157, 0, 173, 142, 188,
	147, 186, 185, 143, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 141, 178, 0, 179, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 194, 193,
	195, 127, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 132, 0, 0, 174, 187, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 146, 0, 0,
	183, 184, 133, 190, 0, 0, 125, 0, 0, 167,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 154,
	140, 149, 171, 159, 172, 150, 165, 164, 166, 0,
	0, 0, 177, 0, 0, 145, 139, 181, 136, 162,
	129, 123, 0, 130, 131, 135, 134, 0, 153, 160,
	163, 169, 170, 175, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 122, 0, 0, 0, 148, 0, 152,
	155, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 144, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 158, 0, 0, 176, 161, 0, 121,
	126, 157, 0, 173, 142, 188, 203, 186, 185, 204,
	0, 205, 0, 0, 119, 0, 1414, 0, 0, 0,
	0, 141, 178, 128, 179, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 194, 193, 195, 127, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	132, 0, 0, 174, 187, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 146, 0, 0, 183,
	184, 133, 190, 0, 0, 125, 0, 0, 167, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 154, 140,
	149, 171, 159, 172, 150, 165, 164, 166, 0, 0,
	0, 177, 0, 0, 145, 139, 181, 136, 162, 129,
	123, 0, 130, 131, 135, 134, 0, 153, 160, 163,
	169, 170, 175, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 122, 0, 0, 0, 148, 0, 152, 155,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 144, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 158, 0, 0, 176, 161, 0, 121, 126,
	157, 0, 173, 142, 188, 147, 186, 185, 143, 0,
	60, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	141, 178, 128, 179, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 194, 193, 195, 127, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 132,
	0, 0, 174, 187, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 146, 0, 0, 183, 184,
	133, 190, 0, 0, 125, 0, 0, 167, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 154, 140, 149,
	171, 159, 172, 150, 165, 164, 166, 0, 0, 0,
	177, 0, 0, 145, 139, 181, 136, 162, 129, 123,
	0, 130, 131, 135, 134, 0, 153, 160, 163, 169,
	170, 175, 0, 0, 0, 0, 168, 0, 122, 0,
	0, 0, 148, 0, 152, 155, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	144, 138, 0, 0, 0, 0, 0, 0, 158, 0,
	0, 176, 161, 0, 0, 0, 0, 121, 126, 157,
	0, 173, 142, 188, 147, 186, 185, 143, 0, 454,
	0, 1028, 0, 0, 0, 0, 0, 0, 128, 141,
	178, 0, 179, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 194, 193, 195, 127, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 132, 0, 0, 174, 187,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 146, 0, 0, 183, 184, 133, 190, 0, 0,
	125, 0, 0, 167, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 154, 140, 149, 171, 159, 172, 150,
	165, 164, 166, 0, 0, 0, 177, 0, 0, 145,
	139, 181, 136, 162, 129, 123, 0, 130, 131, 135,
	134, 0, 153, 160, 163, 169, 170, 175, 0, 0,
	0, 0, 0, 0, 0, 168, 0, 122, 0, 0,
	0, 148, 0, 152, 155, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 144, 0, 0, 826,
	138, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	176, 161, 0, 121, 126, 157, 0, 173, 142, 188,
	147, 186, 185, 143, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 141, 178, 128, 179, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 194, 193,
	195, 127, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 132, 0, 0, 174, 187, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	146, 0, 0, 183, 184, 133, 190, 0, 0, 125,
	0, 0, 167, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 154, 140, 149, 171, 159, 172, 150, 165,
	164, 166, 0, 0, 0, 177, 0, 0, 145, 139,
	181, 136, 162, 129, 123, 0, 130, 131, 135, 134,
	0, 153, 160, 163, 169, 170, 175, 0, 0, 0,
	0, 168, 0, 122, 0, 0, 0, 148, 0, 152,
	155, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 144, 138, 0, 0, 0,
	0, 0, 0, 158, 0, 0, 176, 161, 0, 0,
	0, 0, 121, 126, 157, 0, 173, 142, 188, 147,
	186, 185, 143, 0, 464, 0, 510, 0, 0, 0,
	0, 0, 0, 128, 141, 178, 0, 179, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 194, 193, 195,
	127, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	132, 0, 0, 174, 187, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 146, 0, 0, 183,
	184, 133, 190, 0, 0, 125, 0, 0, 167, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 154, 140,
	149, 171, 159, 172, 150, 165, 164, 166, 0, 0,
	0, 177, 0, 0, 145, 139, 181, 136, 162, 129,
	123, 0, 130, 131, 135, 134, 0, 153, 160, 163,
	169, 170, 175, 0, 0, 0, 0, 168, 0, 122,
	0, 0, 0, 148, 0, 152, 155, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 144, 138, 0, 0, 0, 0, 0, 0, 158,
	0, 0, 176, 161, 0, 0, 0, 0, 121, 126,
	157, 0, 173, 142, 188, 147, 186, 185, 143, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	141, 178, 0, 179, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 194, 193, 195, 127, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 132, 0, 0, 174,
	187, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 146, 0, 0, 183, 184, 133, 190, 0,
	0, 125, 0, 0, 167, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 154, 140, 149, 171, 159, 172,
	150, 165, 164, 166, 0, 0, 0, 177, 0, 0,
	145, 139, 181, 136, 162, 129, 123, 0, 130, 131,
	135, 134, 0, 153, 160, 163, 169, 170, 175, 0,
	0, 0, 0, 168, 0, 122, 0, 0, 0, 148,
	0, 152, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 144, 138, 0,
	0, 0, 0, 0, 0, 158, 0, 0, 176, 161,
	0, 0, 0, 0, 121, 126, 157, 0, 173, 142,
	188, 147, 186, 185, 143, 0, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 141, 178, 0, 179,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 194,
	193, 195, 127, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 132, 0, 0, 174, 187, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 146, 0,
	0, 183, 184, 133, 190, 0, 0, 125, 0, 0,
	167, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	154, 140, 149, 171, 159, 172, 150, 165, 164, 166,
	0, 0, 0, 177, 0, 0, 145, 139, 181, 136,
	162, 129, 123, 0, 130, 131, 135, 134, 0, 153,
	160, 163, 169, 170, 175, 0, 0, 0, 0, 168,
	0, 122, 0, 0, 0, 148, 0, 152, 155, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 144, 138, 0, 0, 0, 0, 0,
	0, 158, 0, 0, 176, 161, 0, 0, 0, 0,
	121, 126, 157, 0, 173, 142, 188, 147, 186, 185,
	143, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 141, 178, 0, 179, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 192, 194, 193, 195, 127, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 132, 0,
	0, 174, 187, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 146, 0, 0, 183, 184, 133,
	190, 0, 0, 125, 0, 0, 167, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 154, 140, 149, 171,
	159, 172, 150, 165, 164, 166, 0, 0, 0, 177,
	0, 0, 145, 139, 181, 136, 162, 129, 123, 0,
	130, 131, 135, 134, 0, 153, 160, 163, 169, 170,
	175, 0, 0, 0, 0, 168, 0, 122, 0, 0,
	0, 148, 0, 152, 155, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 144,
	138, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	176, 161, 0, 0, 0, 0, 121, 126, 157, 0,
	173, 142, 188, 147, 186, 185, 143, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 141, 178,
	0, 179, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	192, 194, 193, 195, 127, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 132, 0, 0, 174, 187, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	146, 0, 0, 183, 184, 133, 190, 0, 0, 125,
	0, 0, 167, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 154, 140, 149, 171, 159, 172, 150, 165,
	164, 166, 0, 0, 0, 177, 0, 0, 145, 139,
	181, 136, 162, 129, 123, 0, 130, 131, 135, 134,
	0, 153, 160, 163, 169, 170, 175, 0, 0, 0,
	0, 168, 0, 122, 0, 0, 0, 148, 0, 152,
	155, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 144, 138, 0, 0, 0,
	0, 0, 0, 158, 0, 0, 176, 161, 0, 0,
	0, 0, 121, 126, 157, 0, 173, 142, 188, 147,
	186, 185, 143, 0, 1275, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 141, 178, 0, 179, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 194, 193, 195,
	127, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	132, 0, 0, 174, 187, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 146, 0, 0, 183,
	184, 133, 190, 0, 0, 125, 0, 0, 167, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 154, 140,
	149, 171, 159, 172, 150, 165, 164, 166, 0, 0,
	0, 177, 0, 0, 145, 139, 181, 136, 162, 129,
	123, 0, 130, 131, 135, 134, 0, 153, 160, 163,
	169, 170, 175, 0, 0, 0, 0, 168, 0, 122,
	0, 0, 0, 148, 0, 152, 155, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 144, 138, 0, 0, 0, 0, 0, 0, 158,
	0, 0, 176, 161, 0, 0, 0, 0, 121, 126,
	157, 0, 173, 142, 188, 147, 186, 185, 143, 0,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	141, 178, 0, 179, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 194, 193, 195, 127, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 132, 0, 0, 174,
	187, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 146, 0, 0, 183, 184, 133, 190, 0,
	0, 125, 0, 0, 167, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 154, 140, 149, 171, 159, 172,
	150, 165, 164, 166, 0, 0, 0, 177, 0, 0,
	145, 139, 181, 136, 162, 129, 123, 0, 130, 131,
	135, 134, 0, 153, 160, 163, 169, 170, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 126, 157, 0, 173, 142,
	188, 147, 186, 185, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 178, 0, 179,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 194,
	193, 195, 127, 196, 197,
}
var yyPact = [...]int{

	167, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1005, 1032, -1000,
	-1000, -1000, -1000, -1000, -1000, 790, 239, 35, 144, 137,
	128, 526, 42, 11027, -1000, 9164, 4442, -52, -1000, -158,
	-1000, -1000, -168, -1000, 7038, -176, 791, -1000, -1000, -1000,
	-1000, -1000, -1000, 971, 1006, 797, 927, 882, -1000, 40,
	-22, 11027, 1022, 2576, -128, 10615, 166, 162, 156, 155,
	166, -1000, -1000, -1000, 120, 11439, -1000, 42, 669, 165,
	-1000, 11027, -1000, 11027, -64, 30, -1000, -1000, 3, 372,
	-1000, -1000, -1000, -75, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11027, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10203,
	185, 176, 222, 323, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	547, -1000, -1000, -1000, -1000, -1000, -1000, 736, 736, -1000,
	11027, -1000, -1000, -180, -1000, 692, 337, -1000, 7038, 1631,
	736, 736, -1000, -1000, 234, -1000, -1000, 7311, 7311, 7311,
	7311, 7311, 7311, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 736, 220, -1000, 6761,
	736, 736, 736, 736, 736, 736, 7038, 736, 736, 736,
	736, 736, 736, 736, 736, 736, 736, 736, 736, 736,
	-1000, -1000, 42, -1000, -1000, 544, 924, 7038, 7038, 1005,
	-1000, 791, -1000, -1000, -1000, 902, -1000, -1000, 373, 161,
	-1000, -1000, -1000, 161, -1000, -1000, 911, 11027, 729, -1000,
	-1000, -173, 3198, -1000, -1000, -1000, -1000, 297, 8958, 8958,
	-1000, -1000, -1000, 910, -1000, -1000, -1000, -1000, -1000, 983,
	982, 683, -1000, 1633, -1000, -1000, 11439, 345, 667, 665,
	658, 11027, 11027, 71, -1000, -1000, -1000, 165, 811, 11439,
	926, -1000, -1000, 1020, 11027, 11027, -1000, -1000, 372, 372,
	-1000, -1000, 11027, -1000, -1000, -1000, -1000, -1000, 372, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 98, -1000, -1000, -1000,
	-1000, -1000, -4, -1000, -1000, -1000, -1000, -1000, -1000, 292,
	5375, -36, -1000, -1000, -1000, 7038, -1000, -1000, 217, -1000,
	-1000, -1000, -1000, -1000, 7038, 7038, 7038, 450, 250, 7311,
	449, 365, 7311, 7311, 7311, 7311, 7311, 7311, 7311, 7311,
	7311, 7311, 7311, 7311, 7311, 7311, 7311, 540, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 651, -1000, 791, 527,
	527, 169, 169, 169, 169, 169, 2222, 5930, 4753, 544,
	681, 6761, 6484, 6484, 7038, 7038, 6484, 936, 336, 337,
	10409, -1000, 544, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6484, 6484, 6484, 6484, 11027, -1000, -1000, -1000, 1028, 256,
	461, 715, -1000, 335, 971, 544, 882, 8752, 823, -1000,
	-1000, 9997, 9997, 10821, 1018, 2887, -1000, 712, 704, -171,
	-178, -1000, -173, 5652, -1000, -1000, -1000, -1000, 228, -1000,
	736, 110, 1494, 7794, 1798, 12, -1000, -1000, -1000, 738,
	-1000, 738, 738, 738, 738, 68, 68, 68, 68, -1000,
	-1000, -1000, -1000, -1000, 802, 801, -1000, 738, 738, 738,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 798, 798,
	798, 789, 789, 71, 921, 809, 808, 806, -1000, 174,
	-1000, 71, -1000, 152, -193, -1000, 11027, 11027, -1000, -1000,
	971, -73, -1000, -1000, 381, 11027, 11027, 372, -1000, 11027,
	-1000, -1000, -1000, 545, -119, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11027, -1000, -1000, -1000, -1000, -1000,
	337, 250, 390, -1000, -1000, 477, -1000, -1000, 1158, -1000,
	-1000, -1000, -1000, 449, 7311, 7311, 7311, 224, 1158, 1138,
	1218, 1572, 169, 468, 468, 247, 247, 247, 247, 247,
	705, 705, -1000, -1000, -1000, 544, -1000, -1000, -1000, 544,
	6484, 702, -1000, -1000, 7588, 219, 736, 204, -1000, -1000,
	-1000, 544, 664, 664, 277, 455, 664, 6484, 411, -1000,
	7038, 544, -1000, 664, 544, 664, 664, 697, -1000, 863,
	7038, 7038, 7038, -1000, -1000, -1000, 924, -1000, 936, 1004,
	-1000, 895, 893, 6484, -1000, -123, 11027, -1000, -123, 757,
	-1000, 291, -1000, 201, 1005, 7038, -1000, 4131, -1000, -174,
	-1000, -166, -186, -1000, -1000, -1000, -1000, -1000, 337, -1000,
	641, 10615, 736, 736, -1000, 1494, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 259, 259, 153, 259, 259, 259, 259, 259, -12,
	-23, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, -1000, -1000, 587, 241, 244, -1000,
	-1000, -1000, -1000, 950, -1000, 1798, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 352, 187,
	-1000, 943, -1000, 941, 572, 1027, 499, 189, 170, 7,
	-1000, -1000, 543, 68, 68, -1000, -1000, -1000, 909, -1000,
	-1000, -1000, 569, 569, -1000, -1000, -1000, -1000, 541, -1000,
	-1000, -1000, 538, -1000, -1000, -1000, 11027, 11027, 11027, -1000,
	249, 289, 118, 188, 181, 171, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 259, 259, -1000, -1000, 907,
	906, 259, 719, 925, -1000, 567, -1000, -1000, -1000, 565,
	7038, -1000, 372, 1018, -1000, -1000, -1000, -1000, 240, -1000,
	-1000, -1000, -1000, -1000, 224, 1158, 894, -1000, 7311, 7311,
	-1000, -1000, 664, 6484, -1000, -1000, 9788, -1000, -1000, 3820,
	6484, 5064, -1000, -1000, -1000, 350, 540, 350, -100, 787,
	331, -1000, 7038, 396, -1000, -1000, -1000, -1000, -1000, 856,
	337, 337, -1000, -1000, 11027, -1000, -1000, -1000, -1000, 768,
	818, 736, -1000, 733, 1005, 10821, 7038, 4753, 971, 337,
	-1000, -1000, -1000, -182, -183, -1000, -1000, 544, 10615, 10615,
	-1000, 564, -1000, 499, 259, 259, 533, 524, 522, 563,
	561, 259, 259, 519, 559, 630, 500, 487, 465, 551,
	558, 612, 546, 542, 471, 11233, 113, -1000, 587, -1000,
	940, 241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 796, -1000, -1000, -1000, -1000, -1000, -1000, -59, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	684, -1000, -1000, 309, 657, -1000, 655, 694, 649, 736,
	736, 736, -1000, 11027, -1000, -1000, -1000, 628, 66, 790,
	618, 10615, 615, 380, -1000, -1000, 439, -1000, -1000, -1000,
	-1000, 967, 904, 259, 259, -1000, -1000, -1000, 337, 381,
	-1000, -1000, -1000, -1000, 7311, 1158, 1158, -1000, -1000, -1000,
	-1000, 197, 544, -1000, 544, 738, 738, -1000, 738, 789,
	-1000, 738, 94, 738, 84, 544, 544, 736, -95, -1000,
	337, 7038, -1000, -1000, 1018, 9582, 805, 10821, 736, -1000,
	8546, 10615, -1000, 10821, 971, -1000, 337, -1000, -1000, -1000,
	-1000, -1000, -1000, 544, 544, -1000, -1000, 499, 499, -1000,
	-1000, -1000, -1000, -1000, 557, 556, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 786, -1000, 960,
	782, 113, 587, 497, -1000, -1000, -1000, -1000, -1000, 555,
	-1000, 452, -1000, 421, 10409, 10409, 10409, -1000, -1000, -1000,
	903, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 615, 615, -1000, 1158,
	3509, -1000, -1000, -1000, 142, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7311, 544, 456, 337, 1013, 693, 771,
	-1000, -1000, -1000, 933, 8067, 8273, -1000, 917, 679, 688,
	-1000, -1000, 6207, 544, 636, 186, 634, -1000, 687, -1000,
	736, -127, -1000, -1000, -1000, -1000, 10409, -1000, -1000, -1000,
	-1000, 10409, 744, 113, -1000, 627, -1000, 610, 600, 626,
	-1000, 738, 626, 626, 584, -1000, -1000, -1000, -1000, -1000,
	114, -1000, -1000, 1011, 973, 9582, 9582, 9582, 9582, -1000,
	845, 840, -1000, 828, 827, 836, 11027, -1000, 624, 8067,
	218, -1000, 9373, -1000, -1000, 939, -1000, 736, -1000, -1000,
	830, 10615, 10409, 10615, -1000, -125, -1000, 415, 622, 609,
	10409, 737, -1000, -1000, -1000, -1000, 10409, -1000, -1000, -1000,
	-1000, 544, 100, -110, -1000, 7038, 7038, 771, 804, 732,
	-1000, -1000, -1000, -1000, 835, -1000, 825, -1000, -1000, -1000,
	-1000, -1000, 154, 151, 139, -1000, 1026, -1000, 736, -1000,
	791, 184, -1000, -1000, 599, -1000, 579, -1000, -1000, -1000,
	594, 10409, 420, -1000, 160, 476, -1000, 853, -105, -114,
	337, 692, 7038, 7038, -1000, -1000, 736, 736, 736, 10821,
	688, 544, 10615, -125, -1000, 892, 136, 136, -1000, 591,
	-1000, -1000, -1000, -1000, 259, 451, 996, -1000, -1000, -1000,
	957, -1000, -1000, -1000, 849, -1000, 337, 337, 10409, 10409,
	10409, 687, -1000, -1000, -1000, 255, -1000, 259, -1000, 382,
	955, 136, -1000, 400, -1000, -1000, -1000, -1000, 578, -107,
	577, -1000, 577, 577, 736, 389, -1000, 479, 136, -1000,
	-1000, -111, -1000, 10409, -1000, -1000, -1000, -1000, -1000, -115,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 34, 35, 1385, 1384, 1383, 23, 973, 1378, 1377,
	1376, 1375, 55, 1374, 1373, 1371, 1369, 1366, 129, 880,
	1365, 1364, 1048, 1043, 1040, 1038, 1363, 1362, 1361, 1360,
	1359, 1357, 1356, 1355, 1354, 1353, 1349, 1348, 105, 1347,
	1344, 53, 1337, 1323, 1322, 102, 1320, 98, 1319, 1318,
	1315, 52, 70, 41, 50, 146, 1309, 26, 43, 19,
	1308, 1307, 20, 1305, 1553, 91, 1304, 56, 97, 1303,
	1301, 29, 1299, 1298, 1293, 1291, 80, 1290, 1288, 2,
	25, 1284, 60, 1283, 39, 96, 624, 1282, 1281, 1280,
	1279, 1277, 1276, 79, 6, 4, 1, 17, 1260, 69,
	11, 1259, 75, 1257, 1256, 1243, 1241, 42, 1238, 78,
	1234, 36, 71, 1227, 77, 1225, 21, 12, 45, 1219,
	1218, 101, 87, 88, 68, 1217, 63, 1214, 1212, 103,
	1211, 1210, 1208, 104, 1205, 100, 487, 1204, 1201, 1199,
	1197, 1196, 1195, 1194, 110, 57, 48, 0, 15, 30,
	58, 1192, 10, 1050, 54, 14, 1191, 99, 1188, 1187,
	1509, 51, 84, 49, 1186, 1184, 1183, 1165, 1163, 1161,
	1160, 90, 1156, 1155, 1153, 1152, 1151, 1150, 1149, 1148,
	1146, 1143, 1140, 1139, 1138, 1137, 1136, 1135, 82, 1134,
	1133, 1131, 1129, 1128, 1127, 1126, 1123, 1121, 1120, 1119,
	18, 1115, 1114, 1113, 1112, 24, 1110, 65, 32, 66,
	1109, 1104, 1102, 85, 37, 1101, 1100, 1099, 1097, 59,
	40, 1095, 93, 33, 38, 1093, 1092, 1091, 67, 13,
	28, 1086, 1076, 1075, 5, 16, 1073, 1070, 1066, 1065,
	9, 27, 31, 1063, 1061, 22, 1058, 1057, 62, 83,
	1056, 81, 3, 1054, 1053, 1052, 1051, 7, 107, 1046,
	106,
}
var yyR1 = [...]int{

	0, 255, 256, 256, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	18, 19, 20, 20, 21, 21, 22, 22, 23, 23,
	43, 43, 43, 43, 44, 44, 44, 115, 115, 114,
	114, 24, 25, 27, 26, 26, 253, 253, 252, 176,
	176, 7, 7, 28, 28, 28, 28, 28, 254, 254,
	254, 254, 254, 254, 244, 244, 245, 245, 237, 235,
	235, 232, 232, 238, 238, 231, 231, 236, 236, 233,
	233, 240, 240, 240, 240, 240, 241, 242, 249, 249,
	250, 250, 204, 204, 251, 251, 251, 251, 209, 209,
	208, 208, 207, 207, 207, 210, 210, 210, 31, 224,
	226, 226, 227, 227, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 178, 180,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 193, 194, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 196, 196,
	197, 197, 198, 198, 199, 199, 181, 205, 205, 179,
	175, 177, 225, 225, 225, 220, 152, 152, 164, 164,
	164, 164, 246, 246, 247, 247, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 167, 167, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 166, 166, 166,
	166, 166, 168, 168, 168, 168, 168, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 170, 170, 170, 170, 170, 170, 170, 170,
	219, 219, 171, 171, 213, 213, 214, 214, 214, 211,
	211, 212, 212, 215, 215, 172, 172, 172, 172, 172,
	172, 42, 41, 41, 41, 131, 131, 131, 216, 200,
	200, 200, 174, 201, 201, 202, 202, 202, 203, 203,
	203, 217, 217, 218, 218, 173, 221, 221, 221, 221,
	6, 6, 239, 239, 239, 239, 234, 234, 4, 4,
	4, 1, 2, 2, 3, 3, 3, 5, 5, 223,
	223, 222, 222, 230, 230, 229, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 158, 158, 137, 137, 142,
	142, 142, 30, 30, 30, 76, 76, 143, 143, 8,
	32, 9, 138, 138, 138, 72, 72, 72, 10, 12,
	12, 12, 12, 12, 73, 73, 73, 73, 73, 73,
	11, 11, 11, 11, 206, 206, 206, 206, 206, 13,
	141, 141, 141, 14, 16, 16, 16, 16, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 50, 50, 70, 70,
	70, 67, 67, 68, 68, 69, 69, 66, 66, 71,
	71, 71, 74, 74, 74, 36, 144, 144, 34, 75,
	75, 75, 37, 35, 259, 38, 39, 39, 40, 40,
	40, 47, 47, 47, 45, 45, 46, 46, 53, 53,
	52, 52, 54, 54, 54, 54, 151, 151, 151, 150,
	150, 56, 56, 57, 57, 58, 58, 59, 59, 59,
	77, 60, 60, 60, 60, 159, 159, 156, 156, 156,
	155, 155, 61, 61, 61, 61, 62, 62, 62, 62,
	63, 63, 65, 65, 64, 64, 78, 78, 78, 78,
	79, 79, 80, 80, 55, 55, 55, 55, 55, 55,
	55, 134, 134, 82, 82, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 92, 92, 92, 92, 92,
	92, 83, 83, 83, 83, 83, 83, 83, 51, 51,
	93, 93, 93, 99, 94, 94, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 90, 90, 90, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 89, 89,
	89, 89, 89, 89, 89, 89, 260, 260, 91, 91,
	91, 91, 48, 48, 48, 48, 48, 161, 161, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 103, 103, 49, 49, 101, 101, 102, 104,
	104, 100, 100, 100, 85, 85, 85, 85, 85, 85,
	85, 87, 87, 87, 105, 105, 106, 106, 107, 107,
	108, 108, 109, 110, 110, 110, 111, 111, 111, 111,
	112, 112, 112, 84, 84, 84, 84, 84, 84, 113,
	113, 113, 113, 116, 116, 95, 95, 97, 97, 96,
	98, 117, 117, 118, 119, 119, 122, 122, 121, 121,
	121, 121, 121, 130, 130, 129, 129, 129, 120, 120,
	123, 123, 127, 127, 126, 128, 128, 128, 128, 125,
	125, 124, 124, 162, 162, 162, 132, 132, 135, 135,
	136, 136, 133, 133, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 145, 145, 145, 140, 140, 243,
	243, 148, 148, 149, 149, 153, 153, 154, 154, 157,
	157, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 257, 258, 160,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 8, 9, 7, 8,
	0, 1, 1, 1, 0, 1, 1, 1, 3, 0,
	4, 8, 7, 2, 3, 3, 1, 3, 5, 0,
	2, 1, 1, 3, 5, 11, 11, 11, 0, 1,
	1, 5, 9, 7, 1, 1, 1, 1, 2, 3,
	2, 0, 2, 1, 1, 0, 2, 1, 3, 0,
	2, 0, 1, 1, 2, 2, 3, 3, 0, 1,
	1, 2, 1, 1, 4, 4, 2, 4, 0, 1,
	0, 1, 1, 2, 2, 1, 1, 1, 4, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	4, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 3,
	3, 4, 1, 3, 3, 3, 1, 1, 3, 1,
	1, 1, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 3, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 3, 4, 1, 1, 1, 1, 0,
	3, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 7, 7, 8, 9,
	0, 1, 3, 1, 2, 3, 0, 2, 0, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 3, 2, 6, 7, 7, 7,
	9, 7, 7, 7, 4, 0, 1, 0, 1, 0,
	1, 1, 6, 6, 4, 1, 3, 0, 1, 3,
	3, 2, 1, 1, 1, 0, 1, 1, 3, 1,
	1, 1, 1, 1, 0, 3, 3, 3, 1, 1,
	3, 5, 3, 6, 0, 1, 1, 1, 1, 2,
	0, 1, 1, 4, 2, 3, 2, 2, 4, 4,
	3, 6, 3, 3, 4, 4, 4, 6, 5, 5,
	3, 3, 5, 6, 7, 3, 3, 3, 5, 3,
	3, 3, 3, 3, 3, 3, 0, 3, 1, 1,
	1, 0, 2, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 1, 1, 5, 1, 1, 2, 0,
	1, 1, 4, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 3, 3,
	3, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	2, 2, 0, 2, 3, 2, 2, 2, 1, 0,
	2, 2, 2, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -255, -17, -18, -22, -23, -24, -25, -26, -28,
	-29, -30, -8, -32, -33, -36, -34, -9, -10, -11,
	-13, -14, -16, -15, -35, -27, -37, -19, -20, 6,
	7, 259, 8, 9, 45, -31, 126, 127, 128, 151,
	130, 146, 48, 65, 279, -138, 149, 286, 289, 290,
	293, 292, 308, 150, 10, 152, -257, 145, 144, 143,
	68, -256, 316, -107, 15, -40, 5, -38, -259, -38,
	-38, -38, -38, -38, -224, 68, -7, -243, 24, 32,
	139, 251, 252, 35, -133, 251, 135, -137, 136, -7,
	34, -143, 139, 139, 244, 126, 239, 281, -69, -70,
	283, 284, 246, 139, 285, 242, 282, 241, 238, 176,
	71, 47, 136, 28, 26, -144, 139, 240, -153, 71,
	-147, 265, 20, 207, 153, 172, 266, 313, 80, 206,
	209, 210, 147, 168, 212, 211, 204, 162, 43, 202,
	186, 287, 270, 275, 248, 201, 163, 272, 24, 187,
	191, 294, 26, 214, 185, 27, 28, 267, 50, 189,
	215, 54, 205, 216, 193, 192, 194, 175, 18, 217,
	218, 188, 190, 269, 150, 219, 53, 198, 288, 290,
	246, 203, 177, 166, 167, 274, 273, 151, 271, 141,
	169, 308, 309, 311, 310, 312, 314, 315, -160, -64,
	-73, 130, -153, 272, 275, 277, -206, 71, 73, -146,
	-147, 86, 39, 41, 196, 89, 159, 121, 181, 16,
	22, 90, 170, 173, 176, 120, 247, 208, 260, 126,
	63, 250, 253, 249, 251, 239, 164, 44, 9, 143,
	144, 38, 114, 10, 128, 93, 94, 281, 148, 40,
	145, 83, 19, 66, 11, 47, 13, 14, 149, 134,
	135, 105, 136, 61, 7, 157, 158, 122, 42, 102,
	57, 36, 59, 103, 17, 254, 255, 46, 184, 180,
	264, 183, 156, 179, 116, 64, 51, 87, 81, 165,
	84, 67, 152, 85, 15, 62, 284, 138, 137, 283,
	161, 104, 129, 259, 30, 60, 252, 6, 263, 45,
	146, 155, 58, 139, 240, 34, 182, 154, 178, 92,
	140, 82, 285, 5, 35, 199, 8, 65, 142, 256,
	257, 258, 49, 174, 171, 282, 268, 91, 12, 200,
	-141, 269, 209, -160, 291, -160, -160, 309, 311, 310,
	312, 313, 315, 279, -160, -94, -55, -81, 87, -86,
	44, 40, -85, -82, -100, -98, -99, 121, 110, 111,
	118, 88, 122, -90, -88, -89, -91, 73, 72, 74,
	75, 76, 77, 81, 82, 83, -148, -153, -96, -257,
	59, 60, 260, 261, 264, 262, 90, 49, 249, 258,
	257, 256, 254, 255, 250, 253, 134, 251, 116, 259,
	71, -147, -75, 307, 295, -18, -111, 17, 16, -21,
	-19, -257, 6, 37, 38, -47, 55, 56, -39, -43,
	225, 224, 226, -44, 225, 224, -64, 11, -119, -120,
	-122, 291, -162, -121, 295, 296, 294, -149, -130, 297,
	-148, -146, 176, 173, 71, -147, -254, 294, 288, 280,
	276, -225, -220, -152, 71, -147, -136, 134, 136, 136,
	136, -136, 139, -158, -157, 71, -147, -144, 71, -135,
	134, -64, -64, 243, 139, 251, -160, -160, 240, -66,
	247, 248, -68, 11, 105, -160, -160, -160, 246, -160,
	-160, -160, -160, -160, -160, -160, -76, -64, -72, -152,
	73, -12, 19, -18, -24, -22, -23, -25, -12, 272,
	123, 95, 74, -160, -96, -257, -96, -160, -64, -160,
	-160, 314, 292, 293, 69, 86, 85, 102, -55, -83,
	105, 87, 103, 104, 89, 107, 106, 117, 110, 111,
	112, 113, 114, 115, 116, 108, 109, 120, 95, 96,
	97, 98, 99, 100, 101, -134, -257, -99, -257, 124,
	125, -86, -86, -86, -86, -86, -86, -257, 123, -18,
	-94, -257, -257, -257, -257, -257, -257, -257, -103, -55,
	-257, -260, -257, -260, -260, -260, -260, -260, -260, -260,
	-257, -257, -257, -257, -144, -258, 70, -112, 19, 46,
	-55, -108, -109, -55, -107, -18, -38, 51, -45, 38,
	79, -133, -133, 45, -64, 69, -123, -126, -124, 298,
	300, -121, 291, 95, -129, -148, 73, 44, -129, 45,
	16, 16, 70, 69, -164, -167, -169, -168, -170, -165,
	-166, 170, 171, 121, 174, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 45, 147, 166, 167, 168,
	169, 187, 188, 189, 190, 191, 192, 193, 194, 153,
	172, 266, 154, 155, 156, 157, 158, 159, 161, 162,
	163, 164, 165, -157, 87, 71, 71, 71, -64, -64,
	-249, -250, -251, -209, 300, 44, -135, 67, -157, 40,
	-50, 11, -64, -153, -67, -68, -68, -64, -67, 69,
	-74, 138, 275, 209, 95, -154, -153, -146, 185, 273,
	274, -160, -160, -160, -145, 140, 39, -160, -160, -160,
	-55, -55, -55, -92, 81, 87, 82, 83, -86, -93,
	-96, -99, 78, 105, 103, 104, 89, -86, -86, -86,
	-86, -86, -86, -86, -86, -86, -86, -86, -86, -86,
	-86, -86, -161, 71, 73, 71, -85, -85, -148, -53,
	38, -52, -54, 112, -55, -153, -149, -154, -146, -258,
	-258, -18, -52, -52, -55, -55, -52, -45, -101, -102,
	91, -148, -258, -52, -53, -52, -52, -76, 8, 105,
	69, 18, 69, -110, 41, 143, -111, -258, -47, -87,
	-148, 74, 77, -46, 58, -65, 42, -64, -65, -117,
	-118, -100, -148, -153, -80, 12, -122, -162, -125, 69,
	-127, 69, 299, 301, 302, -123, 67, 84, -55, -201,
	120, -257, 278, 25, -226, -227, -228, -179, -175, -177,
	-178, -180, -181, -182, -183, -184, -185, -186, -187, -188,
	-189, -190, -191, -192, -193, -194, -195, -196, -197, -198,
	-199, 80, 287, -209, 196, 207, 48, 208, 209, 210,
	136, 212, 213, 214, 27, 215, 216, 217, 218, 219,
	220, 221, 222, 223, -220, -221, -222, -5, -4, 136,
	36, 32, 24, 23, -246, -247, -248, -215, -172, -216,
	-217, -218, -173, -42, -174, -202, -203, 81, 87, 44,
	196, 137, 36, 35, 80, 67, 120, 206, 203, -211,
	199, -171, 68, -171, -171, -171, -171, -200, 173, -200,
	-200, -200, 68, 68, -171, -171, -171, -213, 68, -213,
	-213, -214, 68, -214, -249, 40, 67, 67, 67, -139,
	129, 287, 260, 131, 128, 132, 127, 196, 173, 80,
	44, 15, 271, 71, -251, 120, -207, -188, 176, 173,
	170, 302, -76, -64, -111, 245, -160, -160, -71, 103,
	12, -153, -64, -67, -160, -64, -160, 74, 273, -64,
	81, 82, 83, -93, -86, -86, -86, -51, 148, 86,
	-258, -258, -52, 69, -151, -150, 39, -148, 73, 123,
	-257, 123, -258, -258, -258, 69, 142, 39, -258, -52,
	-104, -102, 93, -55, -258, -258, -258, -258, -258, 53,
	-55, -55, -109, -112, -132, 19, 11, 49, 49, -52,
	-114, 276, -64, -114, -80, 69, 95, 123, -107, -55,
	-124, -126, -128, 303, 300, 306, 71, -152, -257, -257,
	-228, -208, 95, -208, 120, -207, -208, -208, -208, -208,
	-208, 211, 211, -208, -208, -208, -208, -208, -208, -208,
	-208, -208, -208, -208, -208, -208, -6, 71, -223, -222,
	137, 35, 33, -248, 81, 73, 74, 75, 81, -41,
	-82, -131, 249, 254, 255, 36, 36, 73, 8, -205,
	71, 73, 201, 202, 44, 44, 204, 205, -212, 200,
	74, -200, -200, 45, -219, 73, -219, 74, 74, -64,
	-64, -64, -160, -145, -140, 136, 36, 95, 140, 133,
	133, 133, -208, -208, 45, 45, -208, -142, 30, 22,
	-240, -241, -242, 46, 20, -160, 73, 73, -55, -67,
	-80, -12, -160, -51, 86, -86, -86, -258, -54, -150,
	112, -154, -53, -149, -163, 121, 170, 147, 168, 164,
	185, 175, 198, 166, 199, -161, -163, 265, -107, 94,
	-55, 92, 54, -64, -56, 11, -84, 45, 49, -18,
	-257, -257, -84, 45, -107, -118, -55, -149, -111, 300,
	304, 305, -258, -152, -152, 73, -205, -208, -208, 74,
	74, 74, 73, 73, -208, -208, 74, 73, 71, 74,
	74, 74, 74, 44, 73, 44, 202, 201, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 74,
	44, 74, 44, 74, 44, 71, -147, -2, -1, 142,
	-6, 36, -223, 68, -41, 70, 71, 121, 70, 69,
	70, 69, 70, 69, -257, -257, -257, -64, -160, 71,
	173, -224, 71, -220, -245, 71, 44, -210, 71, 121,
	44, -204, 74, 44, -242, -241, -208, -208, -71, -86,
	123, -258, -258, -171, -171, -171, -214, -171, 158, -171,
	158, -258, -258, -257, -49, 263, -55, -80, -57, -58,
	-59, -60, -77, -99, -257, -64, -116, 67, -117, -95,
	-97, -96, -257, -18, -113, -152, -115, -152, -117, -111,
	-258, -258, -205, -205, 73, 73, 68, -3, 25, 21,
	31, 68, -2, -6, 70, 74, 73, 74, 74, -230,
	-229, -148, -230, -230, 45, -245, -245, 112, -200, 71,
	-86, -258, 73, -105, 13, 69, -61, -62, -63, 57,
	61, 63, 58, 59, 60, 64, -159, 39, -57, -257,
	-156, -155, 39, -153, 73, 43, -116, 69, -258, -258,
	-258, 69, 123, 69, -258, -257, -176, 277, -230, -230,
	68, -2, 70, 70, 70, -258, 69, -171, -258, -258,
	71, -48, 105, 268, -106, 14, 16, -58, -59, -58,
	-59, 57, 57, 57, 62, 57, 62, 57, -62, -153,
	-258, -78, 65, 135, 66, -155, 36, -97, 49, -18,
	-257, -152, -148, -152, -253, -252, 276, 74, 70, 70,
	-230, 68, -232, -229, -231, -233, -258, 266, 64, 269,
	-55, -94, 67, 67, 57, 57, 136, 136, 136, 8,
	-95, -18, 123, 69, -258, 71, -234, -234, 70, -230,
	-240, -238, -235, -237, 27, 80, 142, -240, -236, -235,
	268, -240, -235, 54, 267, 270, -55, -55, -257, -257,
	-257, -117, -258, -152, -252, 49, -239, 27, -1, 80,
	268, -234, 70, -208, 73, -244, 25, 21, 29, 54,
	-79, -148, -79, -79, 105, -208, 73, 29, -234, 74,
	71, 268, -258, 69, -258, -258, -96, 74, 71, 269,
	-148, 270,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 668, 0, 454,
	454, 454, 454, 454, 454, 0, 759, 742, 347, 357,
	0, 435, 0, 0, 979, 374, 384, 390, 979, 0,
	979, 979, 0, 979, 0, 449, 0, 362, 363, 364,
	977, 1, 3, 676, 0, 0, 458, 461, 456, 40,
	44, 0, 0, 0, 68, 0, 740, 0, 0, 0,
	740, 61, 62, 760, 0, 345, 743, 0, 0, 738,
	348, 0, 358, 0, 0, 0, 979, 979, 0, 0,
	979, 979, 979, 0, 979, 979, 979, 979, 979, 979,
	979, 436, 428, 429, 430, 0, 446, 447, 448, 765,
	766, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 361, 365,
	0, 0, 514, 926, -2, 379, 389, 385, 386, 387,
	388, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	0, 391, 392, 394, 979, 396, 397, 0, 0, 979,
	0, 979, 979, 0, 453, 53, 564, 524, 0, 529,
	531, 0, 566, 567, 568, 569, 570, 0, 0, 0,
	0, 0, 0, 592, 593, 594, 595, 654, 655, 656,
	657, 658, 659, 660, 533, 534, 651, 0, 700, 0,
	0, 0, 0, 0, 0, 0, 642, 0, 616, 616,
	616, 616, 616, 616, 616, 616, 0, 0, 0, 0,
	-2, -2, 0, 450, 451, 32, 680, 0, 0, 668,
	34, 0, 454, 459, 460, 464, 462, 463, 455, 742,
	41, 42, 43, 742, 45, 46, 0, 0, 54, 55,
	704, 0, 0, 706, 733, 734, -2, 0, 0, 0,
	763, 764, -2, 783, 761, 762, 63, 69, 70, 0,
	0, 0, 192, 0, 196, 197, 0, 0, 0, 0,
	0, 0, 0, -2, 346, 769, 770, 738, 0, 0,
	0, 359, 360, 426, 0, 0, 410, 411, 431, 0,
	437, 438, 0, 433, 434, 415, 416, 417, 431, 419,
	420, 421, 422, 423, 424, 425, 442, 355, 368, 366,
	367, 380, 0, -2, 370, 371, 372, 373, 382, 0,
	0, 0, 979, 395, 979, 0, 979, 400, 754, 402,
	403, 979, 979, 979, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 552,
	553, 554, 555, 556, 557, 530, 0, 544, 0, 0,
	0, 586, 587, 588, 589, 590, 0, 468, 0, 32,
	0, 0, 0, 0, 0, 0, 0, 464, 0, 643,
	0, 608, 0, 609, 610, 611, 612, 613, 614, 615,
	0, 468, 0, 0, 0, 33, 978, 28, 0, 0,
	677, 669, 670, 673, 676, 32, 461, 0, 466, 465,
	457, 0, 0, 0, 522, 0, 718, 729, 722, 0,
	0, 707, 0, 0, 711, 715, 716, 717, 293, 714,
	0, 0, -2, 318, 202, 269, 199, 200, 201, 262,
	217, 262, 262, 262, 262, 289, 289, 289, 289, 245,
	246, 247, 248, 249, 0, 0, 232, 262, 262, 262,
	236, 252, 253, 254, 255, 256, 257, 258, 259, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 264, 264,
	264, 266, 266, -2, 0, 0, 0, 0, 118, 0,
	344, -2, 100, 0, 0, 109, 0, 0, 354, 739,
	676, 0, 979, 979, 439, 0, 0, 431, 979, 0,
	979, 443, 444, 0, 0, 515, 767, 768, 375, 376,
	377, 393, 398, 399, 0, 755, 756, 404, 405, 406,
	565, 525, 526, 528, 545, 0, 547, 549, 535, 536,
	560, 561, 562, 0, 0, 0, 0, 558, 540, 0,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 585, 627, 628, 0, 583, 584, 591, 0,
	0, 469, 470, 472, 476, 0, 652, 0, -2, 563,
	699, 32, 0, 0, 0, 0, 0, 0, 649, 646,
	0, 0, 617, 0, 0, 0, 0, 452, 681, 0,
	0, 0, 0, 672, 674, 675, 680, 35, 464, 0,
	661, 0, 0, 0, 467, 49, 0, 513, 49, 522,
	701, 0, 651, 0, 668, 0, 705, 0, 720, 0,
	721, 0, 0, 731, 732, 719, 708, 709, 710, 712,
	0, 0, 0, 0, 119, -2, 122, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 110, 110, 0, 110, 110, 110, 110, 110, 0,
	0, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 193, 194, 310, 329, 0, 331,
	332, 327, -2, 319, 195, 203, 204, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 273, 0, 0,
	288, 0, 302, 304, 0, 0, 0, 0, 0, 271,
	270, 216, 0, 289, 289, 239, 240, 241, 0, 242,
	243, 244, 0, 0, 233, 234, 235, 227, 0, 228,
	229, 230, 0, 231, 64, 741, 0, 0, 0, 979,
	754, 0, 751, 0, 749, 0, 744, 745, 746, 747,
	748, 750, 752, 753, 101, 110, 110, 106, 112, 0,
	0, 110, 349, 91, 979, 0, 408, 409, 412, 0,
	0, 432, 431, 522, 418, 356, 445, 381, 0, 979,
	546, 548, 550, 537, 558, 541, 0, 538, 0, 0,
	532, 596, 0, 0, 473, 477, 0, 479, 480, 0,
	468, 0, -2, 599, 600, 0, 0, 0, 0, 668,
	0, 647, 0, 0, 607, 618, 619, 620, 621, 0,
	678, 679, 671, 29, 0, 736, 737, 662, 663, 481,
	0, 0, 512, 0, 668, 0, 0, 0, 676, 523,
	730, 723, 724, 0, 0, 728, 294, 0, 0, 0,
	123, 0, 111, 0, 110, 110, 0, 0, 0, 0,
	0, 110, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 311, 310, 330,
	0, 329, 320, 205, 274, 275, 276, 277, 278, 279,
	280, 282, 285, 286, 287, 301, 303, 305, 0, 292,
	187, 188, 295, 296, 297, 298, 299, 300, 198, 272,
	0, 237, 238, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 336, 0, 979, 757, 758, 0, 0, 0,
	0, 0, 0, 0, 113, 114, 0, 352, 350, 351,
	353, 92, 93, 110, 110, 407, 427, 440, 441, 439,
	413, 383, 401, 539, 0, 559, 542, 597, 471, 478,
	474, 0, 0, 653, 0, 262, 262, 632, 262, 266,
	635, 262, 637, 262, 640, 0, 0, 0, 644, 606,
	650, 0, 682, 30, 522, 0, 693, 0, 0, -2,
	0, 0, 38, 0, 676, 702, 703, 652, 52, 725,
	726, 727, 71, 0, 0, 189, 190, 0, 0, 148,
	149, 186, 151, 152, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 0, 323, 0,
	0, 322, 310, 0, 281, 263, 290, 291, 250, 0,
	251, 0, 267, 0, 0, 0, 0, 337, 338, 339,
	0, 341, 342, 343, 104, 76, 77, 105, 115, 116,
	117, 107, 102, 103, 94, 95, 0, 0, 414, 543,
	0, 598, 601, 629, 289, 633, 634, 636, 638, 639,
	641, 603, 602, 0, 0, 0, 648, 664, 482, 483,
	485, 486, 487, 495, 0, 497, 36, 0, 693, 683,
	695, 697, 0, 32, 0, 689, 0, 47, 39, 51,
	0, 59, 150, 191, 153, 154, 0, 321, 324, 325,
	326, 0, 0, 322, 283, 0, 261, 0, 0, 0,
	333, 262, 0, 0, 0, 96, 97, 475, 630, 631,
	622, 605, 645, 666, 0, 0, 0, 0, 0, 502,
	0, 0, 505, 0, 0, 0, 0, 496, 0, 0,
	516, 498, 0, 500, 501, 0, 37, 0, 698, -2,
	0, 0, 0, 0, 50, 0, 73, 0, 0, 0,
	0, 0, 284, 265, 268, 81, 0, 335, 85, 89,
	340, 0, 0, 0, 31, 0, 0, 484, 491, 0,
	494, 503, 504, 506, 0, 508, 0, 510, 511, 488,
	489, 490, 0, 0, 0, 499, 0, 696, 0, -2,
	0, 691, 690, 48, 0, 56, 0, 60, 316, 316,
	0, 0, 91, 334, 91, 91, 604, 0, 0, 0,
	667, 665, 0, 0, 507, 509, 0, 0, 0, 0,
	686, 32, 0, 0, 72, 0, 306, 307, 316, 0,
	65, 82, 83, 84, 110, 0, 0, 66, 86, 87,
	0, 67, 90, 623, 0, 626, 492, 493, 0, 0,
	0, 694, -2, 692, 57, 0, 317, 110, 313, 0,
	0, 308, 316, 0, 80, 78, 74, 75, 0, 624,
	0, 520, 0, 0, 0, 0, 314, 0, 309, 79,
	88, 0, 517, 0, 518, 519, 58, 312, 315, 0,
	521, 625,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 88, 3, 3, 3, 115, 107, 3,
	68, 70, 112, 110, 69, 111, 123, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 316,
	96, 95, 97, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 89, 90, 91, 92, 93, 94, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1086
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1088
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1121
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1166
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1179
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1191
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1203
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = ""
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1231
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.statement = &Do{Exprs: yyDollar[2].exprs}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.optVal = nil
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1339
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 66:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 67:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.str = "hash"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.str = "btree"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.str = "default"
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1527
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1545
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.str = "default"
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1630
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1635
		{
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1637
		{
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.str = "character set"
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = "char set"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.str = "default"
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1669
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2004
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2219
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.optVal = nil
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2645
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.str = yyDollar[3].str
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2741
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2761
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2786
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2798
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 308:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2812
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2823
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2888
		{
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2894
		{
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2905
		{
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2937
		{
			// set empty
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.str = yyDollar[1].str
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2963
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2979
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2984
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3009
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.byt = 0
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.byt = 1
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3032
		{
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3036
		{
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3040
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3052
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3056
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3070
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3076
		{
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3078
		{
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3088
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3094
		{
			yyVAL.statement = &Xa{}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3100
		{
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3102
		{
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3104
		{
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3107
		{
			yyVAL.showFilter = nil
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3111
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3121
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3131
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3139
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3143
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3156
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3160
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3178
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3183
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.optVal = nil
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3196
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3221
		{
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3223
		{
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3225
		{
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3239
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3243
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3253
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3257
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3261
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3295
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3299
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3303
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3315
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3326
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3353
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3369
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3373
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3378
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3382
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3388
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3396
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3402
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3406
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3416
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3422
		{
			yyVAL.str = ""
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3426
		{
			yyVAL.str = "full "
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3436
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3442
		{
			yyVAL.showFilter = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3446
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3450
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3455
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3459
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3463
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3469
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3475
		{
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3477
		{
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3481
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3486
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNone
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3490
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNoWriteToBinlog
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3494
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionLocal
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3500
		{
			yyVAL.statement = &Optimize{OptimizeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3506
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3511
		{
			setAllowComments(yylex, true)
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3514
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3520
		{
			yyVAL.bytes2 = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3524
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3530
		{
			yyVAL.str = UnionStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.str = UnionAllStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.str = UnionDistinctStr
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3551
		{
			yyVAL.str = SQLCacheStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3556
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3560
		{
			yyVAL.str = DistinctStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3565
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3569
		{
			yyVAL.str = StraightJoinHint
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3574
		{
			yyVAL.selectExprs = nil
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3578
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3584
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3594
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3598
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3602
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3611
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3615
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3619
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3626
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3631
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3635
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3641
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3645
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3669
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3682
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3686
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3699
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3708
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3712
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3716
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3723
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3729
		{
			yyVAL.str = JoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3733
		{
			yyVAL.str = JoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3737
		{
			yyVAL.str = JoinStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3741
		{
			yyVAL.str = StraightJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3747
		{
			yyVAL.str = LeftJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3751
		{
			yyVAL.str = LeftJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3755
		{
			yyVAL.str = RightJoinStr
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3759
		{
			yyVAL.str = RightJoinStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3765
		{
			yyVAL.str = NaturalJoinStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3769
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3779
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3783
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3789
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3793
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3798
		{
			yyVAL.indexHints = nil
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3802
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3806
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3810
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3820
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3825
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3829
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3835
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3839
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3843
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3851
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3855
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3859
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3865
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3869
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3875
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3879
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3885
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3889
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3893
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3897
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3901
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3909
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3913
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3927
		{
			yyVAL.str = IsNullStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3931
		{
			yyVAL.str = IsNotNullStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3935
		{
			yyVAL.str = IsTrueStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3939
		{
			yyVAL.str = IsNotTrueStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.str = IsFalseStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.str = IsNotFalseStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3953
		{
			yyVAL.str = EqualStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3957
		{
			yyVAL.str = LessThanStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3961
		{
			yyVAL.str = GreaterThanStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3965
		{
			yyVAL.str = LessEqualStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3969
		{
			yyVAL.str = GreaterEqualStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3973
		{
			yyVAL.str = NotEqualStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3977
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3982
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3992
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3996
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4000
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4006
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4012
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4016
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4022
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4026
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4030
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4034
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4038
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4042
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4046
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4050
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4054
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4058
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4062
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4066
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4070
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4074
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4078
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4082
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4086
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4090
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4094
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4098
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4102
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4106
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4114
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4128
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4136
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4154
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4158
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4162
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4172
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4176
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4180
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4184
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4188
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 604:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 605:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4204
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4218
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4222
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4226
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4231
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4236
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4241
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4246
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4269
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4273
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4279
		{
			yyVAL.str = ""
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4283
		{
			yyVAL.str = BooleanModeStr
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4287
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 625:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4291
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4295
		{
			yyVAL.str = QueryExpansionStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4301
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4305
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4311
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4315
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4319
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4341
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4345
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4349
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4357
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4361
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4366
		{
			yyVAL.expr = nil
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4370
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4375
		{
			yyVAL.str = string("")
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4379
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4385
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4389
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4395
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4400
		{
			yyVAL.expr = nil
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4404
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4410
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4414
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4418
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4424
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4428
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4432
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4436
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4440
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4444
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4448
		{
			yyVAL.expr = &NullVal{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4454
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.exprs = nil
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4481
		{
			yyVAL.expr = nil
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4485
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4490
		{
			yyVAL.orderBy = nil
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4494
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4500
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4504
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4510
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4515
		{
			yyVAL.str = AscScr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4519
		{
			yyVAL.str = AscScr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4523
		{
			yyVAL.str = DescScr
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4528
		{
			yyVAL.limit = nil
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4532
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4536
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4540
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4545
		{
			yyVAL.str = ""
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4549
		{
			yyVAL.str = ForUpdateStr
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4553
		{
			yyVAL.str = ShareModeStr
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4566
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4570
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4574
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4579
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4583
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4587
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4598
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4602
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4606
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4611
		{
			yyVAL.updateExprs = nil
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4615
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4621
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4625
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4631
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4635
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4641
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4647
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4657
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4661
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4667
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4673
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4677
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4683
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4687
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4694
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4698
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4702
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4706
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4710
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4717
		{
			yyVAL.bytes = []byte("charset")
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4723
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4727
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4731
		{
			yyVAL.expr = &Default{}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4737
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4741
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4747
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4751
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4757
		{
			yyVAL.str = ""
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4761
		{
			yyVAL.str = yyDollar[2].str
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4767
		{
			yyVAL.str = yyDollar[3].str
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4773
		{
			yyVAL.str = RepeatableRead
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4777
		{
			yyVAL.str = ReadCommitted
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4781
		{
			yyVAL.str = ReadUncommitted
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4785
		{
			yyVAL.str = Serializable
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4791
		{
			yyVAL.str = ""
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4795
		{
			yyVAL.str = yyDollar[2].str
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4801
		{
			yyVAL.str = TxReadWrite
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4805
		{
			yyVAL.str = TxReadOnly
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4811
		{
			yyVAL.str = SessionStr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4815
		{
			yyVAL.str = SessionStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4819
		{
			yyVAL.str = GlobalStr
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4828
		{
			yyVAL.byt = 0
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4832
		{
			yyVAL.byt = 1
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4837
		{
			yyVAL.byt = 0
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4841
		{
			yyVAL.byt = 1
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4846
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4850
		{
			yyVAL.str = IgnoreStr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4856
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4860
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4864
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4868
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4872
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4876
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4880
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4884
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4888
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4892
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4897
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4901
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4905
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4911
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4915
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4920
		{
			yyVAL.str = IndexStr
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4924
		{
			yyVAL.str = UniqueStr
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4930
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4934
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4941
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4947
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4951
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4958
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4964
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4968
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5201
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5210
		{
			decNesting(yylex)
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5215
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
